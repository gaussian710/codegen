 SELECT COUNT(*) FROM head WHERE age > 56;
                        ``` SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age NULLS LAST;
                        ``` SELECT CAST(creation AS integer), name, budget_in_billions FROM department;
                        ``` SELECT MAX(Budget_in_Billions) AS max_budget, MIN(Budget_in_Billons) AS min_budget FROM department;
                        ``` AVG(department.num_employees) FROM department WHERE department.ranking BETWEEN 10 AND 15;
                        ``` SELECT head.name FROM head WHERE head.born_state != 'California';
                        ``` SELECT DISTINCT head.born_state FROM head GROUP BY head.born_state HAVING COUNT(head.head_id) >= 3;
                        ``` SELECT EXTRACT(YEAR FROM to_timestamp(creation, 'YYYY-MM-DD HH24:MI:SS')) AS YEAR, COUNT(*) AS number_of_departments FROM department GROUP BY YEAR ORDER BY number_of_departments DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_acting_status FROM management;
                        ``` SELECT COUNT(*) AS num_departments FROM department WHERE head_id IS NULL;
                        ``` SELECT head.head_id, head.name FROM head WHERE head.name ilike '%Ha%';
                        ``` SELECT COUNT(*) FROM farm;
                        ``` SELECT COUNT(*) FROM farm;
                        ``` SELECT farm.total_horses FROM farm ORDER BY farm.total_horses ASC;
                        ``` SELECT farm.farm_id, SUM(farm.total_horses) AS total_horses FROM farm GROUP BY farm.farm_id ORDER BY total_horses ASC;
                        ``` SELECT farm_competition.hosts FROM farm_competition WHERE farm_competition.theme not ilike '%Aliens%' ORDER BY farm_competition.hosts NULLS LAST;
                        ``` SELECT farm_competition.hosts FROM farm_competition WHERE farm_competition.theme not ilike '%Aliens%';
                        ``` SELECT farm_competition.year, farm_competition.theme FROM farm_competition ORDER BY farm_competition.year ASC;
                        ``` SELECT farm_competition.year, farm_competition.theme FROM farm_competition ORDER BY farm_competition.year ASC;
                        ``` SELECT AVG(working_horses) AS average_working_horses FROM farm WHERE total_horses > 5000;
                        ``` SELECT AVG(working_horses) AS average_working_horses FROM farm WHERE total_horses > 5000;
                        ``` SELECT MAX(Cows) AS max_cattle, MIN(Cows) AS min_cattle FROM farm;
                        ``` SELECT MAX(Cows) AS max_cattle, MIN(Cows) AS min_cattle FROM farm;
                        ``` SELECT COUNT(DISTINCT city.status) AS number_of_status FROM city;
                        ``` SELECT COUNT(DISTINCT city.status) AS number_of_status FROM city;
                        ``` SELECT city.official_name FROM city ORDER BY city.population DESC;
                        ``` SELECT city.official_name FROM city ORDER BY city.population DESC;
                        ``` SELECT c.official_name, c.status FROM city c WHERE c.population = (SELECT MAX(population) FROM city);
                        ``` SELECT c.official_name, c.status FROM city c WHERE c.population = (SELECT MAX(population) FROM city);
                        ``` SELECT city.status, AVG(city.population) AS average_population FROM city GROUP BY city.status ORDER BY city.status NULLS LAST;
                        ``` SELECT c.status, AVG(c.population) AS average_population FROM city c GROUP BY c.status;
                        ``` SELECT city.status, COUNT(city.official_name) AS number_of_cities FROM city GROUP BY city.status ORDER BY number_of_cities DESC NULLS LAST;
                        ``` SELECT city.status, COUNT(*) AS frequency FROM city GROUP BY city.status ORDER BY frequency ASC;
                        ``` SELECT city.official_name, status.status_type, COUNT(*) AS frequency FROM city JOIN status ON city.status = status.status_type GROUP BY city.official_name, status.status_type ORDER BY frequency DESC NULLS LAST;
                        ``` SELECT city.status, COUNT(*) AS frequency FROM city GROUP BY city.status ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT city.official_name FROM city WHERE city.city_id NOT IN (SELECT competition.city_id FROM competition);
                        ``` SELECT c.official_name FROM city c LEFT JOIN farm_competition f ON c.city_id = f.city_id WHERE f.city_id IS NULL;
                        ``` SELECT city.status FROM city WHERE city.population > 1500 AND city.population < 500;
                        ``` SELECT DISTINCT city.status FROM city WHERE (city.population > 1500 AND city.population < 500) OR (city.population > 500 AND city.population < 1500);
                        ``` SELECT city.official_name FROM city WHERE city.population > 1500 AND city.population < 500;
                        ``` SELECT city.official_name FROM city WHERE city.population > 1500 OR city.population < 500;
                        ``` SELECT city.census_ranking FROM city WHERE city.status != 'Village' ORDER BY city.census_ranking NULLS LAST;
                        ``` SELECT city.census_ranking FROM city WHERE city.status != 'Village' ORDER BY city.census_ranking NULLS LAST;
                        ``` SELECT student_id FROM Student_Course_registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(COUNT(course_id)) FROM Student_Course_registrations);
                        ``` SELECT Student_Course_registrations.student_id FROM Student_Course_registrations GROUP BY Student_Course_registrations.student_id HAVING COUNT(Student_Course_registrations.course_id) = (SELECT MIN(COUNT(course_id)) FROM Student_Course_registrations);
                        ``` SELECT s.student_id FROM Students AS s LEFT JOIN Enrollments e ON s.student_id = e.student_id WHERE e.student_id IS NULL;
                        ``` SELECT s.student_id FROM Students AS s LEFT JOIN Enrollments e ON s.student_id = e.student_id WHERE e.student_id IS NULL;
                        ``` SELECT student_id FROM Student_Course_attendance GROUP BY student_id HAVING COUNT(course_id) > 0;
                        ``` SELECT DISTINCT student_id FROM Student_Course_Attendance;
                        ``` SELECT MAX(assessment_date) AS latest_assessment_date, MIN(candidate_id) AS earliest_candidate_id FROM Candidate_Assessments;
                        ``` SELECT MAX(assessment_date) AS latest_assessment_date, MIN(candidate_id) AS earliest_candidate_id FROM Candidate_Assessments;
                        ``` SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass';
                        ``` SELECT candidate_id FROM Candidate_Assessments WHERE assessment_outcome_code = 'Pass' ;
                        ``` SELECT Student_Course_attendance.student_id FROM Student_Course_attendance WHERE Student_Course_attendance.course_id = 301;
                        ``` SELECT Student_Course_attendance.student_id FROM Student_Course_attendance WHERE Student_Course_attendance.course_id = 301;
                        ``` SELECT s.student_id FROM Student_Course_attendance sa JOIN Student s ON sa.student_id = s.student_id WHERE sa.course_id = 301 ORDER BY sa.date_of_attendance DESC LIMIT 1;
                        ``` SELECT s.student_id FROM Student_Course_scattendance s JOIN Course c ON s.course_id = c.course_id WHERE c.course_code = '301' ORDER BY s.date_of_attendance DESC;
                        ``` SELECT course_name FROM Courses ORDER BY course_name ASC;
                        ``` SELECT course_name FROM Courses ORDER BY course_name ASC;
                        ``` SELECT People.first_name FROM People ORDER BY People.first_name ASC;
                        ``` SELECT People.first_name FROM People ORDER BY People.first_name ASC;
                        ``` SELECT student_id FROM Student_Course_registrations UNION SELECT student_id FROM Course_Attances;
                        ``` SELECT DISTINCT student_id FROM Student_Course_registrations;
                        ``` SELECT DISTINCT Student_Course_registrations.course_id FROM Student_Course_registrations WHERE Student_Course_registrations.student_id = 121;
                        ``` SELECT DISTINCT Student_Course_registrations.course_id FROM Student_Course_registrations WHERE Student_Course_registrations.student_id = 121;
                        ``` SELECT Student_Course_registrations.student_id FROM Student_Course_registrations WHERE Student_Course_registrations.student_id NOT IN (SELECT Student_Course_attendances.student_id FROM Student_Course_attendments);
                        ``` SELECT Student_Course_registrations.student_id FROM Student_Course_registrations WHERE Student_Course_registrations.student_id NOT IN (SELECT student_id FROM Course_Attancees);
                        ``` SELECT weather.date FROM weather WHERE weather.max_temperature_f > 85;
                        ``` SELECT weather.date FROM weather WHERE weather.max_temperature_f > '85' ORDER BY weather.date NULLS LAST;
                        ``` SELECT station.name FROM station WHERE station.lat < 37.5;
                        ``` SELECT station.name FROM station WHERE station.lat < 37.5;
                        ``` SELECT c.name AS city_name, s.name AS station_name, MAX(a.lat) AS max_lat FROM station a JOIN city c ON a.city = c.name GROUP BY c.name, s.name;
                        ``` SELECT c.name AS city_name, MAX(s.lat) AS max_lat FROM station s JOIN city c ON s.city = c.name GROUP BY c.name;
                        ``` SELECT r.id, r.start_date, r.end_date FROM ride r ORDER BY r.id ASC NULLS LAST LIMIT 3;
                        ``` SELECT r.id, r.start_station_name, r.end_station_name, row_number() OVER (ORDER BY r.id) AS row_num FROM ride r ORDER BY r.id ASC LIMIT 3;
                        ``` SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE "city" ILIKE '%San%Jose%'
                        ``` SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose';
                        ``` SELECT trip.id FROM ride WHERE duration = (SELECT MIN(duration) FROM ride);
                        ``` SELECT MIN(id) AS shortest_trip_id FROM trip;
                        ``` SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM ride WHERE bike_id = 636;
                        ``` SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM ride WHERE bike_id = 636;
                        ``` SELECT weather.zip_code, AVG(weather.mean_temperature_f) AS avg_mean_temperature_f FROM weather WHERE EXTRACT(MONTH FROM weather.date::DATE) = 8 GROUP BY weather.zip_code;
                        ``` SELECT weather.zip_code, AVG(weather.mean_temperature_f) AS avg_mean_temperature FROM weather WHERE weather.date ilike '8%' GROUP BY weather.zip_code;
                        ``` SELECT COUNT(DISTINCT bike_id) AS unique_bikes FROM trip;
                        ``` SELECT COUNT(DISTINCT bike_id) AS number_of_bikes FROM ride;
                        ``` SELECT COUNT(DISTINCT station.city) AS num_cities FROM station;
                        ``` SELECT COUNT(DISTINCT station.city) AS number_of_cities FROM station;
                        ``` SELECT COUNT(*) AS station_count FROM station WHERE city ilike '%Mountain%';
                        ``` SELECT COUNT(*) AS total_stations FROM station WHERE city = 'Mountain View';
                        ``` SELECT start_station_name, start_station_id FROM ride GROUP BY start_station_name, start_station_id HAVING COUNT(*) > (SELECT COUNT(*) FROM ride WHERE start_date like 'August%')
                        ``` SELECT s.start_station_name, CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM trip WHERE start_date like '2019-08%'), 0) AS ratio FROM station s JOIN trip r ON s.id = r.start_station_id GROUP BY s.start_station_name ORDER BY ratio DESC NULLS LAST LIMIT 1;
                        ``` SELECT r.bike_id, COUNT(r.id) AS frequency FROM ride r WHERE r.zip_code = 94002 GROUP BY r.bike_id ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(r.duration) AS max_duration, b.id AS bike_id FROM ride r JOIN station h ON r.station_id = h.id WHERE h.zip_code = 94002 GROUP BY b.id;
                        ``` SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;
                        ``` SELECT COUNT(*) AS total_days FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;
                        ``` SELECT station.id FROM station WHERE city ilike '%San%Francisco%' GROUP BY id HAVING AVG(dock_count) > 10;
                        ``` SELECT station.id FROM station WHERE station.city = 'San Francisco' AND (station.dock_count > 10 OR station.dock_count IS NULL) GROUP BY station.id HAVING COUNT(*) > 1;
                        ``` SELECT weather.cloud_cover, COUNT(*) AS frequency FROM weather WHERE weather.zip_code = 94107 GROUP BY weather.cloud_cover ORDER BY frequency DESC NULLS LAST LIMIT 3;
                        ``` SELECT weather.cloud_cover, COUNT(*) AS frequency FROM weather WHERE weather.zip_code = 94107 GROUP BY weather.cloud_cover ORDER BY frequency DESC NULLS LAST LIMIT 3;
                        ``` SELECT weather.zip_code, AVG(weather.mean_sea_level_pressure_inches) AS avg_pressure FROM weather GROUP BY weather.zip_code ORDER BY avg_pressure ASC NULLS LAST LIMIT 1;
                        ``` SELECT weather.zip_code, AVG(weather.mean_sea_level_pressure_inches) AS avg_pressure FROM weather GROUP BY weather.zip_code ORDER BY avg_pressure ASC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(status.bikes_available) AS average_bikes_available FROM status WHERE status.station_id NOT IN (SELECT station_id FROM station WHERE city ilike '%Palo%Alto%') ;
                        ``` SELECT AVG(status.bikes_available) AS average_bikes_available FROM status WHERE status.station_id NOT IN (SELECT station_id FROM station WHERE station_name ilike '%Palo%Alto%') AND status.station_id IS NOT NULL;
                        ``` SELECT AVG(station.long) AS average_longitude FROM station AS station WHERE (SELECT COUNT(bike_stands.id) FROM bike_stands WHERE bike_stands.station = station.id) <= 10;
                        ``` SELECT AVG(station.long) AS average_longitude FROM station station WHERE station.dock_count <= 10;
                        ``` SELECT weather.zip_code, MAX(weather.max_temperature_f) AS max_temp FROM weather WHERE weather.max_temperature_f >= 80 GROUP BY weather.zip_code ORDER BY max_temp DESC NULLS LAST;
                        ``` SELECT weather.zip_code, MAX(weather.max_temperature_f) AS max_temp, MAX(weather.date) AS date_with_max_temp FROM weather GROUP BY weather.zip_code HAVING MAX(weather.max_temperature_f) >= 80;
                        ``` SELECT weather.zip_code, COUNT(*) AS number_of_days FROM weather WHERE weather.max_wind_speed_mph >= 25 GROUP BY weather.zip_code;
                        ``` SELECT weather.zip_code, COUNT(*) AS number_of_occasions FROM weather WHERE weather.max_wind_speed_mph >= 25 GROUP BY weather.zip_code;
                        ``` SELECT weather.date, weather.zip_code FROM weather WHERE weather.min_dew_point_f < (SELECT MIN(weather.min_dew_point_f) FROM weather WHERE weather.zip_code = 94107) AND weather.zip_code != 94107 ORDER BY weather.date NULLS LAST;
                        ``` SELECT weather.date, weather.zip_code FROM weather WHERE weather.min_dew_point_f < (SELECT MIN(weather.min_dew_point_f) FROM weather WHERE weather.zip_code = 94107) AND weather.zip_code IN (SELECT weather.zip_code FROM weather WHERE weather.date = weather.date) GROUP BY weather.date, weather.zip_code HAVING COUNT(DISTINCT weather.zip_code) > 1 ORDER BY weather.date NULLS LAST;
                        ``` SELECT weather.date FROM weather WHERE weather.zip_code = 94107 AND weather.events ilike '%Fog%' OR weather.events ilike '%Rain%'
                        ``` SELECT weather.date FROM weather WHERE weather.zip_code != 94107 AND weather.foggy = 'No' GROUP BY weather.date;
                        ``` SELECT station.id FROM station WHERE (station.lat > 37.4 AND station.dock_count >= 7) GROUP BY station.id HAVING MAX(station.dock_count) IS NOT NULL;
                        ``` SELECT station.id FROM station WHERE (station.lat > 37.4 AND station.dock_count >= 7) GROUP BY station.id;
                        ``` SELECT h.name, h.lat, h.city FROM harbor_hack AS h WHERE h.lat = (SELECT MIN(lat) FROM harbor_hock);
                        ``` SELECT a.name, a.lat, a.city FROM dock_station AS a JOIN (SELECT id FROM dock_station ORDER BY long DESC LIMIT 1) AS b ON a.id = b.id;
                        ``` SELECT weather.date, AVG(weather.mean_temperature_f) AS average_mean_temperature_f, AVG(weather.mean_humidity) AS average_mean_humidity FROM weather GROUP BY weather.date ORDER BY MAX(weather.max_gust_speed_mph) DESC NULLS LAST LIMIT 3;
                        ``` SELECT weather.date, AVG(weather.mean_temperature_f) AS avg_mean_temperature_f, AVG(weather.mean_humidity) AS avg_humidity FROM weather GROUP BY weather.date HAVING MAX(weather.max_gust_speed_mph) IN (SELECT MAX(MAX_gust_speed_mph)) FROM weather GROUP BY weather.date ORDER BY weather.date NULLS LAST;
                        ``` SELECT c.name, COUNT(s.id) AS station_count FROM city c JOIN station s ON c.id = s.city GROUP BY c.name HAVING COUNT(s.id) >= 15;
                        ``` SELECT c.name AS "City Name", COUNT(*) AS "Number of Stations" FROM station a JOIN city c ON a.city = c.name GROUP BY c.name HAVING COUNT(a.id) >= 15;
                        ``` SELECT start_station_id, start_station_name FROM station.ride WHERE start_date like '2019-01-01%' GROUP BY start_station_id, start_station_name HAVING COUNT(id) >= 200;
                        ``` SELECT s.id AS station_station_id, s.name AS start_station_name FROM station_stations s JOIN (SELECT start_station_id, COUNT(*) AS trip_count FROM rides GROUP BY start_station_id) c ON s.id = c.start_station_id WHERE c.rideps_count >= 200;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.mean_visibility_miles < 10;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.mean_visibility_miles < 10 ORDER BY weather.zip_code NULLS LAST;
                        ``` SELECT c.name AS city_name, s.lat AS station_lat FROM city c JOIN station h ON c.id = h.city WHERE h.lat IS NOT NULL ORDER BY h.lat DESC;
                        ``` SELECT c.name, AVG(l.long) AS average_longitude FROM city c JOIN station l ON c.id = l.city GROUP BY c.name ORDER BY average_long DESC;
                        ``` SELECT weather.date, MAX(weather.cloud_cover) AS max_cloud_cover FROM weather GROUP BY weather.date ORDER BY max_cloud_cover DESC NULLS LAST LIMIT 5;
                        ``` SELECT weather.date, weather.cloud_cover FROM weather ORDER BY weather.cloud_cover DESC NULLS LAST LIMIT 5;
                        ``` SELECT r.id, r.duration FROM ride_duration_ranking rdr JOIN ride r ON rdr.ride_id = r.id ORDER BY r.duration DESC NULLS LAST LIMIT 3;
                        ``` WITH trip_durations AS (SELECT id, duration FROM ride ORDER BY duration DESC LIMIT 1) SELECT r.id, r.duration FROM ride r JOIN ride_durations rd ON r.duration = rd.duration;
                        ``` SELECT DISTINCT start_station_name FROM ride WHERE duration < 100;
                        ``` SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.max_dew_point_f < 70 ORDER BY weather.zip_code NULLS LAST;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.max_dew_point_f < 70 ORDER BY weather.zip_code NULLS LAST;
                        ``` SELECT r.id FROM ride r JOIN (SELECT AVG(duration) AS avg_duration FROM ride WHERE zip_code = 94103) avg_duration_ride ON r.duration >= avg_duration_ride.avg_duration;
                        ``` SELECT r.id FROM ride r JOIN (SELECT AVG(duration) AS avg_duration FROM ride WHERE zip_code = 94103) avg_duration ON r.duration >= avg_duration.avg_duration;
                        ``` SELECT weather.date FROM weather WHERE (weather.mean_sea_level_pressure_inches BETWEEN 30.3 AND 31) GROUP BY weather.date;
                        ``` SELECT weather.date FROM weather WHERE (weather.mean_sea_level_pressure_inches BETWEEN 30.3 AND 31) GROUP BY weather.date;
                        ``` SELECT weather.date, (weather.max_temperature_f - weather.min_temperature_f) AS temperature_difference FROM weather ORDER BY temperature_difference ASC LIMIT 1;
                        ``` SELECT weather.date, (weather.max_temperature_f - weather.min_temperature_f) AS temperature_range FROM weather ORDER BY temperature_range ASC LIMIT 1;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.mean_humidity < 70 GROUP BY weather.zip_code HAVING COUNT(weather.id) >= 100;
                        ``` SELECT weather.zip_code FROM weather WHERE weather.mean_humidity < 70 GROUP BY weather.zip_code HAVING COUNT(weather.id) >= 100;
                        ``` SELECT a.name FROM station AS a JOIN (SELECT c.station_id, COUNT(trip_id) AS trip_count FROM trip AS c GROUP BY c.station_id) AS b ON a.id = b.station_id WHERE a.city = 'Palo Alto' AND b.ridep_count <= 100;
                        ``` SELECT station.name FROM station WHERE "city" ILIKE '%Palo%Alto%' AND id NOT IN (SELECT trip_end.station_id FROM trip_end);
                        ``` SELECT COUNT(*) AS total_books FROM book;
                        ``` SELECT book.writer FROM book ORDER BY book.writer ASC;
                        ``` SELECT book.title FROM book ORDER BY book.issues ASC;
                        ``` SELECT book.title FROM book WHERE book.writer != 'Elaine Lee' ORDER BY book.issues DESC NULLS LAST;
                        ``` SELECT book.title, book.issues FROM book;
                        ``` SELECT publication.publication_date FROM publication ORDER BY publication.price DESC;
                        ``` SELECT DISTINCT publication.publisher FROM publication WHERE publication.price > 5000000;
                        ``` SELECT publication.publisher FROM publication ORDER BY publication.price DESC NULLS LAST LIMIT 1;
                        ``` SELECT publication.publication_date FROM publication ORDER BY price ASC NULLS LAST LIMIT 3;
                        ``` SELECT publication.publisher FROM publication GROUP BY publication.publisher HAVING COUNT(publication.publication_id) > 1;
                        ``` SELECT publication.publisher, COUNT(publication.book_id) AS book_count FROM publication GROUP BY publication.publisher;
                        ``` SELECT publication.publication_date FROM publication GROUP BY publication.publication_date ORDER BY COUNT(publication.publication_date) DESC NULLS LAST LIMIT 1;
                        ``` SELECT writer FROM book GROUP BY writer HAVING COUNT(book_id) > 1;
                        ``` SELECT book.title FROM book WHERE book.issues IS NULL;
                        ``` SELECT DISTINCT publication.publisher FROM publication WHERE publication.price > 10000000 AND publication.price < 5000000;
                        ``` SELECT COUNT(DISTINCT Publication_Date) AS num_publication_dates FROM publication;
                        ``` SELECT COUNT(DISTINCT Publication_Date) AS number_of_publication_dates FROM publication;
                        ``` SELECT publication.price FROM publication WHERE publication.publisher IN ('Person', 'Wiley');
                        ``` SELECT COUNT(*) AS total_actors FROM actor;
                        ``` SELECT COUNT(*) FROM actor;
                        ``` SELECT actor.name FROM actor ORDER BY actor.name ASC;
                        ``` SELECT actor.name FROM actor ORDER BY actor.name ASC;
                        ``` SELECT actor.name, COUNT(actor_musical.actor_id) AS number_of_acting_roles FROM actor JOIN actor_musical ON actor.actor_id = actor_musical.actor_id GROUP BY actor.name;
                        ``` SELECT a.actor_id, a.name, c.character, d.duration FROM actor AS a JOIN musical AS c ON a.musical_id = c.musical_id JOIN duration AS d ON c.duration_id = d.duration_id;
                        ``` SELECT actor.name FROM actor WHERE actor.age != 20;
                        ``` SELECT actor.name FROM actor WHERE age != 20;
                        ``` SELECT actor.name, actor.character FROM actor ORDER BY actor.age DESC;
                        ``` SELECT actor.character FROM actor ORDER BY actor.age DESC;
                        ``` SELECT MAX(duration) AS max_duration FROM actor;
                        ``` SELECT MAX(age) AS max_age, COUNT(actor_id) AS total_actors FROM actor;
                        ``` SELECT Musical.Name FROM Musical WHERE Musical.Nominee ilike '%Bob%Fosse%' ORDER BY Musical.Name NULLS LAST;
                        ``` SELECT m.name FROM musical m JOIN nomine j ON m.nominee = j.name WHERE j.name ilike '%Bob%Fosse%';
                        ``` SELECT m.name FROM musical m WHERE m.award != 'Tony Award';
                        ``` SELECT m.name FROM musical m WHERE m.award != 'Tony Award';
                        ``` SELECT m.name, COUNT(n.nominee) AS total_nominations FROM musical m JOIN nomine n ON m.award = n.award GROUP BY m.name;
                        ``` SELECT m.name, COUNT(n.nominee) AS number_of_nominations FROM musical m JOIN nomine n ON m.nominee = n.name GROUP BY m.name;
                        ``` SELECT m.name, COUNT(n.nominee) AS num_nominations FROM musical AS m JOIN musical AS n ON m.musical_id = n.nominee GROUP BY m.name ORDER BY num_nominations DESC NULLS LAST LIMIT 1;
                        ``` SELECT m.nominee, COUNT(*) AS num_musicals FROM musical m GROUP BY m.nominee ORDER BY num_musicals DESC NULLS LAST LIMIT 1;
                        ``` SELECT musical.result, COUNT(*) AS frequency FROM musical GROUP BY musical.result ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT musical.result, COUNT(*) AS frequency FROM musical GROUP BY musical.result ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT m.nominee FROM musical m GROUP BY m.nominee HAVING COUNT(m.musical_id) > 2;
                        ``` SELECT musical.nominee FROM musical GROUP BY musical.nominee HAVING COUNT(musical.nominee) > 2;
                        ``` SELECT m.name FROM musical AS m LEFT JOIN actor_musical_id_crossref AS ac ON m.musical_id = ac.musical_id WHERE ac.actor_id IS NULL;
                        ``` SELECT m.name FROM musical m LEFT JOIN actor a ON m.musical_id = a.musical_id WHERE a.actor_id IS NULL;
                        ``` SELECT m.name FROM musical m WHERE m.award = 'Tony Award' AND m.nominee = 'Drama Desk Award';
                        ``` SELECT m.name FROM musical m WHERE m.award = 'Tony' AND m.category = 'Award' AND m.name IN (SELECT n.nominee FROM musical n WHERE n.award = 'Drama Desk');
                        ``` SELECT Musical_ID, Name, Year, Award, Category, Nominee, Result FROM musical WHERE (Award = 'Bob Fosse' OR Actor = 'Cleavant Darricks') AND Result IS NOT NULL;
                        ``` SELECT musical.nominee FROM musical WHERE (musical.award = 'Bob Fosse' OR musical.award = 'Cleavant Derricks') AND musical.category = 'Musical';
                        ``` SELECT user_profiles.email FROM user_profiles WHERE user_profiles.name ilike '%Mary%';
                        ``` SELECT user_profiles.partitionid FROM user_profiles WHERE user_profiles.name ilike '%Iron%Man%' ;
                        ``` SELECT COUNT(*) AS total_users FROM user_profiles;
                        ``` SELECT u.username, COUNT(f.f1) AS total_followers FROM users u JOIN follows f ON u.id = f.f2 GROUP BY u.username;
                        ``` SELECT u.username, COUNT(f.f1) AS total_followers FROM users AS u JOIN follows AS f ON u.id = f.f2 GROUP BY u.username;
                        ``` SELECT COUNT(*) AS total_tweets FROM tweets;
                        ``` SELECT COUNT(DISTINCT uid) AS num_users FROM tweets;
                        ``` SELECT user_profiles.name, user_profiles.email FROM user_profiles WHERE user_profiles.name ilike '%Swift%';
                        ``` SELECT user_profiles.name FROM user_profiles WHERE user_profiles.email ilike '%superstar%' OR user_profiles.email ilike '%edu%';
                        ``` SELECT tweets.text FROM tweets WHERE tweets.text ilike '%Internet%';
                        ``` SELECT user_profiles.name, user_profiles.email FROM user_profiles WHERE user_profiles.followers > 1000;
                        ``` SELECT user_profiles.name FROM user_profiles ORDER BY user_profiles.followers DESC NULLS LAST LIMIT 1;
                        ``` SELECT u.name, u.email, MIN(p.followers) AS min_followers FROM user_profiles u JOIN user_profiles p ON u.partitionid = p.partitionid GROUP BY u.name, u.email;
                        ``` SELECT user_profiles.name, user_profiles.followers FROM user_profiles ORDER BY user_profiles.followers DESC;
                        ``` WITH user_followers AS (SELECT u.uid, u.name, COUNT(f.followee) AS num_followers FROM user_profiles u JOIN follows f ON u.uid = f.follower OR u.uid = f.followee GROUP BY u.uid, u.name), top_5_users AS (SELECT name FROM user_followers ORDER BY num_followers DESC NULLS LAST LIMIT 5) SELECT tf.name, rank() OVER (ORDER BY num_followers DESC NULLS LAST) AS rank, dense_rank() OVER (ORDER BY num_followers DESC NULLS LAST) AS dense_rank FROM top_5_users tf JOIN user_followers uf ON tf.name = uf.name;
                        ``` SELECT tweets.text FROM tweets ORDER BY tweets.createdate DESC;
                        ``` AVG(user_profiles.followers) AS average_followers FROM user_profiles WHERE user_profiles.uid NOT IN (SELECT user_tweets.uid FROM user_tweets);
                        ``` SELECT AVG(user_profiles.followers) AS average_followers FROM user_profiles WHERE user_profiles.uid IN (SELECT user_tweets.uid FROM user_tweets);
                        ``` SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles;
                        ``` SELECT catalog_entry_name FROM Catalog_Contents;
                        ``` SELECT catalog_entry_name FROM Catalog_Contents;
                        ``` SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions GROUP BY Attribute_Theories.attribute_data_type HAVING COUNT(Attribute_Theifiers.attribute_id) > 3;
                        ``` SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions GROUP BY Attribute_Definitions.attribute_data_type HAVING COUNT(Attribute_Definitions.attribute_id) > 3;
                        ``` SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions WHERE Attribute_Definitions.attribute_name ilike '%green%' ;
                        ``` SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions WHERE Attribute_Definitions.attribute_name ilike '%green%';
                        ``` SELECT Catalog_Structure.catalog_level_name, Catalog_Structure.catalog_level_number FROM Catalog_Structure WHERE Catalog_Structure.catalog_level_number BETWEEN 5 AND 10;
                        ``` SELECT Catalog_Structure.catalog_level_name, CAST(Catalog_Structure.catalog_level_number AS FLOAT) AS level FROM Catalog_Structure WHERE (CAST(Catalog_Structure.catalog_level_number AS FLOAT)) BETWEEN 5 AND 10;
                        ``` SELECT Catalogs.catalog_publisher FROM Catalogs WHERE Catalogs.catalog_publisher ilike '%Murray%';
                        ``` SELECT Catalogs.catalog_publisher FROM Catalogs WHERE Catalogs.catalog_publisher ilike '%Murray%';
                        ``` SELECT Catalogs.catalog_publisher, COUNT(Catalogs.catalog_id) AS number_of_catalogs FROM Catalogs GROUP BY Catalogs.catalog_publisher ORDER BY number_of_catalogs DESC NULLS LAST LIMIT 1;
                        ``` SELECT Catalogs.catalog_publisher, COUNT(Catalogs.catalog_id) AS number_of_catalogs FROM Catalogs GROUP BY Catalogs.catalog_publisher ORDER BY number_of_catalogs DESC NULLS LAST LIMIT 1;
                        ``` SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.price_in_dollars = (SELECT MAX(Catalog_Contents.price_in_dollars) FROM Catalog_Contents);
                        ``` SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.price_in_dollars = (SELECT MAX(Catalog_Contents.price_in_dollars) FROM Catalog_Contents);
                        ``` SELECT AVG(price_in_euros), MIN(price_in_euros) FROM Catalog_Contents;
                        ``` SELECT AVG(price_in_euros), MIN(price_in_euros) FROM Catalog_Contents;
                        ``` SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.height = (SELECT MAX(Catalog_Contents.height) FROM Catalog_Contents);
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.height DESC NULLS LAST LIMIT 1;
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.capacity ASC NULLS LAST LIMIT 1;
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY CAST(catalog_contents.capacity AS FLOAT) ASC NULLS LAST LIMIT 1;
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number like '2%';
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number like '2%' ORDER BY catalog_contents.catalog_entry_name NULLS LAST;
                        ``` SELECT catalog_entry_name FROM Catalog_Contents WHERE (length(catalog_entry_name) < 3 OR height(catalog_entry_name) > 5);
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE (length(catalog_contents.length) < 3 OR length(catalog_contents.length) > 5);
                        ``` SELECT catalog_contents.catalog_entry_name, catalog_contents.capacity FROM catalog_contents WHERE catalog_contents.price_in_dollars > 700;
                        ``` SELECT catalog_contents.catalog_entry_name, catalog_contents.capacity FROM catalog_contents WHERE catalog_contents.price_in_dollars > 700;
                        ``` SELECT date_of_publication FROM Catalogs WHERE date_of_latest_revision > (SELECT MAX(date_of_last_revision) FROM Catalogs GROUP BY date_of_publication HAVING COUNT(date_of_last_revision) > 1);
                        ``` SELECT date_of_publication FROM Catalogs WHERE date_of_latest_revision > date_of_publication GROUP BY date_of_publication HAVING COUNT(catalog_id) > 1;
                        ``` SELECT COUNT(product_stock_number) AS total_products FROM Catalog_Contents;
                        ``` SELECT COUNT(catalog_entry_id) AS total_contents FROM Catalog_Contents;
                        ``` SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.next_entry_id > 8;
                        ``` SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.next_entry_id > 8;
                        ``` SELECT COUNT(*) AS total_aircraft FROM aircraft;
                        ``` SELECT COUNT(*) AS total_aircraft FROM aircraft;
                        ``` SELECT a.name, to_char(a.distance::FLOAT, '99999D99') AS distance FROM aircraft a;
                        ``` SELECT a.name, to_char(a.distance::FLOAT, '99999D9') AS distance FROM aircraft a;
                        ``` SELECT a.aid FROM aircraft AS a WHERE a.distance > 1000;
                        ``` SELECT a.aid FROM aircraft AS a WHERE a.distance > 1000;
                        ``` SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;
                        ``` SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;
                        ``` SELECT a.name, to_char(a.distance, '99999D9') AS distance FROM aircraft a WHERE a.aid = 12;
                        ``` SELECT a.name, to_char(a.distance::FLOAT, '99999D9') AS distance FROM aircraft a WHERE a.aid = 12;
                        ``` SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;
                        ``` SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;
                        ``` SELECT a.aid, a.name FROM aircraft AS a WHERE a.distance = (SELECT MAX(b.distance) FROM aircraft AS b);
                        ``` SELECT a.aid, a.name FROM aircraft AS a WHERE a.distance = (SELECT MAX(b.distance) FROM aircraft AS b);
                        ``` SELECT a.name FROM aircraft AS a ORDER BY a.distance ASC NULLS LAST LIMIT 3;
                        ``` SELECT a.name FROM aircraft AS a ORDER BY length(a.name) ASC NULLS LAST LIMIT 3;
                        ``` SELECT a.name FROM aircraft AS a WHERE a.distance > (SELECT AVG(distance) FROM aircraft);
                        ``` SELECT a.name FROM aircraft AS a WHERE a.distance > (SELECT AVG(distance) FROM aircraft);
                        ``` SELECT COUNT(eid) AS total_employees FROM employee;
                        ``` SELECT COUNT(eid) AS total_employees FROM employee;
                        ``` SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary NULLS LAST;
                        ``` SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary NULLS LAST;
                        ``` SELECT employee.eid FROM employee WHERE employee.salary >= 100000;
                        ``` SELECT eid FROM employee WHERE salary >= 100000;
                        ``` SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;
                        ``` SELECT COUNT(*) AS total_employees FROM employee WHERE salary BETWEEN 100000 AND 200000;
                        ``` SELECT e.name, e.salary FROM employee e WHERE e.eid = 242518965;
                        ``` SELECT e.name, e.salary FROM employee e WHERE e.eid = 242518965;
                        ``` SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee;
                        ``` SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee;
                        ``` SELECT eid, name FROM employee ORDER BY salary DESC LIMIT 1;
                        ``` SELECT eid, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
                        ``` SELECT employee.name FROM employee ORDER BY employee.salary ASC NULLS LAST LIMIT 3;
                        ``` SELECT employee.name FROM employee ORDER BY employee.salary ASC NULLS LAST LIMIT 3;
                        ``` SELECT employee.name FROM employee WHERE employee.salary > (SELECT AVG(employee.salary) FROM employee);
                        ``` SELECT employee.name FROM employee WHERE employee.salary > (SELECT AVG(employee.salary) FROM employee);
                        ``` SELECT eid, salary FROM employee WHERE name ilike '%Mark%Young%'
                        ``` SELECT eid, salary FROM employee WHERE name ilike '%Mark%Young%'
                        ``` SELECT COUNT(flight.flno) AS total_flights FROM flight;
                        ``` SELECT COUNT(flight.flno) AS total_flights FROM flight;
                        ``` SELECT flight.flno, flight.origin, flight.destination FROM flight ORDER BY flight.origin ASC;
                        ``` SELECT flight.flno, flight.origin, flight.destination FROM flight ORDER BY flight.origin ASC;
                        ``` SELECT flno FROM flight WHERE origin = 'Los Angeles';
                        ``` SELECT COUNT(flight.flno) AS total_flights FROM flight WHERE origin = 'Los Angeles';
                        ``` SELECT flight.origin FROM flight WHERE flight.destination = 'Honolulu';
                        ``` SELECT flight.origin FROM flight WHERE flight.destination = 'Honolulu';
                        ``` SELECT flight.departure_date, flight.arrival_date FROM flight WHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu';
                        ``` SELECT flight.departure_date, flight.arrival_date FROM flight WHERE flight.origin = 'LA' AND flight.destination = 'Honolulu';
                        ``` SELECT flno FROM flight WHERE distance > 2000;
                        ``` SELECT COUNT(*) AS number_of_flights FROM flight WHERE distance > 2000;
                        ``` SELECT AVG(flight.price) AS average_price FROM flight WHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu';
                        ``` SELECT AVG(flight.price) AS average_price FROM flight WHERE flight.origin = 'LA' AND flight.destination = 'Honolulu';
                        ``` SELECT flight.origin, flight.destination FROM flight WHERE flight.price > 300;
                        ``` SELECT flight.origin, flight.destination FROM flight WHERE flight.price > 300;
                        ``` SELECT flno, price, length() OVER (PARTITION BY aid ORDER BY price DESC) AS rank FROM flight WHERE price = (SELECT MAX(price) FROM flight);
                        ``` SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight);
                        ``` SELECT flno FROM flight ORDER BY distance ASC NULLS LAST LIMIT 3;
                        ``` SELECT flight.flno FROM flight ORDER BY flight.distance ASC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(flight.distance), AVG(flight.price) FROM flight flath WHERE flath.origin = 'Los Angeles';
                        ``` SELECT AVG(flight.distance), AVG(flight.price) FROM flight WHERE flight.origin = 'LA';
                        ``` SELECT flight.origin, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.origin;
                        ``` SELECT flight.origin, COUNT(*) AS number_of_flights FROM flight GROUP BY flight.origin;
                        ``` SELECT flight.destination, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.destination;
                        ``` SELECT flight.destination, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.destination ORDER BY total_flights DESC NULLS LAST;
                        ``` SELECT flight.origin, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.origin ORDER BY total_flights DESC NULLS LAST LIMIT 1;
                        ``` SELECT flight.origin, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.origin ORDER BY total_flights DESC NULLS LAST LIMIT 1;
                        ``` SELECT flight.destination, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.destination ORDER BY total_flights ASC NULLS LAST LIMIT 1;
                        ``` SELECT flight.origin, COUNT(flight.flno) AS total_flights FROM flight GROUP BY flight.origin ORDER BY total_flights ASC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_employees_with_certificate FROM certificate;
                        ``` SELECT COUNT(DISTINCT c.eid) AS number_of_employees_with_certificates FROM certificate c;
                        ``` SELECT employee.eid FROM employee WHERE employee.eid NOT IN (SELECT certification.employee_id FROM certification);
                        ``` SELECT employee.eid FROM employee WHERE employee.eid NOT IN (SELECT certificate_employee.eid FROM certificate_employee);
                        ``` SELECT employee.name FROM employee WHERE employee.eid NOT IN (SELECT certification.employee_id FROM certification WHERE certification.certificate_type = 'Boeing 737-800');
                        ``` SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM certification c WHERE c.eid = e.eid AND c.certification_type_code = 'B737-800');
                        ``` SELECT COUNT(*) AS total_allergies FROM Allergy_Type;
                        ``` SELECT COUNT(*) AS total_allergies FROM Allergy_Type;
                        ``` SELECT COUNT(DISTINCT AllergyType) AS number_of_allergy_types FROM Allergy_Type;
                        ``` SELECT COUNT(DISTINCT allergy) AS number_of_allergies FROM Allergy_Type;
                        ``` SELECT Allergy_Type.Allergy FROM Allergy_Type;
                        ``` SELECT Allergy_Type.AllergyType FROM Allergy_Type;
                        ``` SELECT a.Allergy, t.allergy_type FROM Allergy_Type AS t CROSS JOIN Allergy AS a;
                        ``` SELECT a.name AS allergen_name, t.allergy_type AS allergen_type FROM Allergy_Type t CROSS JOIN Allergy a;
                        ``` SELECT Allergy_Type.Alllergy FROM Allergy_Type WHEREAllergy_Type.AllergyType = 'food';
                        ``` SELECT DISTINCT allergy_type.allergy FROM allergy_type;
                        ``` SELECT Allergy_Type.Allergy FROM Allergy_Type WHEREAllergy_Type.AllergyType = 'Cat';
                        ``` SELECT Allergy_Type.Allergy FROM Allergy_Type WHEREAllergyType ILIKE '%cat%'
                        ``` SELECT COUNT(*) AS total_allergies FROM Allergy_Type WHERE AllergyType = 'animal';
                        ``` SELECT COUNT(*) AS allergy_count FROM Allergy_Type WHERE AllergyType ilike '%animal%';
                        ``` SELECT allergy_type.allergy_type, COUNT(allergy) AS total_allergies FROM allergy_type GROUP BY allergy_type.allergy_type;
                        ``` SELECT Allergy_Type.AllergyType, COUNT(Allergy) AS total_allergies FROM Allergy_Type GROUP BYAllergyType;
                        ``` SELECT allergy_type.allergy_type, COUNT(*) AS total_allergies FROM allergy_type GROUP BY allergy_type.allergy_type ORDER BY total_allergies DESC LIMIT 1;
                        ``` SELECT Allergy_Type.AllergyType FROM Allergy_Type ORDER BYAllergy_type_count DESC LIMIT 1;
                        ``` SELECT allergy_type.allergy_type FROM allergy_type GROUP BY allergy_type.allergy_type ORDER BY COUNT(allergy_type) ASC NULLS LAST LIMIT 1;
                        ``` SELECT Allergy_Type.Allergy FROM Allergy_Type GROUP BYAllergy_Type.allery ORDER BY COUNT(Allergy_type.allery) ASC LIMIT 1;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT s.fname, s.lname FROM student AS s;
                        ``` SELECT Student.LName, Student.Fname FROM Student;
                        ``` SELECT COUNT(DISTINCT Student.Advisor) AS number_of_advisors FROM Student;
                        ``` SELECT COUNT(DISTINCT Advisor) AS number_of_advisors FROM Student;
                        ``` SELECT Student.Major FROM Student;
                        ``` SELECT Student.Major FROM Student GROUP BY Student.Major;
                        ``` SELECT DISTINCT Student.city_code FROM Student;
                        ``` SELECT DISTINCT Student.city_code FROM Student WHERE Student.Major = 1;
                        ``` SELECT s.fname, s.lname, CAST(s.age AS FLOAT) FROM student s WHERE s.sex = 'F';
                        ``` SELECT Student.LName, Student.Fname, CAST(Student.Age AS FLOAT) AS age FROM Student WHERE Student.Sex = 'F';
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male';
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'M';
                        ``` SELECT COUNT(*) FROM Student WHERE Age = 18;
                        ``` SELECT COUNT(*) FROM Student WHERE Age = 18;
                        ``` SELECT Student.StuID FROM Student WHERE Student.Age < 20;
                        ``` SELECT Student.StuID FROM Student WHERE Student.Age > 20;
                        ``` SELECT Student.city_code FROM Student WHERE Student.LName ilike '%Kim%' ;
                        ``` SELECT Student.city_code FROM Student WHERE Student.fname ilike '%Kim%';
                        ``` SELECT s.lname, s.fname FROM student AS s JOIN student AS a ON s.advisor = a.studid WHERE s.studid = 1004;
                        ``` SELECT s.lname, s.fname FROM student AS s WHERE s.advisor = 1004;
                        ``` SELECT COUNT(*) AS total_students FROM Student WHERE city_code IN ('HKG', 'CHI');
                        ``` SELECT COUNT(*) AS total_students FROM student WHERE city_code IN ('HKG', 'CHI');
                        ``` SELECT MIN(Age) AS min_age, AVG(Age) AS avg_age, MAX(Age) AS max_age FROM Student;
                        ``` SELECT MIN(Age) AS min_age, AVG(Age) AS avg_age, MAX(Age) AS max_age FROM Student;
                        ``` SELECT Student.LName FROM Student ORDER BY Student.Age ASC LIMIT 1;
                        ``` SELECT Student.LName FROM Student ORDER BY Student.Age ASC LIMIT 1;
                        ``` SELECT MIN(Student.StuID) AS oldest_student_id FROM Student;
                        ``` SELECT MIN(Student.StuID) AS oldest_student_id FROM Student;
                        ``` SELECT Student.Major AS major, COUNT(*) AS num_students FROM Student GROUP BY Student.Major;
                        ``` SELECT Student.Major, COUNT(*) AS total_students FROM Student GROUP BY Student.Major;
                        ``` SELECT m.major_name, COUNT(s.stuid) AS student_count FROM student s JOIN major m ON s.major = m.major_id GROUP BY m.major_name ORDER BY student_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Student.Major FROM Student GROUP BY Student.Major ORDER BY COUNT(Student.Major) DESC LIMIT 1;
                        ``` SELECT Student.Age, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.Age;
                        ``` SELECT Student.Age AS Age_Group, COUNT(*) AS Number_Of_Students FROM Student GROUP BY Student.Age ORDER BY Student.Age NULLS LAST;
                        ``` SELECT Sex, AVG(Age) AS average_age FROM Student GROUP BY Sex;
                        ``` SELECT Sex, AVG(Age) AS average_age FROM Student GROUP BY Sex;
                        ``` SELECT s.city_code, COUNT(*) AS num_students FROM Student s GROUP BY s.city_code;
                        ``` SELECT s.city_code, COUNT(*) AS total_students FROM student s GROUP BY s.city_code;
                        ``` SELECT a.name AS advisor_name, COUNT(s.stuID) AS num_students FROM advisor a JOIN student s ON a.advisor_id = s.advisor GROUP BY a.name;
                        ``` SELECT s.advisor, COUNT(*) AS num_students FROM student s GROUP BY s.advisor;
                        ``` SELECT s.advisor AS advisor_with_most_students, COUNT(*) AS total_students FROM student s GROUP BY s.advisor ORDER BY total_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.advisor AS advisor_with_most_students, COUNT(*) AS number_of_students FROM student s GROUP BY s.advisor ORDER BY number_of_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) FROM Has_Allergy WHERE Allergy ilike '%cat%';
                        ``` SELECT COUNT(*) FROM Has_Allergy WHERE Allergy ilike '%cat%'
                        ``` SELECT DISTINCT Has_Allergy.StuID FROM Has_Allergy GROUP BY Has_Allergy.StuID HAVING COUNT(Has_allergy.Allergy) >= 2;
                        ``` SELECT DISTINCT Has_Allergy.StuID FROM Has_Allergy GROUP BY Has_Allergy.StuID HAVING COUNT(Has_allergy.Allergy) > 1;
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Allergy.Student_id FROM Allergy);
                        ``` SELECT s.lname, s.fname FROM student AS s WHERE NOT EXISTS (SELECT 1 FROM allergy_affected_students AS aas WHERE aos.stu_id = s.stu_id);
                        ``` SELECT allergy, COUNT(*) AS num_students_affected FROM Has_Allergy GROUP BY allergy ORDER BY num_students_affected DESC NULLS LAST LIMIT 1;
                        ``` SELECT Has_Allergy.Allergy, COUNT(*)::FLOAT / (SELECT COUNT(*) FROM Has_Allergy) AS fraction FROM Has_Allergy GROUP BY Has_Allergy.Allergy ORDER BY fraction DESC NULLS LAST LIMIT 1;
                        ``` SELECT allergy, COUNT(student_id) AS num_students FROM has_allergy GROUP BY allergy;
                        ``` SELECT Has_Allergy.Allergy, COUNT(*) AS number_of_students FROM Has_Allergy GROUP BY Has_Allergy.Allergy;
                        ``` SELECT s.lname, s.age FROM Student s WHERE 'Milk' ILIKE '%allergy%' AND 'Cat' ILIKE '%allergy%';
                        ``` SELECT s.lname, CAST(s.age AS FLOAT) FROM Student s WHERE s.major IN (SELECT major_id FROM Allergies WHERE allergen = 'Milk' AND allergen = 'Cat') GROUP BY s.lname, s.age;
                        ``` SELECT s.fname, s.sex FROM Student s WHERE s.allergy = 'milk' AND s.allergy != 'cat';
                        ``` SELECT s.fname, s.sex FROM student AS s WHERE s.allergy = 'milk' AND s.can_have_cats = TRUE;
                        ``` SELECT AVG(Student.Age) FROM Student WHERE (SELECT COUNT(*) FROM Allergies WHERE Student.StuID = Allergies.StuID AND Type IN ('food', 'animal')) > 0;
                        ``` SELECT AVG(Student.Age) AS average_age FROM Student WHERE (SELECT COUNT(*) FROM Allergies WHERE Allergies.StuID = Student.StuID AND Allergies.allergy_type_code IN ('food', 'animal')) > 0;
                        ``` SELECT Student.LName, Student.Fname FROM Student WHERE Student.StuID NOT IN (SELECT Allergy_Student.StuID FROM Allergy_Student);
                        ``` SELECT s.lname || ', ' || s.fname AS full_name FROM Student s WHERE NOT EXISTS (SELECT 1 FROM Allergy a WHERE a.student_id = s.stuid);
                        ``` SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND Major IN (SELECT Major FROM Food WHERE Type ilike '%allery%');
                        ``` SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND Allergies IS NOT NULL;
                        ``` SELECT COUNT(*) FROM Student WHERE Age > 18 AND (Allergy_to_food IS NULL OR allergy_to_food = 'No') AND (allergy_to_animal IS NULL OR allergy_to_animal = 'No');
                        ``` SELECT COUNT(*) FROM Student WHERE Age > 18 AND (Allergy_to_food IS NULL OR allergy_to_food = 'No') AND (allergy_to_animal IS NULL OR allergy_to_animal = 'No');
                        ``` SELECT S.Fname, S.Major FROM Student S WHERE S.Advisor IS NULL;
                        ``` SELECT s.fname, m.major FROM student AS s JOIN major AS m ON s.major = m.major WHERE age > 21;
                        ``` SELECT invoices.billing_country, COUNT(*) AS invoice_count FROM invoices GROUP BY invoices.billing_country ORDER BY invoice_count DESC NULLS LAST LIMIT 5;
                        ``` SELECT COUNT(invoices.id) AS total_invoices, invoices.billing_country, COUNT(DISTINCT invoices.customer_id) AS unique_customers FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoices DESC NULLS LAST LIMIT 5;
                        ``` SELECT invoices.billing_country, SUM(invoices.total) AS total_invoice_amount FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoice_amount DESC NULLS LAST LIMIT 8;
                        ``` SELECT invoices.billing_country, SUM(invoices.total) AS total_invoice_amount FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoice_amount DESC NULLS LAST LIMIT 8;
                        ``` SELECT billing_country, AVG(total) AS average_invoiceice_size FROM invoices GROUP BY billing_country ORDER BY average_invoiceice_size DESC NULLS LAST LIMIT 10;
                        ``` SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC NULLS LAST LIMIT 10;
                        ``` SELECT albums.title FROM albums;
                        ``` SELECT albums.title FROM albums;
                        ``` SELECT albums.title FROM albums ORDER BY albums.title ASC;
                        ``` SELECT albums.title FROM albums ORDER BY albums.title ASC;
                        ``` SELECT albums.title FROM albums WHERE albums.title ilike 'A%' ORDER BY albums.title NULLS LAST;
                        ``` SELECT albums.title FROM albums WHERE albums.title ilike 'A%' ORDER BY albums.title NULLS LAST;
                        ``` SELECT SUM(invoices.total) AS total_amount FROM invoices WHERE invoices.billing_state = 'IL';
                        ``` SELECT SUM(invoices.total) AS total_amount FROM invoices WHERE invoices.billing_state = 'Illinois';
                        ``` SELECT COUNT(*) AS number_of_invoices FROM invoices WHERE billing_state = 'IL';
                        ``` SELECT COUNT(*) FROM invoices WHERE billing_state = 'IL' AND billing_city ilike '%Chicago%';
                        ``` SELECT billing_state, COUNT(*) AS total_invoices FROM invoices WHERE billing_country = 'US' GROUP BY billing_state;
                        ``` SELECT billing_state, COUNT(*) AS number_of_invoices FROM invoices GROUP BY billing_state;
                        ``` SELECT billing_state, COUNT(id) AS number_of_invoices FROM invoices WHERE billing_country = 'US' GROUP BY billing_state ORDER BY number_of_invoices DESC NULLS LAST LIMIT 1;
                        ``` SELECT billing_state, COUNT(id) AS number_of_invoices FROM invoices GROUP BY billing_state ORDER BY number_of_invoices DESC NULLS LAST;
                        ``` SELECT COUNT(id) AS number_of_invoices, SUM(total) AS total_amount FROM invoices WHERE billing_state = 'California';
                        ``` SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_amount FROM invoices WHERE billing_state = 'CA';
                        ``` SELECT customers.company FROM customers WHERE customers.first_name ilike '%Eduardo%' AND customers.last_name ilike '%Martins%';
                        ``` SELECT customers.company FROM customers WHERE customers.first_name ilike '%Eduardo%' AND customers.last_name ilike '%Martins%';
                        ``` SELECT customers.email, customers.phone FROM customers WHERE customers.first_name ilike '%Astrid%' AND customers.last_name ilike '%Gruber%';
                        ``` SELECT customers.email, customers.phone FROM customers WHERE customers.first_name ilike '%Astrid%' AND customers.last_name ilike '%Gruber%';
                        ``` SELECT COUNT(*) FROM customers WHERE city ilike '%Prague%';
                        ``` SELECT COUNT(*) AS customer_count FROM customers WHERE city ilike '%Prague%';
                        ``` SELECT COUNT(*) FROM customers WHERE state = 'CA';
                        ``` SELECT COUNT(*) FROM customers WHERE state = 'California';
                        ``` SELECT customers.country FROM customers WHERE customers.last_name ilike '%Almeida%' AND customers.first_name ilike '%roberto%';
                        ``` SELECT customers.country FROM customers WHERE customers.last_name ilike '%Almeida%' AND customers.first_name ilike '%roberto%';
                        ``` SELECT e.title, e.phone, to_char(e.hire_date,'DD-MMM-YYYY') AS hire_date FROM employees e WHERE e.first_name = 'Nancy' AND e.last_name = 'Edwards';
                        ``` SELECT e.title, e.phone, to_date(e.hire_date::text, 'YYYY-MM-DD') AS hire_date FROM employees e WHERE first_name = 'Nancy' AND last_name = 'Edwards';
                        ``` SELECT employees.address FROM employees WHERE employees.first_name ilike '%Nancy%' AND employees.last_name ilike '%Edwards%';
                        ``` SELECT employees.address FROM employees WHERE employees.first_name ilike '%Nancy%' AND employees.last_name ilike '%Edwards%';
                        ``` SELECT COUNT(*) AS total_employees FROM employees WHERE country = 'Canada';
                        ``` SELECT COUNT(*) AS total_employees FROM employees WHERE country = 'Canada';
                        ``` SELECT employees.phone FROM employees WHERE employees.first_name ilike '%Nancy%' AND employees.last_name ilike '%Edwards%';
                        ``` SELECT employees.phone FROM employees WHERE employees.first_name ilike '%Nancy%' AND employees.last_name ilike '%Edwards%';
                        ``` SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.birth_date ASC LIMIT 1;
                        ``` SELECT employees.first_name, employees.last_name FROM employees WHERE employees.birth_date = (SELECT MIN(employees.birth_date) FROM employees);
                        ``` SELECT employees.first_name, employees.last_name FROM employees ORDER BY (CURRENT_DATE - employees.hire_date) DESC NULLS LAST LIMIT 10;
                        ``` SELECT e.first_name, e.last_name FROM employees e ORDER BY (CURRENT_DATE - e.hire_date) DESC NULLS LAST LIMIT 10;
                        ``` SELECT e.city, COUNT(*) AS total_employees FROM employees e WHERE title ilike '%IT%staff%' GROUP BY e.city;
                        ``` SELECT e.city, CAST(COUNT(CASE WHEN t.title = 'IT' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_it_staff FROM employees e JOIN title t ON e.title = t.title GROUP BY e.city;
                        ``` SELECT mt.name FROM media_types mt;
                        ``` SELECT mt.name FROM media_types mt;
                        ``` SELECT DISTINCT genres.name FROM genres;
                        ``` SELECT g.name FROM genres g;
                        ``` SELECT playlists.name FROM playlists;
                        ``` SELECT playlists.name FROM playlists;
                        ``` SELECT tracks.composer FROM tracks WHERE tracks.name ILIKE '%Fast%As%a%Shark%'
                        ``` SELECT tracks.composer FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ``` SELECT tracks.duration FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ``` SELECT tracks.milliseconds FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ``` SELECT tracks.name, tracks.milliseconds / NULLIF(tracks.unit_price, 0) AS cost_per_minute FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ``` SELECT tracks.unit_price FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ``` SELECT COUNT(*) AS total_editors FROM editor;
                        ``` SELECT editor.name FROM editor ORDER BY editor.age ASC;
                        ``` SELECT editor.name, editor.age FROM editor;
                        ``` SELECT editor.name FROM editor WHERE editor.age > 25;
                        ``` SELECT editor.name FROM editor WHERE editor.age IN (24, 25);
                        ``` SELECT editor.name FROM editor ORDER BY editor.age ASC LIMIT 1;
                        ``` SELECT editor.age, COUNT(*) AS total_editors FROM editor GROUP BY editor.age ORDER BY editor.age NULLS LAST;
                        ``` SELECT editor.age, COUNT(*) AS frequency FROM editor GROUP BY editor.age ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT journal.theme FROM journal GROUP BY journal.theme;
                        ``` SELECT e.name FROM editor e LEFT JOIN journal_committee jc ON e.editor_id = jc.editor_id WHERE jc.editor_id IS NULL;
                        ``` SELECT j.date, j.theme, j.sales FROM journal j WHERE j.journal_id NOT IN (SELECT c.committee_member_id FROM committee c JOIN editor e ON c.editor_id = e.editor_id) AND j.journal_id NOT IN (SELECT d.journal_id FROM disliked_editors d);
                        ``` SELECT COUNT(*) AS account_count FROM Accounts;
                        ``` SELECT COUNT(*) AS total_accounts FROM Accounts;
                        ``` SELECT a.account_id, c.customer_id, c.customer_name FROM accounts AS a JOIN customers AS c ON a.customer_id = c.customer_id;
                        ``` SELECT a.account_id, a.customer_id, a.account_name FROM Accounts AS a;
                        ``` SELECT Accounts.other_account_details FROM Accounts WHERE "Account Name" ILIKE '%338%'
                        ``` SELECT Accounts.other_account_details FROM Accounts WHERE "Account Name" ILIKE '%338%' ;
                        ``` SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts a GROUP BY a.customer_id;
                        ``` SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts a GROUP BY a.customer_id;
                        ``` SELECT a.customer_id, COUNT(*) AS account_count FROM Accounts a GROUP BY a.customer_id ORDER BY account_count DESC NULLS LAST LIMIT 1;
                        ``` WITH account_customer AS (SELECT customer_id, COUNT(account_id) AS num_accounts FROM Accounts GROUP BY customer_id), max_account_customer AS (SELECT MAX(num_accounts) AS max_num_accounts, MIN(customer_id) AS min_customer_id FROM account_customer) SELECT min_customer_id, max_num_accounts FROM max_account_customer;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customers LEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.customer_id IS NULL;
                        ``` SELECT Customers.customer_first_name, Customers.customer_last_name FROM Customers WHERE customer_id IS NULL;
                        ``` SELECT c.customer_first_name, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT a.customer_id FROM Accounts a);
                        ``` SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;
                        ``` SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Accounts;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT c.customer_id, c.customer_first_name, c.customer_last_name, c.customer_phone FROM Customers AS c;
                        ``` SELECT customers.customer_id AS "Customer ID", customers.customer_first_name || ' ' || customers.customer_last_name AS "Full Name", customers.customer_phone AS "Phone" FROM customers;
                        ``` SELECT customers.customer_phone, customers.customer_email FROM customers WHERE customers.customer_first_name ilike '%Aniyah%' AND customers.customer_last_name ilike '%Feest%';
                        ``` SELECT customers.customer_phone, customers.customer_email FROM customers WHERE customers.customer_first_name ilike '%Aniyah%' AND customers.customer_last_name ilike '%Feest%';
                        ``` SELECT COUNT(card_id) AS total_cards FROM Customers_Cards;
                        ``` SELECT COUNT(*) AS total_cards FROM Customers_Cards;
                        ``` SELECT customers_cards.card_id, customers_cards.customer_id, customers_cards.card_type_code, customers_cards.card_number FROM customers_cards;
                        ``` SELECT customers_cards.card_id, customers_cards.customer_id, customers_cards.card_type_code, customers_cards.card_number FROM customers_cards;
                        ``` SELECT Customers_Cards.date_valid_from, Customers_Cards.date_valid_to FROM Customers_Cards WHERE Customers_Cards.card_number = '4560596484842' ;
                        ``` SELECT Customers_Cards.date_valid_from, Customers_Cards.date_valid_to FROM Customers_Cards WHERE Customers_Cards.card_id = 4560596484842;
                        ``` SELECT COUNT(*) AS total_debit_cards FROM Customers_Cards WHERE card_type_code ilike '%debit%'
                        ``` SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'Debit'
                        ``` SELECT customers.customer_id, COUNT(customers_cards.card_id) AS card_count FROM customers LEFT JOIN customers_cards ON customers.customer_id = customers_cards.customer_id GROUP BY customers.customer_id;
                        ``` SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM customers_cards GROUP BY customers_cards.customer_id;
                        ``` SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM customers_cards GROUP BY customers_cards.customer_id ORDER BY card_count DESC NULLS LAST LIMIT 1;
                        ``` WITH card_counts AS (SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id), max_card_count AS (SELECT MAX(card_count) AS max_card_count FROM card_counts) SELECT cc.customer_id, cc.card_count FROM card_counts cc JOIN max_card_count mcc ON cc.card_count = mcc.max_card_count;
                        ``` SELECT card_type_code, COUNT(*) AS total_cards FROM Customers_Cards GROUP BY card_type_code;
                        ``` SELECT cc.card_type_code, COUNT(*) AS number_of_cards FROM Customers_Cards cc GROUP BY cc.card_type_code;
                        ``` SELECT cc.card_type_code, COUNT(*) AS total_cards FROM Customers_Cards cc GROUP BY cc.card_type_code ORDER BY total_cards DESC NULLS LAST LIMIT 1;
                        ``` SELECT cc.card_type_code, COUNT(*) AS frequency FROM Customers_Cards cc GROUP BY cc.card_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT cc.card_type_code FROM Customers_Cards cc GROUP BY cc.card_type_code HAVING COUNT(cc.card_id) >= 5;
                        ``` SELECT cc.card_type_code FROM Customers_Cards cc GROUP BY cc.card_type_code HAVING COUNT(cc.card_id) >= 5;
                        ``` SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS customer_count FROM Customers_Cards cc GROUP BY cc.card_type_code;
                        ``` SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS customer_count FROM Customers_Cards cc GROUP BY cc.card_type_code;
                        ``` SELECT customers.customer_id, customers.customer_first_name FROM customers WHERE customers.customer_id NOT IN (SELECT customer_id FROM credit_cards);
                        ``` SELECT c.customer_id, c.customer_first_name FROM Customers c WHERE c.customer_id NOT IN (SELECT cc.customer_id FROM Credit_Cards cc);
                        ``` SELECT card_type_code FROM Customers_Cards;
                        ``` SELECT DISTINCT Customers_Cards.card_type_code FROM Customers_Cards;
                        ``` SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards;
                        ``` SELECT COUNT(DISTINCT cc.card_type_code) AS number_of_card_types FROM Customers_Cards cc;
                        ``` SELECT Financial_Transactions.transaction_type FROM Financial_Transactions;
                        ``` SELECT Financial_Transactions.transaction_type FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type;
                        ``` SELECT COUNT(DISTINCT transaction_type) AS number_of_transaction_types FROM Financial_Transactions;
                        ``` SELECT COUNT(DISTINCT transaction_type) AS number_of_transaction_types FROM Financial_Transactions;
                        ``` SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
                        ``` SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
                        ``` SELECT ft.transaction_type, COUNT(*) AS total_transactions FROM financial_transactions ft GROUP BY ft.transaction_type;
                        ``` SELECT Financial_Transactions.transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type;
                        ``` SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type ORDER BY total_transaction_amount DESC NULLS LAST LIMIT 1;
                        ``` SELECT ft.transaction_type, SUM(ft.transaction_amount) AS total_amount FROM financial_transactions ft GROUP BY ft.transaction_type ORDER BY total_amount DESC NULLS LAST LIMIT 1;
                        ``` SELECT financial_transactions.account_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM financial_transactions GROUP BY financial_transactions.account_id;
                        ``` SELECT ft.account_id, COUNT(*) AS transaction_count FROM Financial_Transactions ft GROUP BY ft.account_id;
                        ``` SELECT COUNT(*) AS total_tracks FROM track;
                        ``` SELECT COUNT(*) AS total_tracks FROM track;
                        ``` SELECT t.name, t.location FROM track AS t;
                        ``` SELECT t.name, t.location FROM track AS t;
                        ``` SELECT t.name, to_char(t.seating, 'FM999990D0') AS seating_formatted FROM track t WHERE t.year_opened > 2000 ORDER BY t.seating NULLS LAST;
                        ``` SELECT t.name, t.seating FROM track t WHERE t.year_opened > 2000 ORDER BY t.seating NULLS LAST;
                        ``` SELECT t.name, t.location, to_char(to_timestamp(t.year_opened), 'FM90') AS year_opened FROM track t WHERE t.year_opened = (SELECT MAX(year_opened) FROM track);
                        ``` SELECT t.name, t.location, t.seating FROM track t WHERE t.year_opened = (SELECT MAX(year_opened) FROM track);
                        ``` SELECT MIN(seating) AS minimum_seating, MAX(seating) AS maximum_seating, AVG(cast(seating AS FLOAT)) AS average_seating FROM track;
                        ``` SELECT MIN(seating) AS min_seating, MAX(seating) AS max_seating, AVG(cast(seating AS FLOAT)) AS avg_seating FROM track;
                        ``` SELECT t.name, t.location, t.year_opened FROM track t WHERE t.seating > (SELECT AVG(seating) FROM track);
                        ``` SELECT t.name, t.location, to_char(t.year_opened, 'YYYY') AS year_opened FROM track t WHERE t.seating > (SELECT AVG(seating) FROM track);
                        ``` SELECT DISTINCT track.location FROM track;
                        ``` SELECT DISTINCT track.location FROM track ORDER BY track.location NULLS LAST;
                        ``` SELECT COUNT(Race_ID) FROM race;
                        ``` SELECT COUNT(Race_ID) AS total_races FROM race;
                        ``` SELECT DISTINCT race.class FROM race;
                        ``` SELECT DISTINCT race.class FROM race ORDER BY race.class NULLS LAST;
                        ``` SELECT race.name, race.class, race.date FROM race;
                        ``` SELECT race.name, race.class, CAST(race.date AS DATE) AS date FROM race;
                        ``` SELECT race.class, COUNT(race.race_id) AS race_count FROM race GROUP BY race.class ORDER BY race_count DESC NULLS LAST;
                        ``` SELECT race.class, COUNT(*) AS number_of_races FROM race GROUP BY race.class ORDER BY number_of_races DESC NULLS LAST;
                        ``` SELECT race.class, COUNT(race.race_id) AS race_count FROM race GROUP BY race.class ORDER BY race_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT race.class FROM race GROUP BY race.class ORDER BY COUNT(race.class) DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT race.class FROM race GROUP BY race.class HAVING COUNT(race.race_id) >= 2;
                        ``` SELECT DISTINCT race.class FROM race GROUP BY race.class HAVING COUNT(race.race_id) >= 2;
                        ``` SELECT t.name FROM track t LEFT JOIN gt_race r ON t.track_id = r.track_id WHERE r.track_id IS NULL;
                        ``` SELECT t.name FROM track t LEFT JOIN gt_race r ON t.track_id = r.track_id WHERE r.track_id IS NULL;
                        ``` SELECT t.name FROM track t WHERE t.track_id IS NULL;
                        ``` SELECT t.name FROM track t WHERE t.track_id NOT IN (SELECT r.track_id FROM race r);
                        ``` SELECT t.year_opened FROM track t WHERE t.seating >= 5000 AND EXISTS (SELECT 1 FROM track t2 WHERE t2.location = t.location AND t2.year_opened <= 4000)
                        ``` SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000;
                        ``` SELECT DISTINCT track.location FROM track WHERE (track.seating > 90000 AND track.seating < 70000) GROUP BY track.location;
                        ``` SELECT DISTINCT track.location FROM track WHERE (track.seating > 90000 AND track.seating < 70000) OR (track.seating < 90000 AND track.seating > 70000);
                        ``` SELECT COUNT(*) AS total_black_members FROM member WHERE membership_card = 'Black';
                        ``` SELECT member.address, COUNT(member.member_id) AS total_members FROM member GROUP BY member.address;
                        ``` SELECT member.name FROM member WHERE member.address ilike '%Harford%' OR member.address ilike '%Waterbury%';
                        ``` SELECT member.member_id, member.name FROM member WHERE member.age < 30 OR member.membership_card = 'black';
                        ``` SELECT member.member_id, member.name, member.address, member.time_of_purchase, member.age FROM member ORDER BY member.time_of_purchase ASC;
                        ``` SELECT member.membership_card FROM member GROUP BY member.membership_card HAVING COUNT(member.member_id) > 5;
                        ``` SELECT member.address FROM member WHERE member.age < 30 AND member.age > 40;
                        ``` SELECT member.membership_card FROM member WHERE member.address ilike '%Hartford%' AND member.address ilike '%Waterbury%' GROUP BY member.membership_card;
                        ``` SELECT COUNT(*) AS total_members FROM member WHERE address != 'Hartford';
                        ``` SELECT member.address FROM member WHERE member.membership_card != 'black';
                        ``` SELECT shop.address FROM shop ORDER BY CAST(shop.open_year AS integer);
                        ``` SELECT AVG(shop.score) AS average_score, AVG(cast(shop.num_of_staff AS FLOAT)) AS average_staff FROM shop;
                        ``` SELECT shop.shop_id, shop.address FROM shop WHERE shop.score < (SELECT AVG(score) FROM shop);
                        ``` SELECT shop.address, CAST(shop.num_of_staff AS FLOAT) FROM shop WHERE shop.shop_id NOT IN (SELECT happy_hour.shop_id FROM happy_hour);
                        ``` SELECT hh.shop_id, COUNT(*) AS num_of_happy_hours FROM happy_hour hh GROUP BY hh.shop_id ORDER BY num_of_happy_hours DESC NULLS LAST LIMIT 1;
                        ``` SELECT MONTH, COUNT(HH_ID) AS num_of_happy_hours FROM happy_hour GROUP BY MONTH ORDER BY num_of_happy_hours DESC LIMIT 1;
                        ``` SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(HH_ID) > 2;
                        ``` SELECT COUNT(Album) AS total_albums FROM album;
                        ``` SELECT COUNT(Al.albumid) AS total_albums FROM album all;
                        ``` SELECT g.name FROM Genre g;
                        ``` SELECT genre.name FROM genre;
                        ``` SELECT * FROM customers WHERE state = 'NY';
                        ``` SELECT p.first_name, p.last_name FROM personal AS p JOIN address a ON p.address_id = a.address_id WHERE a.state = 'NY';
                        ``` SELECT Employee.FirstName, Employee.LastName FROM Employee WHERE Employee.City = 'Calgary';
                        ``` SELECT Employee.FirstName, Employee.LastName FROM Employee WHERE City = 'Calgary';
                        ``` SELECT BillingCountry FROM Invoice GROUP BY BillingCountry;
                        ``` SELECT BillingCountry FROM Invoice GROUP BY BillingCountry;
                        ``` SELECT Artist.Name FROM Artist WHERE Artist.Name ilike '%a%';
                        ``` SELECT Artist.Name FROM Artist WHERE Artist.Name ilike '%a%';
                        ``` SELECT Track.Name FROM Track WHERE Track.Name ilike '%you%';
                        ``` SELECT Track.Name FROM Track WHERE Track.Name ilike '%word%' ORDER BY Track.Name NULLS LAST;
                        ``` SELECT AVG(Track.UnitPrice) AS average_unit_price FROM Track;
                        ``` SELECT AVG(Track.UnitPrice) AS average_unit_price FROM Track;
                        ``` SELECT MAX(Milliseconds) AS max_milliseconds, MIN(Milliseconds) AS min_milliseconds FROM Track;
                        ``` SELECT MAX(Milliseconds) AS max_duration, MIN(Milliseconds) AS min_duration FROM Track;
                        ``` SELECT p.first_name, p.last_name FROM personal_info AS p JOIN customers_with_phone AS cwp ON p.customer_id = cwp.customer_id WHERE cwp.phone = 'luisg@embraer.com.br';
                        ``` SELECT p.first_name, p.last_name FROM personal_info AS p JOIN customers_info AS c ON p.customer_id = c.customer_id WHERE c.email = 'luisg@embraer.com.br';
                        ``` SELECT COUNT(*) FROM customer WHERE email ilike '%gmail.com%';
                        ``` SELECT COUNT(*) FROM customer WHERE email ilike '%gmail.com%';
                        ``` SELECT COUNT(DISTINCT Employee.City) AS number_of_cities FROM Employee;
                        ``` SELECT COUNT(DISTINCT Employee.City) AS num_cities FROM Employee;
                        ``` SELECT c.last_name FROM customers AS c WHERE NOT EXISTS (SELECT 1 FROM invoices AS i WHERE i.customer_id = c.customer_id AND to_number(i.total, '9999D99') > 20);
                        ``` SELECT c.last_name FROM customer c WHERE c.invoice_total <= 20;
                        ``` SELECT Employee.Phone FROM Employee;
                        ``` SELECT e.employeeid, e.phone FROM employee e;
                        ``` SELECT a.title FROM album a ORDER BY a.title ASC;
                        ``` SELECT a.title FROM album a ORDER BY a.title ASC;
                        ``` SELECT a.name FROM artist a LEFT JOIN album_artist ab ON a.artistid = ab.artistid WHERE ab.artistid IS NULL;
                        ``` SELECT a.name FROM artist a LEFT JOIN album_artist al ON a.artistid = al.artistid WHERE al.artistid IS NULL;
                        ``` SELECT Employee.BirthDate FROM Employee WHERE Employee.Address = 'Edmonton';
                        ``` SELECT Employee.BirthDate FROM Employee WHERE Employee.Address = 'Edmonton';
                        ``` SELECT DISTINCT Track.UnitPrice FROM Track;
                        ``` SELECT DISTINCT Track.UnitPrice FROM Track;
                        ``` SELECT COUNT(DISTINCT a.artistid) AS number_of_artists FROM artist a LEFT JOIN album_artist ab ON a.artistid = ab.artistid WHERE ab.artistid IS NULL;
                        ``` SELECT COUNT(*) AS num_artists FROM Artist WHERE ArtistId NOT IN (SELECT ArtistId FROM Album);
                        ``` SELECT Available_Policies.policy_type_code, Available_Policies.customer_phone FROM Available_Policies;
                        ``` SELECT Available_Policies.policy_id, Available_Policies.customer_phone FROM Available_Policies;
                        ``` SELECT Available_Policies.customer_phone FROM Available_Policies WHERE Available_Policies.policy_type_code ilike '%Life%Insurance%';
                        ``` SELECT Available_Policies.customer_phone FROM Available_Policies WHERE Available_Policies.policy_type_code ilike '%Life%Insurance%';
                        ``` SELECT policy_type_code, COUNT(*) AS number_of_records FROM available_policies GROUP BY policy_type_code ORDER BY number_of_records DESC NULLS LAST LIMIT 1;
                        ``` SELECT policy_type_code, COUNT(*) AS frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Available_Policies.customer_phone FROM Available_Policies GROUP BY Available_Policies.customer_phone HAVING COUNT(Available_policies.policy_id) = MAX(COUNT(available_policies.policy_id));
                        ``` SELECT Available_Policies.customer_phone FROM Available_Policies GROUP BY Available_Policies.customer_phone ORDER BY COUNT(Available_policies.policy_type_code) DESC NULLS LAST;
                        ``` SELECT Available_Policies.policy_type_code FROM Available_Policies GROUP BY Available_Policies.policy_type_code HAVING COUNT(Available_policies.customer_phone) > 4;
                        ``` SELECT Available_Policies.policy_type_code FROM Available_Policies GROUP BY Available_Policies.policy_type_code HAVING COUNT(Available_policies.customer_phone) > 4;
                        ``` SELECT SUM(Settlement_Amount) AS total_settlement_amount, AVG(Settlement_Amount) AS average_settlement_amount FROM Settlements;
                        ``` SELECT SUM(Settlements.Settlement_Amount) AS total_settlement_amount, AVG(Settlements.Settlement_Amount) AS average_settlement_amount FROM Settlements;
                        ``` SELECT Services.Service_ID, Services.Service_name FROM Services ORDER BY Services.Service_name ASC;
                        ``` SELECT Services.Service_name FROM Services ORDER BY Services.Service_name ASC;
                        ``` SELECT COUNT(*) AS total_services FROM Services;
                        ``` SELECT COUNT(*) AS total_services FROM Services;
                        ``` SELECT customers.customer_name FROM customers WHERE customers.customer_id NOT IN (SELECT customer_loss.customer_id FROM customer_loss);
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.customer_id NOT IN (SELECT Loss_customers.customer_id FROM Loss_customers);
                        ``` SELECT customer_id FROM customers WHERE customer_name ilike '%diana%';
                        ``` SELECT Customers.customer_id FROM Customers WHERE Customers.customer_name ilike '%Diana%';
                        ``` SELECT MAX(Settlements.settlement_amount) AS max_settlement_amount, MIN(Settlements.settlement_amount) AS min_settlement_amount FROM Settlements;
                        ``` SELECT MAX(Settlements.Settlement_Amount) AS max_settlement_amount, MIN(Settlements.Settlement_Amount) AS min_settlement_amount FROM Settlements;
                        ``` SELECT Customers.customer_id, Customers.customer_name FROM Customers ORDER BY Customers.customer_id ASC;
                        ``` SELECT customers.customer_id FROM customers ORDER BY customers.customer_id;
                        ``` SELECT COUNT(DISTINCT name) AS number_of_enzymes FROM enzyme;
                        ``` SELECT COUNT(*) AS total_enzymes FROM enzyme;
                        ``` SELECT enzyme.name FROM enzyme ORDER BY enzyme.name DESC;
                        ``` SELECT e.name FROM enzyme e ORDER BY e.name DESC;
                        ``` SELECT e.name, e.location FROM enzyme e;
                        ``` SELECT e.name, e.location FROM enzyme e;
                        ``` SELECT MAX(enzyme.omim) AS max_omim FROM enzyme;
                        ``` SELECT MAX(omim) AS max_omim FROM enzyme;
                        ``` SELECT e.product, e.chromosome, e.porphyria FROM enzyme e WHERE e.location ilike '%Cytosol%';
                        ``` SELECT e.product, e.chromosome, e.porphyria FROM enzyme e WHERE e.location ilike '%Cytosol%';
                        ``` SELECT e.name FROM enzyme e WHERE e.product != 'Heme';
                        ``` SELECT e.name FROM enzyme e WHERE e.product != 'Heme';
                        ``` SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved ilike '%Yes%';
                        ``` SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved = 'Yes';
                        ``` SELECT medicine_enzyme_interaction.interaction_type, COUNT(*) AS frequency FROM medicine_enzyme_interaction GROUP BY medicine_enzyme_interaction.interaction_type ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(DISTINCT interaction_type) AS total_interaction_types FROM medicine_enzyme_interaction;
                        ``` SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No';
                        ``` SELECT COUNT(*) FROM medicine WHERE fda_approved != 'yes' ;
                        ``` SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM interactions);
                        ``` SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM interactions);
                        ``` SELECT m.name, m.trade_name FROM medicine m WHERE m.id NOT IN (SELECT e.medicine_id FROM enzyme e JOIN heme h ON e.product_id = h.id);
                        ``` SELECT m.name, mt.trade_name FROM medicine m JOIN medicine_trade mt ON m.id = mt.medicine_id WHERE m.name not ilike '%heme%';
                        ``` SELECT COUNT(DISTINCT medicine.fda_approved) AS number_of_statuses FROM medicine;
                        ``` SELECT COUNT(DISTINCT medicine.fda_approved) AS number_of_status FROM medicine;
                        ``` SELECT enzyme.name FROM enzyme WHERE enzyme.name ilike '%ALA%';
                        ``` SELECT e.name FROM enzyme e WHERE e.name ilike '%ALA%';
                        ``` SELECT medicine.trade_name, COUNT(medicine.id) AS total_medicines FROM medicine GROUP BY medicine.trade_name;
                        ``` SELECT medicine.trade_name, COUNT(medicine.id) AS number_of_medicines FROM medicine GROUP BY medicine.trade_name;
                        ``` SELECT university.school_id, university.nickname FROM university ORDER BY university.founded ASC;
                        ``` SELECT university.school, university.nickname FROM university ORDER BY university.founded NULLS LAST;
                        ``` SELECT university.school, university.location FROM university WHERE university.founded = 1;
                        ``` SELECT u.school_id, u.location FROM university AS u WHERE 1 = 1;
                        ``` SELECT university.founded, MAX(university.enrollment) AS max_enrollment FROM university GROUP BY university.founded ORDER BY max_enrollment DESC LIMIT 1;
                        ``` SELECT MAX(u.founded) AS max_founding_year FROM university u;
                        ``` SELECT MAX(Founded) AS latest_founded_year FROM university WHERE School_ID != 3;
                        ``` SELECT MAX(university.founded) AS latest_founding_year FROM university WHERE university.school != 'Princeton';
                        ``` SELECT COUNT(DISTINCT school_id) AS number_of_schools FROM basketball_match;
                        ``` SELECT COUNT(DISTINCT school_id) AS number_of_schools FROM basketball_match;
                        ``` SELECT MAX(basketball_match.acc_percent) AS max_acc_percent FROM basketball_match;
                        ``` SELECT MAX(basketball_match.acc_percent) AS max_acc_percent FROM basketball_match;
                        ``` SELECT AVG(enrollment) AS average_enrollment FROM university WHERE founded < 1850;
                        ``` SELECT AVG(enrollment) AS average_enrollment FROM university WHERE founded < 1850;
                        ``` SELECT university.enrollment, university.primary_conference FROM university WHERE university.school_id = (SELECT MIN(school_id) FROM university);
                        ``` SELECT u.school_id, u.enrollment, u.primary_conference FROM university u ORDER BY u.founded ASC NULLS LAST LIMIT 1;
                        ``` SELECT SUM(university.enrollment) AS total_enrollment, MIN(university.enrollment) AS min_enrollment FROM university;
                        ``` SELECT university.school_id, SUM(university.enrollment) AS total_enrollment, MIN(university.enrollment) AS min_enrollment FROM university GROUP BY university.school_id;
                        ``` SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university GROUP BY university.affiliation;
                        ``` SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university GROUP BY university.affiliation;
                        ``` SELECT COUNT(*) AS total_schools FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);
                        ``` SELECT COUNT(*) AS num_universities FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match);
                        ``` SELECT university.school FROM university WHERE university.founded > 1850 ORDER BY university.founded NULLS LAST;
                        ``` SELECT university.school FROM university WHERE university.founded < '1850' OR university.founded IS NULL;
                        ``` SELECT COUNT(DISTINCT university.affiliation) AS number_of_affiliations FROM university;
                        ``` SELECT COUNT(DISTINCT university.affiliation) AS num_affiliations FROM university;
                        ``` SELECT COUNT(*) FROM university WHERE LOWER ilike '%ny%';
                        ``` SELECT COUNT(*) FROM university WHERE "Location" ilike '%NY%';
                        ``` SELECT university.affiliation, COUNT(*) AS total_universities FROM university WHERE university.enrollment > 20000 GROUP BY university.affiliation;
                        ``` SELECT university.affiliation, COUNT(*) AS school_count FROM university WHERE enrollment > 20000 GROUP BY university.affiliation ORDER BY school_count DESC NULLS LAST;
                        ``` SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university WHERE university.founded > 1850 GROUP BY university.affiliation;
                        ``` SELECT university.affiliation, SUM(CASE WHEN university.founded > 1850 THEN university.enrollment END) AS total_enrollment FROM university GROUP BY university.affiliation;
                        ``` SELECT MAX(university.enrollment) AS max_enrollment FROM university;
                        ``` SELECT MAX(university.enrollment) AS max_enrollment FROM university;
                        ``` SELECT b.team_name, a.acc_regular_season, a.acc_percent, a.all_games, a.all_games_percent FROM basketball_match AS b JOIN all_games_info AS a ON b.team_id = a.team_id;
                        ``` SELECT b.team_name, to_number(b.all_games,'9999') AS all_games_num FROM basketball_match b;
                        ``` SELECT b.team_name FROM basketball_match AS b ORDER BY b.all_games_percent DESC;
                        ``` SELECT b.team_name, CAST(b.all_games_percent AS FLOAT) AS all_games_percent FROM basketball_match b ORDER BY all_games_percent DESC;
                        ``` SELECT chip_model.model_name FROM chip_model WHERE (chip_model.launch_year >= 2002 AND chip_model.launch_year <= 2004);
                        ``` SELECT chip_model.model_name, MIN(chip_model.ram_miB) AS min_ram FROM chip_model GROUP BY chip_model.model_name;
                        ``` SELECT phone.chip_model, phone.screen_mode FROM phone WHERE phone.hardware_model_name ilike '%LG-P760%';
                        ``` SELECT COUNT(Hardware_Design_Name) AS number_of_hardware_designs FROM Phone WHERE Company_name ILIKE '%Nokia%Corporation%'
                        ``` SELECT phone.hardware_model_name, phone.company_name FROM phone WHERE phone.accrewitation_type ILIKE '%full%';
                        ``` SELECT Company_name, COUNT(*) AS total_phone_models FROM phone GROUP BY Company_name ORDER BY total_phone_models ASC LIMIT 1;
                        ``` SELECT DISTINCT Company_name FROM Phone WHERE Company_name IN (SELECT Company_name FROM Phone GROUP BY Company_name HAVING COUNT(Company_name) > 1);
                        ``` SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode;
                        ``` SELECT Accredation_type, COUNT(*) AS phone_count FROM phone GROUP BY Accredation_type;
                        ``` SELECT Accredation_type, COUNT(*) AS number_of_phones FROM phone GROUP BY Accredation_type;
                        ``` SELECT phone.accreditation_level FROM phone GROUP BY phone.accreditation_level HAVING COUNT(phone.company_name) > 3;
                        ``` SELECT chip_model.model_name, chip_model.launch_year, chip_model.ram_miB, chip_model.rom_miB, chip_model.slots, chip_model.wifi, chip_model.bluetooth FROM chip_model;
                        ``` SELECT COUNT(*) AS number_of_models FROM chip_model WHERE WiFi IS NULL;
                        ``` SELECT COUNT(*) FROM chip_model WHERE WiFi IS NULL;
                        ``` SELECT chip_model.model_name, chip_model.launch_year FROM chip_model ORDER BY chip_model.launch_year NULLS LAST;
                        ``` AVG(chip_model.ram_mib) AS average_ram_mib FROM chip_model WHERE chip_model.model_name NOT IN (SELECT phone_number.chip_model_name FROM phone_number);
                        ``` SELECT DISTINCT cm.model_name FROM chip_model cm LEFT JOIN phone p ON cm.model_name = p.chip_model WHERE p.phone_type IS NULL;
                        ``` SELECT COUNT(*) AS total_countries FROM country;
                        ``` SELECT COUNT(*) AS total_countries FROM country;
                        ``` SELECT c.country_name, c.capital FROM country c;
                        ``` SELECT c.country_name, c.capital FROM country c;
                        ``` SELECT country.official_native_language FROM country WHERE country.official_native_language ilike '%English%';
                        ``` SELECT country.official_native_language FROM country WHERE country.official_native_language ilike '%English%';
                        ``` SELECT DISTINCT match_season.position FROM match_season;
                        ``` SELECT position FROM match_season GROUP BY POSITION;
                        ``` SELECT match_season.player FROM match_season WHERE college = 'collegeucla';
                        ``` SELECT match_season.player FROM match_season WHERE "country" ILIKE '%Uruguay%' AND "team" ILIKE '%ucla%';
                        ``` SELECT match_season.player, COUNT(*) AS total_matches FROM match_season WHERE college IN ('collegecla', 'duke') GROUP BY match_season.player;
                        ``` SELECT match_season.player, COUNT(DISTINCT match_season.position) AS num_positions FROM match_season WHERE college IN ('Furmancla', 'Duke') GROUP BY match_season.player;
                        ``` SELECT match_season.draft_pick_number, match_season.draft_class FROM match_season WHERE match_season.position = 'Defender';
                        ``` SELECT match_season.draft_pick_number, match_season.draft_class FROM match_season WHERE match_season.position = 'Defender';
                        ``` SELECT COUNT(DISTINCT Team) AS number_of_teams FROM match_season;
                        ``` SELECT COUNT(DISTINCT Team) AS num_teams FROM match_season;
                        ``` SELECT player.player_id, CAST(player.years_play AS FLOAT) AS years_play FROM player;
                        ``` SELECT p.player_id, p.player, CAST(p.years_played AS FLOAT) AS years_played FROM player p;
                        ``` SELECT t.name FROM team AS t;
                        ``` SELECT team.name FROM team;
                        ``` SELECT match_season.position, COUNT(match_season.player) AS player_count FROM match_season GROUP BY match_season.position ORDER BY player_count DESC NULLS LAST;
                        ``` SELECT match_season.position, COUNT(*) AS total_players FROM match_season GROUP BY match_season.position;
                        ``` SELECT match_season.player FROM match_season ORDER BY match_season.college ASC;
                        ``` SELECT DISTINCT match_season.player FROM match_season ORDER BY match_season.college ASC;
                        ``` SELECT match_season.position, COUNT(*) AS frequency FROM match_season GROUP BY match_season.position ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT m.season, p.position, COUNT(*) AS frequency FROM match_season m JOIN player p ON m.player = p.name GROUP BY m.season, p.position ORDER BY frequency DESC LIMIT 1;
                        ``` SELECT college, COUNT(*) AS frequency FROM match_season GROUP BY college ORDER BY frequency DESC NULLS LAST LIMIT 3;
                        ``` SELECT college FROM match_season GROUP BY college ORDER BY COUNT(college) DESC NULLS LAST LIMIT 3;
                        ``` SELECT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2;
                        ``` SELECT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2;
                        ``` SELECT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2 ORDER BY college DESC;
                        ``` SELECT DISTINCT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2 ORDER BY college DESC;
                        ``` SELECT t.name FROM team t LEFT JOIN match_season m ON t.team_id = m.team_id WHERE m.team_id IS NULL;
                        ``` SELECT t.name FROM team t LEFT JOIN match_season m ON t.team_id = m.team_id WHERE m.team_id IS NULL;
                        ``` SELECT DISTINCT college.name FROM college JOIN player ON player.college = college.name WHERE player.position IN ('midfielder', 'defender');
                        ``` SELECT DISTINCT college FROM match_season WHERE position IN ('Midfielder', 'Defender');
                        ``` SELECT COUNT(climber_id) AS total_climbers FROM climber;
                        ``` SELECT COUNT(climber_id) AS total_climbers FROM climber;
                        ``` SELECT c.name FROM climber c ORDER BY c.points DESC;
                        ``` SELECT c.name FROM climber c ORDER BY c.points DESC;
                        ``` SELECT c.name FROM climber c WHERE c.country != 'Switzerland';
                        ``` SELECT c.name FROM climber c WHERE c.country != 'Switzerland';
                        ``` SELECT MAX(climber.points) AS max_points FROM climber WHERE climber.country = 'United Kingdom';
                        ``` SELECT MAX(climber.points) AS max_points FROM climber WHERE climber.country = 'United Kingdom';
                        ``` SELECT COUNT(DISTINCT country) AS number_of_countries FROM climber;
                        ``` SELECT COUNT(DISTINCT climber.country) FROM climber;
                        ``` SELECT mountain.name FROM mountain ORDER BY mountain.name ASC;
                        ``` SELECT mountain.name FROM mountain ORDER BY mountain.name ASC;
                        ``` SELECT mountain.country FROM mountain WHERE mountain.height > 5000;
                        ``` SELECT mountain.country FROM mountain WHERE mountain.height > 5000;
                        ``` SELECT mountain.name FROM mountain ORDER BY mountain.heigh DESC LIMIT 1;
                        ``` SELECT mountain.name FROM mountain ORDER BY mountain.height DESC LIMIT 1;
                        ``` SELECT mountain.name, mountain.prominence FROM mountain ORDER BY mountain.prominence DESC NULLS LAST LIMIT 3;
                        ``` SELECT mountain.name, mountain.prominence, row_number() OVER (PARTITION BY mountain.country ORDER BY mountain.prominence DESC) AS rank FROM mountain WHERE mountain.country = 'Spain' GROUP BY mountain.name, mountain.country HAVING COUNT(mountain.id) >= 3;
                        ``` SELECT c.country, COUNT(*) AS total_climbers FROM climber c GROUP BY c.country;
                        ``` SELECT c.country, COUNT(*) AS total_climbers FROM climber c GROUP BY c.country;
                        ``` SELECT m.country FROM mountain m GROUP BY m.country HAVING COUNT(m.mountain_id) > 1;
                        ``` SELECT m.country FROM mountain m GROUP BY m.country HAVING COUNT(m.mountain_id) > 1;
                        ``` SELECT mountain.name FROM mountain WHERE mountain.height IS NULL;
                        ``` SELECT c.name AS county_name FROM country c JOIN mountain m ON c.country_id = m.country WHERE NOT EXISTS (SELECT 1 FROM climber cl WHERE cl.mountain_id = m.mountain_id);
                        ``` SELECT DISTINCT mountain.country FROM mountain WHERE mountain.height > 5600 AND mountain.height < 5200;
                        ``` SELECT DISTINCT mountain.country FROM mountain WHERE mountain.prominence > 5600 AND mountain.prominence < 5200;
                        ``` SELECT mountain.range FROM mountain GROUP BY mountain.range ORDER BY COUNT(mountain.name) DESC LIMIT 1;
                        ``` SELECT mountain.range FROM mountain GROUP BY mountain.range ORDER BY COUNT(mountain.mountain_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT mountain.name FROM mountain WHERE mountain.height > 5000 OR mountain.prominence > 1000;
                        ``` SELECT mountain.name FROM mountain WHERE mountain.height > 5000 OR mountain.prominence > 1000;
                        ``` SELECT COUNT(*) AS total_bodybuilders FROM body_builder;
                        ``` SELECT body_builder.body_builder_id, SUM(body_builder.total) AS total_score FROM body_builder GROUP BY body_builder.body_builder_id ORDER BY total_score ASC;
                        ``` SELECT body_builder.snatch, body_builder.clean_jerk FROM body_builder ORDER BY body_builder.snatch ASC;
                        ``` SELECT AVG(body_builder.snatch) AS average_snatch FROM body_builder;
                        ``` SELECT body_builder.people_id, MAX(body_builder.clean_jerk) AS max_clean_jerk, MIN(body_builder.total) AS min_total FROM body_builder GROUP BY body_builder.people_id HAVING SUM(body_builder.total) = MAX(SUM(body_builder.total)) ORDER BY body_builder.people_id NULLS LAST;
                        ``` SELECT people.birth_date FROM people ORDER BY people.height ASC;
                        ``` SELECT p.birth_place, COUNT(*) AS total_people FROM people p GROUP BY p.birth_place;
                        ``` SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT(birth_place) DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT people.birth_place FROM people GROUP BY people.birth_place HAVING COUNT(people.people_id) >= 2;
                        ``` SELECT people.height, people.weight FROM people ORDER BY people.height DESC;
                        ``` SELECT body_builder.body_builder_id, body_builder.people_id, body_builder.snatch, body_builder.clean_jerk, body_builder.total FROM body_builder;
                        ``` SELECT p.name, p.birth_place FROM people p WHERE p.weight NOT IN (SELECT b.weight FROM bodybuilders b);
                        ``` SELECT COUNT(DISTINCT people.birth_place) AS number_of_birth_places FROM people;
                        ``` SELECT COUNT(*) FROM people WHERE weight IS NULL;
                        ``` SELECT MIN(body_builder.snatch) AS min_snatch FROM body_builder;
                        ``` SELECT COUNT(*) AS total_elections FROM election;
                        ``` SELECT election_id, date, votes FROM election ORDER BY votes DESC;
                        ``` SELECT election.date, (100 * CAST(election.vote_percent AS FLOAT)) AS vote_percent FROM election ORDER BY election.date NULLS LAST;
                        ``` SELECT MIN(Vote_Percent) AS min_vote_percent, MAX(Vote_Percent) AS max_vote_percent FROM election;
                        ``` SELECT representative.name, representative.party FROM representative;
                        ``` SELECT representative.name FROM representative WHERE representative.party != 'Republican';
                        ``` SELECT representative.lifespan FROM representative WHERE representative.state IN ('New York', 'Indiana') ORDER BY representative.lifespan NULLS LAST;
                        ``` SELECT p.name, COUNT(r.representative_id) AS num_reps FROM party p JOIN representative r ON p.party_id = r.party JOIN state s ON r.state = s.state GROUP BY p.name;
                        ``` SELECT r.party FROM representative r GROUP BY r.party ORDER BY COUNT(r.representative_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT party.name FROM party WHERE party.id IN (SELECT representative.party_id FROM representative GROUP BY representative.party_id HAVING COUNT(representative.party_id) >= 3);
                        ``` SELECT representative.state FROM representative GROUP BY representative.state HAVING COUNT(representative.representative_id) >= 2;
                        ``` SELECT representative.name FROM representative WHERE representative.representative_id NOT IN (SELECT election.representative_id FROM election);
                        ``` SELECT representative.name FROM representative WHERE representative.state IN ('New York', 'Pennsylvania') GROUP BY representative.name HAVING COUNT(DISTINCT CASE WHEN representative.state = 'New York' THEN representative.representative_id END) >= 1 AND COUNT(DISTINCT CASE WHEN representative.state = 'Pennsylvania' THEN representative.representative_id END) >= 1;
                        ``` SELECT COUNT(DISTINCT representative.party) AS number_of_parties FROM representative;
                        ``` SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings;
                        ``` SELECT COUNT(apt_booking_id) AS total_bookings FROM Apartment_Bookings;
                        ``` SELECT apt_booking_id, booking_start_date, booking_end_date FROM Apartment_Bookings;
                        ``` SELECT apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date FROM Apartment_Bookings;
                        ``` SELECT DISTINCT Apartment_Buildings.building_description FROM Apartment_Buildings;
                        ``` SELECT DISTINCT Apartment_Buildings.building_description FROM Apartment_Buildings;
                        ``` SELECT Apartment_Buildings.building_short_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ilike '%Emma%' ;
                        ``` SELECT Apartment_Buildings.building_short_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ilike '%Emma%' ;
                        ``` SELECT Apartment_Buildings.building_address, Apartment_Buildings.building_phone FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ilike '%Brenden%';
                        ``` SELECT Apartment_Buildings.building_address, Apartment_Buildings.building_phone FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ilike '%Brenden%' ;
                        ``` SELECT Apartment_Buildings.building_full_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_full_name ilike '%court%' ;
                        ``` SELECT Apartment_Buildings.building_full_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_full_name ilike '%court%';
                        ``` SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments;
                        ``` SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments;
                        ``` SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;
                        ``` SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;
                        ``` SELECT a.apt_id, CAST(a.room_count AS FLOAT) AS room_count FROM Apartments a;
                        ``` SELECT a.apt_id, CAST(a.room_count AS FLOAT) AS room_count FROM Apartments a;
                        ``` SELECT AVG(cast(room_count AS FLOAT)) FROM Apartments WHERE apt_type_code ilike '%Studio%';
                        ``` SELECT AVG(cast(room_count AS FLOAT)) FROM Apartments WHERE apt_type_code ilike '%Studio%';
                        ``` SELECT Apartments.apt_number FROM Apartments WHERE Apartments.apt_type_code ilike '%Flat%';
                        ``` SELECT a.apt_number FROM Apartments a WHERE a.apt_type_code ilike '%flat%';
                        ``` SELECT Guests.guest_first_name, Guests.guest_last_name FROM Guests;
                        ``` SELECT Guests.guest_first_name, Guests.guest_last_name FROM Guests;
                        ``` SELECT Guests.date_of_birth FROM Guests WHERE Guests.gender_code = 'Male';
                        ``` SELECT Guests.date_of_birth FROM Guests WHERE Guests.gender_code = 'Male';
                        ``` SELECT booking_status_code, COUNT(apt_booking_id) AS total_bookings FROM Apartment_Bookings GROUP BY booking_status_code;
                        ``` SELECT Apartment_Bookings.booking_status_code, COUNT(Apartment_Bookings.apt_booking_id) AS total_bookings FROM Apartment_Bookings GROUP BY Apartment_Bookings.booking_status_code;
                        ``` SELECT Apartments.apt_id, Apartments.room_count FROM Apartments ORDER BY CAST(Apartments.room_count AS FLOAT) ASC;
                        ``` SELECT Apartments.apt_id, Apartments.room_count FROM Apartments ORDER BY CAST(Apartments.room_count AS FLOAT) ASC;
                        ``` SELECT Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count FROM Apartments ORDER BY Apartments.bedroom_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(apartments.apt_number) AS max_apt_number FROM apartments WHERE apartments.bedroom_count = (SELECT MAX(bedroom_count) FROM apartments);
                        ``` SELECT apt_type_code, COUNT(apt_id) AS number_of_apartments FROM Apartments GROUP BY apt_type_code ORDER BY number_of_apartments ASC;
                        ``` SELECT apt_type_code, COUNT(*) AS number_of_apartments FROM Apartments GROUP BY apt_type_code ORDER BY number_of_apartments ASC;
                        ``` SELECT a.apt_type_code, AVG(cast(a.room_count AS FLOAT)) AS avg_room_count FROM Apartments a GROUP BY a.apt_type_code ORDER BY avg_room_count DESC NULLS LAST LIMIT 3;
                        ``` SELECT Apartments.apt_type_code, AVG(Apartments.room_count::FLOAT) AS avg_room_count FROM Apartments GROUP BY Apartments.apt_type_code ORDER BY avg_room_count DESC NULLS LAST LIMIT 3;
                        ``` SELECT a.apt_type_code, CAST(a.room_count AS FLOAT) AS room_count, b.bathroom_count, c.bedroom_count FROM Apartments a JOIN (SELECT apt_id, MAX(bathroom_count) AS bathroom_count FROM Apartments GROUP BY apt_id) b ON a.apt_id = b.apt_id JOIN (SELECT apt_id, MAX(bedroom_count) AS bedroom_count FROM Apartments GROUP BY apt_id) c ON a.apt_id = c.apt_id;
                        ``` SELECT a.apt_type_code, CAST(a.room_count AS FLOAT) AS room_count, a.bathroom_count, a.bedroom_count FROM Apartments a ORDER BY CAST(a.room_count AS FLOAT) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Apartments.apt_type_code FROM Apartments GROUP BY Apartments.apt_type_code ORDER BY COUNT(Apartments.apt_type_code) DESC LIMIT 1;
                        ``` SELECT Apartments.apt_type_code, COUNT(Apartments.apt_id) AS frequency FROM Apartments GROUP BY Apartments.apt_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Apartments.apt_type_code, COUNT(*) AS frequency FROM Apartments WHERE Apartments.bathroom_count > 1 GROUP BY Apartments.apt_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Apartments.apt_type_code, COUNT(*) AS frequency FROM Apartments WHERE Apartments.bathroom_count > 1 GROUP BY Apartments.apt_type_code ORDER BY frequency DESC LIMIT 1;
                        ``` SELECT apt_type_code, MIN(room_count) AS min_rooms, MAX(room_count) AS max_rooms FROM Apartments GROUP BY apt_type_code;
                        ``` SELECT a.apt_type_code, MIN(cast(a.room_count AS integer)) AS min_rooms, MAX(cast(a.room_count AS integer)) AS max_rooms FROM Apartments a GROUP BY a.apt_type_code;
                        ``` SELECT g.gender_code, COUNT(g.guest_id) AS guest_count FROM Guests g GROUP BY g.gender_code ORDER BY guest_count DESC;
                        ``` SELECT g.gender_code, COUNT(g.guest_id) AS guest_count FROM guests g GROUP BY g.gender_code ORDER BY guest_count DESC;
                        ``` SELECT COUNT(*) AS number_of_apartments FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Facilities);
                        ``` SELECT COUNT(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Facilities);
                        ``` SELECT COUNT(*) AS total_games FROM game WHERE season > 2007;
                        ``` SELECT game.date FROM game WHERE game.home_team = 'Chelsea' ORDER BY game.date DESC;
                        ``` SELECT g.season, g.home_team, g.away_team FROM game g;
                        ``` SELECT s.name, MAX(s.home_games) AS max_home_games, MIN(s.home_games) AS min_home_games, AVG(s.home_games) AS avg_home_games FROM stadium s GROUP BY s.name;
                        ``` SELECT AVG(Average_Attendance) AS average_attendance FROM stadium WHERE Capacity_Percentage > 100;
                        ``` SELECT i.player, CAST(i.number_of_matches AS FLOAT) AS number_of_matches, i.source FROM injury_accident i WHERE i.injury != 'Knee problem';
                        ``` SELECT COUNT(DISTINCT injury_accident.source) AS number_of_sources FROM injury_accident;
                        ``` SELECT COUNT(*) AS num_games_without_injury FROM game WHERE 'Injury' NOT IN (SELECT Injury FROM Injury);
                        ``` SELECT s.name, AVG(g.home_games) AS average_home_games, SUM(g.total_attendance) AS total_attendance FROM stadium s JOIN game g ON s.id = g.stadium_id WHERE s.capacity_percentage > 0 GROUP BY s.name;
                        ``` SELECT stadium.name FROM stadium WHERE stadium.name ilike '%Bank%';
                        ``` SELECT AVG(weight) AS average_weight FROM player;
                        ``` SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM player;
                        ``` SELECT preferred_foot, AVG(overall_rating) AS average_rating FROM Player_Attributes GROUP BY preferred_foot;
                        ``` SELECT COUNT(*) AS total_players FROM Player_Attributes WHERE overall_rating > 80 AND preferred_foot IN ('right', 'left');
                        ``` SELECT p.id FROM Player p WHERE p.height >= 180 AND p.overall_rating > 85;
                        ``` SELECT p.id FROM Player p WHERE p.height BETWEEN 180 AND 190 AND p.foot_preference = 'left' ;
                        ``` SELECT COUNT(Performance_ID) AS total_performances FROM performance;
                        ``` SELECT performance.host FROM performance ORDER BY performance.attendance ASC;
                        ``` SELECT performance.date, performance.location FROM performance;
                        ``` SELECT performance.date, SUM(performance.attendance) AS total_attendance FROM performance WHERE performance.location IN ('TD Garden', 'Bell Centre') GROUP BY performance.date;
                        ``` SELECT AVG(Attendance) FROM performance;
                        ``` SELECT MAX(performance.date) AS max_date FROM performance;
                        ``` SELECT performance.location, COUNT(performance.performance_id) AS num_performances FROM performance GROUP BY performance.location;
                        ``` SELECT performance.location, COUNT(performance.location) AS frequency FROM performance GROUP BY performance.location ORDER BY frequency DESC NULLS LAST;
                        ``` SELECT DISTINCT performance.location FROM performance GROUP BY performance.location HAVING COUNT(performance.performance_id) >= 2;
                        ``` SELECT DISTINCT performance.location FROM performance WHERE (performance.attendance > 2000 AND performance.attendance < 1000) GROUP BY performance.location;
                        ``` SELECT member.name FROM member WHERE member.member_id NOT IN (SELECT performance.member_id FROM performance);
                        ``` SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > 50;
                        ``` SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > 50;
                        ``` SELECT COUNT(room_number) AS room_count FROM classroom WHERE building != 'Lamberton';
                        ``` SELECT COUNT(*) FROM classroom WHERE building != 'Lamberton';
                        ``` SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department);
                        ``` SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(budget) FROM department);
                        ``` SELECT classroom.building, classroom.room_number FROM classroom WHERE (classroom.capacity >= 50 AND classroom.capacity <= 100) ORDER BY classroom.building NULLS LAST, classroom.room_number NULLS LAST;
                        ``` SELECT classroom.room_number, classroom.building FROM classroom WHERE (classroom.capacity >= 50 AND classroom.capacity <= 100)
                        ``` SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC LIMIT 1;
                        ``` SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC LIMIT 1;
                        ``` SELECT s.name FROM student AS s JOIN department AS d ON s.dept_name = d.name WHERE d.name = 'History' ORDER BY s.tot_cred DESC LIMIT 1;
                        ``` SELECT s.name FROM student AS s WHERE s.dept_name = 'History' ORDER BY s.tot_cred DESC LIMIT 1;
                        ``` SELECT COUNT(*) AS room_count FROM classroom WHERE building ilike '%Lamberton%';
                        ``` SELECT COUNT(*) AS total_classrooms FROM classroom WHERE building ilike '%Lamberton%';
                        ``` SELECT CAST(COUNT(DISTINCT student.s_id) AS FLOAT) / NULLIF(COUNT(DISTINCT advisor.s_id), 0) AS ratio FROM student LEFT JOIN advisor ON student.s_id = advisor.s_id;
                        ``` SELECT COUNT(DISTINCT s_id) AS num_students FROM advisor;
                        ``` SELECT COUNT(DISTINCT course.dept_name) AS number_of_departments FROM course;
                        ``` SELECT COUNT(DISTINCT course.dept_name) AS num_departments FROM course;
                        ``` SELECT COUNT(DISTINCT course_id) AS number_of_courses FROM course WHERE dept_name ilike '%Physics%';
                        ``` SELECT COUNT(*) FROM course WHERE dept_name ilike '%Physics%';
                        ``` SELECT COUNT(*) AS num_courses FROM course WHERE course_id NOT IN (SELECT prereq_course FROM prerequisite);
                        ``` SELECT COUNT(*) FROM course WHERE course_id NOT IN (SELECT prereq_course FROM prerequisite);
                        ``` SELECT course.title FROM course WHERE course.course_id NOT IN (SELECT prereq.prereq_course FROM prerequisite AS prereq);
                        ``` SELECT course.title FROM course WHERE course.course_id NOT IN (SELECT prerequisite_course.prerequisite_course FROM prerequisite_course);
                        ``` SELECT COUNT(DISTINCT teaches.id) AS num_instructors FROM teaches;
                        ``` SELECT COUNT(DISTINCT teaches.instructor_id) AS num_instructors FROM teaches;
                        ``` SELECT SUM(department.budget) AS total_budget FROM department WHERE department.dept_name ilike '%Marketing%' OR department.dept_name ilike '%Finance%';
                        ``` SELECT SUM(CASE WHEN dept_name = 'Marketing' THEN budget END) + SUM(CASE WHEN dept_name = 'Finance' THEN budget END) AS total_budget FROM department;
                        ``` SELECT instructor.dept_name FROM instructor WHERE instructor.name ilike '%Soisalon%';
                        ``` SELECT instructor.dept_name FROM instructor WHERE instructor.name ilike '%Soisalon%';
                        ``` SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50;
                        ``` SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50;
                        ``` SELECT department.dept_name, department.budget FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department);
                        ``` SELECT department.dept_name, department.budget FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department);
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name = 'Statistics' ORDER BY instructor.salary ASC LIMIT 1;
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name = 'Statistics' ORDER BY instructor.salary ASC NULLS LAST LIMIT 1;
                        ``` SELECT course.title FROM course WHERE course.dept_name ilike '%Statistics%' AND course.dept_name ilike '%Psychology%';
                        ``` SELECT course.title FROM course WHERE course.dept_name ilike '%Statistics%' AND course.dept_name ilike '%Psychology%';
                        ``` SELECT course.title FROM course WHERE course.dept_name ilike '%Statistics%' AND course.dept_name not ilike '%Psychology%';
                        ``` SELECT course.title FROM course WHERE course.dept_name ilike '%Statistics%' AND course.dept_name not ilike '%Psychology%';
                        ``` SELECT DISTINCT teaches.id FROM teaches WHERE teaches.semester = 'Fall' AND teaches.year = 2009 AND teaches.id NOT IN (SELECT teaches.id FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = 2010);
                        ``` SELECT DISTINCT teaches.id FROM teaches WHERE teaches.semester = 'Fall' AND teaches.year = 2009 AND teaches.id NOT IN (SELECT teaches.id FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = 2010);
                        ``` SELECT department.dept_name, COUNT(course.course_id) AS course_count FROM department JOIN course ON department.dept_name = course.dept_name GROUP BY department.dept_name ORDER BY course_count DESC NULLS LAST LIMIT 3;
                        ``` SELECT department_name, COUNT(course_id) AS course_count FROM course GROUP BY department_name ORDER BY course_count DESC NULLS LAST LIMIT 3;
                        ``` SELECT d.dept_name FROM department d JOIN course c ON d.dept_id = c.dept_name GROUP BY d.dept_name ORDER BY SUM(c.credits) DESC LIMIT 1;
                        ``` SELECT course.dept_name, COUNT(course.credits) AS total_credits FROM course GROUP BY course.dept_name ORDER BY total_credits DESC NULLS LAST LIMIT 1;
                        ``` SELECT course.title, course.credits FROM course ORDER BY course.title NULLS LAST, course.credits DESC NULLS LAST;
                        ``` SELECT course.title, course.credits FROM course ORDER BY course.title NULLS LAST, course.credits DESC;
                        ``` SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1;
                        ``` SELECT department.dept_name FROM department ORDER BY department.budget ASC LIMIT 1;
                        ``` SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC;
                        ``` SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC;
                        ``` SELECT instructor.name, instructor.salary FROM instructor ORDER BY instructor.salary DESC NULLS LAST LIMIT 1;
                        ``` SELECT instructor.name FROM instructor ORDER BY instructor.salary DESC LIMIT 1;
                        ``` SELECT instructor.id, instructor.name, instructor.dept_name, instructor.salary FROM instructor ORDER BY instructor.salary ASC;
                        ``` SELECT instructor.id, instructor.name, instructor.dept_name, instructor.salary FROM instructor ORDER BY instructor.salary ASC;
                        ``` SELECT s.name, d.dept_name, s.tot_cred FROM student AS s JOIN department AS d ON s.dept_name = d.dept_name ORDER BY s.tot_cred ASC;
                        ``` SELECT student.name, department.dept_name FROM student JOIN department ON student.dept_name = department.dept_name ORDER BY student.tot_cred ASC;
                        ``` SELECT classroom.building, COUNT(*) AS room_count FROM classroom WHERE classroom.capacity > 50 GROUP BY classroom.building;
                        ``` SELECT classroom.building, COUNT(*) AS room_count FROM classroom WHERE classroom.capacity > 50 GROUP BY classroom.building;
                        ``` SELECT classroom.building, MAX(classroom.capacity) AS max_capacity, AVG(classroom.capacity) AS avg_capacity FROM classroom GROUP BY classroom.building;
                        ``` SELECT classroom.building, MAX(classroom.capacity) AS max_capacity, AVG(classroom.capacity) AS avg_capacity FROM classroom GROUP BY classroom.building;
                        ``` SELECT course.title FROM course WHERE course.dept_name IN (SELECT dept_name FROM department GROUP BY dept_name HAVING COUNT(dept_name) > 1);
                        ``` SELECT course.title FROM course WHERE course.dept_name IN (SELECT dept_name FROM department GROUP BY dept_name HAVING COUNT(dept_name) > 1);
                        ``` SELECT dept_name, SUM(credits) AS total_credits FROM course GROUP BY dept_name;
                        ``` SELECT dept_name, SUM(credits) AS total_credits FROM course GROUP BY dept_name;
                        ``` SELECT MIN(instructor.salary) AS min_salary FROM instructor WHERE instructor.dept_name IN (SELECT department_name FROM department GROUP BY department_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor));
                        ``` SELECT instructor.id, instructor.name, instructor.salary FROM instructor WHERE instructor.salary = (SELECT MIN(instructor.salary) FROM instructor WHERE instructor.dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)));
                        ``` SELECT section.year, section.semester, COUNT(*) AS course_count FROM section GROUP BY section.year, section.semester;
                        ``` SELECT section.year, section.semester, COUNT(*) AS course_count FROM section GROUP BY section.year, section.semester ORDER BY section.year, section.semester;
                        ``` SELECT MAX(section.year) AS max_year FROM section;
                        ``` SELECT MAX(section.year) AS max_year FROM section;
                        ``` SELECT MAX(section.year), section.semester FROM section GROUP BY section.semester;
                        ``` SELECT section.year, section.semester, COUNT(*) AS course_count FROM section GROUP BY section.year, section.semester ORDER BY course_count DESC LIMIT 1;
                        ``` SELECT s.dept_name, COUNT(*) AS total_students FROM student s GROUP BY s.dept_name ORDER BY total_students DESC LIMIT 1;
                        ``` SELECT department.name FROM student JOIN department ON student.dept_name = department.name GROUP BY department.name ORDER BY COUNT(student.id) DESC LIMIT 1;
                        ``` SELECT department.dept_name, COUNT(student.id) AS total_students FROM student JOIN department ON student.dept_name = department.dept_name GROUP BY department.dept_name;
                        ``` SELECT student.dept_name, COUNT(*) AS total_students FROM student GROUP BY student.dept_name;
                        ``` SELECT takes.semester, takes.year FROM takes GROUP BY takes.semester, takes.year ORDER BY COUNT(takes.id) ASC LIMIT 1;
                        ``` SELECT takes.semester, takes.year, COUNT(takes.id) AS student_count FROM takes GROUP BY takes.semester, takes.year ORDER BY student_count ASC LIMIT 1;
                        ``` SELECT course_id FROM course WHERE course_id NOT IN (SELECT prereq_course FROM course_prereq);
                        ``` SELECT course.course_id FROM course WHERE course.course_id NOT IN (SELECT prereq.prereq_course FROM prequisite AS prereq);
                        ``` SELECT course.title FROM course WHERE course.course_id NOT IN (SELECT prereq.prereq_course FROM prerequisite AS prereq);
                        ``` SELECT course.title FROM course WHERE course.course_id NOT IN (SELECT prerequisite.course_id FROM prerequisite);
                        ``` SELECT c.title FROM course c WHERE c.dept_name = 'International Finance';
                        ``` SELECT c.title FROM course c WHERE c.dept_name = 'International Finance';
                        ``` SELECT c.title FROM course c JOIN prerequisites p ON c.course_id = p.prerequisite_course_id WHERE p.title ilike '%Differential%Geometry%';
                        ``` SELECT course.title FROM course WHERE course.dept_name = 'Differential Geometry';
                        ``` SELECT student.name FROM student WHERE student.id IN (SELECT enrollment.student_id FROM enrollment WHERE semester_name ILIKE '%fall%' AND EXTRACT(YEAR FROM start_date) = 2003);
                        ``` SELECT student.name FROM student WHERE student.id IN (SELECT course_enrollment.student_id FROM course_enrollment WHERE course_enrollment.course_id IN (SELECT course.id FROM course WHERE EXTRACT(YEAR FROM course.start_date) = 2003 AND EXTRACT(QUARTER FROM course.start_date) = 4));
                        ``` SELECT c.title FROM course c WHERE c.dept_name = (SELECT dept_name FROM course WHERE title ilike '%Mobile%Computing%' ORDER BY credits DESC LIMIT 1) AND c.course_id != (SELECT course_id FROM course WHERE title ilike '%Mobile%Computing%' ORDER BY credits DESC LIMIT 1);
                        ``` SELECT c.title FROM course c WHERE c.course_id IN (SELECT requisite_course FROM course WHERE title ilike '%mobile%computing%') ORDER BY c.title NULLS LAST;
                        ``` SELECT instructor.name FROM instructor WHERE instructor.id NOT IN (SELECT course_instructor.instructor_id FROM course_instructor);
                        ``` SELECT instructor.name FROM instructor WHERE instructor.id NOT IN (SELECT course.instructor_id FROM course);
                        ``` SELECT instructor.id FROM instructor WHERE instructor.id NOT IN (SELECT course_instructor.instructor_id FROM course_instructor);
                        ``` SELECT instructor.id FROM instructor WHERE instructor.name not ilike '%did%not%teach%';
                        ``` SELECT i.name FROM instructor i JOIN course_instructor ci ON i.id != ci.instructor_id WHERE NOT EXISTS (SELECT 1 FROM course c JOIN course_time t ON c.course_id = t.course_id WHERE c.instructor_id = i.id AND t.semester = 'Spring');
                        ``` SELECT instructor.name FROM instructor WHERE instructor.id NOT IN (SELECT course_instructor.instructor_id FROM course_instructor JOIN course ON course_instructor.course_id = course.id WHERE course.semester = 'Spring');
                        ``` SELECT instructor.dept_name FROM instructor GROUP BY instructor.dept_name ORDER BY AVG(instructor.salary) DESC LIMIT 1;
                        ``` SELECT instructor.dept_name, AVG(instructor.salary) AS average_salary FROM instructor GROUP BY instructor.dept_name ORDER BY average_salary DESC NULLS LAST LIMIT 1;
                        ``` SELECT student.name FROM student WHERE student.dept_name not ilike '%Biology%' ORDER BY student.name NULLS LAST;
                        ``` SELECT s.name FROM student AS s LEFT JOIN course_student AS cs ON s.id = cs.student_id AND cs.course_code like '%BIO%' WHERE cs.student_id IS NULL;
                        ``` SELECT instructor.name, instructor.salary FROM instructor WHERE instructor.dept_name = 'Physics' AND instructor.salary < (SELECT AVG(instructor.salary) FROM instructor WHERE instructor.dept_name = 'Physics');
                        ``` SELECT instructor.name, instructor.salary FROM instructor WHERE instructor.dept_name = 'Physics' AND instructor.salary < (SELECT AVG(instructor.salary) FROM instructor WHERE instructor.dept_name = 'Physics');
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name ilike '%Computer%Science%';
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name ilike '%Comp.%Sci.%';
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name ilike '%Comp.%Sci.%' AND instructor.salary > 80000;
                        ``` SELECT instructor.name FROM instructor WHERE instructor.dept_name ilike '%Comp.%Sci.%' AND instructor.salary > 80000;
                        ``` SELECT instructor.name FROM instructor WHERE instructor.name ilike '%dar%';
                        ``` SELECT instructor.name FROM instructor WHERE instructor.name ilike '%dar%';
                        ``` SELECT instructor.name FROM instructor ORDER BY instructor.name NULLS LAST;
                        ``` SELECT instructor.name FROM instructor ORDER BY instructor.name NULLS LAST;
                        ``` SELECT DISTINCT course_id FROM section WHERE year IN (2009, 2010) AND semester IN ('Fall', 'Spring');
                        ``` SELECT DISTINCT course_id FROM section WHERE year IN (2009, 2010) AND semester IN ('Fall', 'Spring');
                        ``` SELECT DISTINCT section.course_id FROM section WHERE (section.semester = 'Fall' AND section.year = 2009) OR (section.semester = 'Spring' AND section.year = 2010);
                        ``` SELECT DISTINCT course_id FROM section WHERE year IN (2009, 2010) AND semester IN ('Fall', 'Spring') GROUP BY course_id HAVING COUNT(DISTINCT year) = 2;
                        ``` SELECT DISTINCT section.course_id FROM section WHERE section.semester = 'Fall' AND section.year = 2009 AND section.course_id NOT IN (SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010);
                        ``` SELECT DISTINCT course_id FROM section WHERE semester = 'Fall' AND year = 2009 AND course_id NOT IN (SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010);
                        ``` SELECT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor) GROUP BY instructor.salary;
                        ``` SELECT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor) GROUP BY instructor.salary;
                        ``` SELECT COUNT(DISTINCT teaches.id) AS total_instructors FROM teaches WHERE teaches.semester = 'Spring 2010';
                        ``` SELECT COUNT(DISTINCT teaches.id) AS number_of_instructors FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = 2010;
                        ``` SELECT instructor.name, AVG(instructor.salary) AS average_salary FROM instructor GROUP BY instructor.name HAVING AVG(instructor.salary) > 42000;
                        ``` SELECT instructor.dept_name, AVG(instructor.salary) AS average_salary FROM instructor WHERE instructor.salary > 42000 GROUP BY instructor.dept_name;
                        ``` SELECT i.name FROM instructor i JOIN department d ON i.dept_name = d.name WHERE i.salary > (SELECT salary FROM instructor WHERE dept_name ilike '%Biology%') AND d.name not ilike '%Biology%' ;
                        ``` SELECT i.name FROM instructor AS i WHERE i.salary > (SELECT MIN(b.salary) FROM instructor AS b WHERE b.dept_name = 'Biology');
                        ``` SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT AVG(instructor.salary) FROM instructor WHERE instructor.dept_name ilike '%Biology%');
                        ``` SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT MAX(instructor.salary) FROM instructor WHERE instructor.dept_name ilike '%Biology%')
                        ``` SELECT COUNT(Debate_ID) AS total_debates FROM debate;
                        ``` SELECT debate.venue FROM debate ORDER BY debate.num_of_audience ASC;
                        ``` SELECT date, venue FROM debate;
                        ``` SELECT debate.date FROM debate WHERE debate.num_of_audience > 150;
                        ``` SELECT people.name FROM people WHERE people.age IN (35, 36);
                        ``` SELECT MIN(people.age) AS min_age, COUNT(*)::FLOAT / (SELECT COUNT(*) FROM people) AS proportion FROM people;
                        ``` SELECT p.party, COUNT(*) AS total_people FROM people p GROUP BY p.party;
                        ``` SELECT p.district FROM people p GROUP BY p.district ORDER BY COUNT(p.people_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT debate.venue FROM debate;
                        ``` SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT d.debater_id FROM debates d);
                        ``` SELECT Customers.customer_details FROM Customers ORDER BY Customers.customer_details ASC;
                        ``` SELECT customers.customer_details FROM customers ORDER BY customers.customer_details ASC;
                        ``` SELECT Policies.Policy_Type_Code, COUNT(*) AS frequency FROM Policies GROUP BY Policies.Policy_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code ORDER BY COUNT(Policies.Policy_Type_Code) DESC LIMIT 1;
                        ``` SELECT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code HAVING COUNT(Policies.customer_id) > 2;
                        ``` SELECT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code HAVING COUNT(Policies.customer_id) > 2;
                        ``` SELECT SUM(Amount_Paid) AS total_amount_paid, AVG(Amount_Paid) AS average_amount_paid FROM Claim_Headers;
                        ``` SELECT SUM(Amount_Piad) AS total_amount_paid, AVG(Amount_Piad) AS average_amount_paid FROM Claim_Headers;
                        ``` SELECT Customers.customer_details FROM Customers WHERE Customers.customer_id NOT IN (SELECT policyholders.customer_id FROM policyholders);
                        ``` SELECT Customers.customer_details FROM Customers WHERE Customers.customer_id NOT IN (SELECT Policyholders.customer_id FROM Policyholders);
                        ``` SELECT COUNT(Claim_Stage_ID) AS total_claim_stages FROM Claims_processing_Stages;
                        ``` SELECT COUNT(DISTINCT Next_Claim_Stage_ID) AS number_of_claim_stages FROM Claims_processing_Stages;
                        ``` SELECT Customers.customer_details FROM Customers WHERE Customers.customer_details ilike '%Diana%';
                        ``` SELECT Customers.customer_details FROM Customers WHERE "Diana" ilike '%customers.customer_details%' ;
                        ``` SELECT Customers.customer_details FROM Customers;
                        ``` SELECT c.customer_name, s.staff_name FROM customers AS c CROSS JOIN staff AS s;
                        ``` SELECT p.policy_type_code, COUNT(*) AS record_count FROM policies p GROUP BY p.policy_type_code;
                        ``` SELECT p.policy_type_code, COUNT(*) AS COUNT FROM policies p GROUP BY p.policy_type_code;
                        ``` SELECT Claims_having_Stages.claim_status_description FROM Claims_having_Stations WHERE Claims_having_Stations.claim_status_name = 'Open';
                        ``` SELECT Claims_having_Stages.claim_status_description FROM Claims_having_Stations WHERE Claims_having_Stations.claim_status_name = 'Open';
                        ``` SELECT COUNT(DISTINCT Claims_outstanding.claim_outcome_code) AS number_of_distinct_claim_outcome_codes FROM Claims_outstanding;
                        ``` SELECT COUNT(DISTINCT Claims_outstanding.claim_outcome_code) AS number_of_claim_outcome_codes FROM Claims_outstanding;
                        ``` SELECT COUNT(*) AS account_count FROM Accounts;
                        ``` SELECT COUNT(*) AS account_count FROM Accounts;
                        ``` SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;
                        ``` SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Accounts;
                        ``` SELECT a.account_id, a.date_account_opened, a.account_name, a.other_account_details FROM Accounts AS a;
                        ``` SELECT a.account_id, to_char(a.date_account_opened, 'YYYY-MM-DD') AS account_open_date, a.account_name, a.other_account_details FROM Accounts a;
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT customers.customer_id FROM customers WHERE customers.customer_id NOT IN (SELECT account_customers.customer_id FROM account_customers);
                        ``` SELECT Customers.customer_id FROM Customers WHERE Customers.customer_id NOT IN (SELECT account_holder.customer_id FROM account_holders);
                        ``` SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts a GROUP BY a.customer_id;
                        ``` SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts a GROUP BY a.customer_id;
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT genders.gender_text, COUNT(customers.customer_id) AS customer_count FROM customers JOIN genders ON customers.gender = genders.gender_code GROUP BY genders.gender_text;
                        ``` SELECT genders, COUNT(customer_id) AS number_of_customers FROM customers GROUP BY genders;
                        ``` SELECT COUNT(*) AS total_transactions FROM financial_transactions;
                        ``` SELECT COUNT(*) AS total_transactions FROM Financial_Transactions;
                        ``` SELECT Financial_Transactions.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.account_id;
                        ``` SELECT Financial_Transactions.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.account_id;
                        ``` SELECT AVG(transaction_amount) AS average_transaction_amount, MIN(transaction_amount) AS minimum_transaction_amount, MAX(transaction_amount) AS maximum_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
                        ``` SELECT AVG(transaction_amount) AS average_transaction_amount, MIN(transaction_amount) AS minimum_transaction_amount, MAX(transaction_amount) AS maximum_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
                        ``` SELECT financial_transactions.transaction_id FROM financial_transactions WHERE financial_transactions.transaction_amount > (SELECT AVG(financial_transactions.transaction_amount) FROM financial_transactions);
                        ``` SELECT ft.transaction_id FROM Financial_Transactions ft WHERE ft.transaction_amount > (SELECT AVG(ft.transaction_amount) FROM Financial_Transactions ft);
                        ``` SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type;
                        ``` SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type;
                        ``` SELECT financial_transactions.account_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM financial_transactions GROUP BY financial_transactions.account_id ORDER BY transaction_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Financial_Transactions.account_id, COUNT(Financial_Transactions.transaction_id) AS number_of_transactions FROM Financial_Transactions GROUP BY Financial_Transactions.account_id ORDER BY number_of_transactions DESC NULLS LAST LIMIT 1;
                        ``` SELECT products.product_id, products.product_name, products.product_size FROM products;
                        ``` SELECT DISTINCT Products.product_size FROM Products;
                        ``` SELECT DISTINCT products.product_color FROM products;
                        ``` SELECT DISTINCT products.product_color FROM products;
                        ``` SELECT financial_transactions.invoiceice_number, COUNT(financial_transactions.transaction_id) AS transaction_count FROM financial_transactions GROUP BY financial_transactions.invoiceice_number;
                        ``` SELECT financial_transactions.invoiceice_number, COUNT(*) AS transaction_count FROM financial_transactions GROUP BY financial_transactions.invoiceice_number;
                        ``` SELECT COUNT(*) AS total_invoices FROM Invoices;
                        ``` SELECT COUNT(*) AS total_invoices FROM Invoices;
                        ``` SELECT o.order_id, COUNT(i.invoice_number) AS num_invoices FROM orders o JOIN invoices i ON o.order_id = i.order_id GROUP BY o.order_id;
                        ``` SELECT o.order_id, COUNT(i.invoice_number) AS num_invoices FROM orders o JOIN invoices i ON o.order_id = i.order_id GROUP BY o.order_id;
                        ``` SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT o.product_id FROM Orders o);
                        ``` SELECT p.product_name FROM Products p LEFT JOIN Orders o ON p.product_id = o.product_id WHERE o.product_id IS NULL;
                        ``` SELECT o.order_id, COUNT(oi.product_quantity) AS total_products FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT o.order_id, COUNT(oi.order_item_id) AS total_order_items FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT oi.product_id, COUNT(DISTINCT oi.order_id) AS num_orders FROM order_items oi GROUP BY oi.product_id;
                        ``` SELECT oi.product_id, COUNT(DISTINCT oi.order_id) AS num_orders FROM Order_Items oi GROUP BY oi.product_id;
                        ``` SELECT o.order_id, COUNT(oi.product_id) AS product_count FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id;
                        ``` SELECT o.order_id, COUNT(DISTINCT oi.product_id) AS product_count FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT o.order_id, SUM(oi.product_quantity) AS total_quantity FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT o.order_id, COUNT(oi.product_quantity) AS total_product_quantity FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT COUNT(*) AS total_products FROM Products WHERE product_id NOT IN (SELECT order_product_id FROM Orders);
                        ``` SELECT COUNT(*) AS total_products FROM Products WHERE product_id NOT IN (SELECT order_product_id FROM Orders);
                        ``` SELECT COUNT(*) AS number_of_churches FROM church WHERE open_date < 1850;
                        ``` SELECT c.name, to_char(c.open_date, 'DD-MM-YYYY') AS open_date, co.organized_by FROM church c JOIN continuation co ON c.continuation_of = co.church_id;
                        ``` SELECT c.name FROM church c ORDER BY c.open_date DESC;
                        ``` SELECT EXTRACT(YEAR FROM Open_Date) AS Opening_Year FROM church GROUP BY Opening_Year HAVING COUNT(Church_ID) >= 2;
                        ``` SELECT church.organized_by, church.name FROM church WHERE church.open_date BETWEEN 1830 AND 1840;
                        ``` SELECT date_trunc('year', open_date) AS YEAR_OPENED, COUNT(*) AS number_of_churches FROM church GROUP BY YEAR_OPENED ORDER BY YEAR_OPENED;
                        ``` SELECT c.name, to_char(c.open_date, 'YYYY') AS open_year FROM church c WHERE c.organized_by = 'Catholic' ORDER BY c.open_date DESC NULLS LAST LIMIT 3;
                        ``` SELECT COUNT(*) FROM people WHERE age > 30 AND gender = 'female';
                        ``` SELECT p.country FROM people p WHERE p.age > 30 AND p.age < 25;
                        ``` SELECT MIN(people.age) AS min_age, MAX(people.age) AS max_age, AVG(people.age) AS avg_age FROM people;
                        ``` SELECT p.name, p.country FROM people p WHERE p.age < (SELECT AVG(age) FROM people);
                        ``` SELECT p.name, p.age FROM people p WHERE p.is_male = 'Yes' AND p.people_id NOT IN (SELECT w.people_id FROM weddings w);
                        ``` SELECT c.name FROM church c WHERE c.church_id NOT IN (SELECT w.church_id FROM wedding w WHERE EXTRACT(YEAR FROM w.wedding_date) = 2015);
                        ``` SELECT COUNT(*) AS total_weddings FROM wedding WHERE YEAR = 2016;
                        ``` SELECT p.country, COUNT(*) AS total_people FROM people p GROUP BY p.country;
                        ``` SELECT COUNT(DISTINCT Church_ID) AS number_of_churches FROM wedding WHERE Year = 2016;
                        ``` SELECT COUNT(*) AS total_artists FROM artist;
                        ``` SELECT COUNT(*) AS total_artists FROM artist;
                        ``` SELECT a.name, a.age, a.country FROM artist AS a ORDER BY a.year_join;
                        ``` SELECT a.name, to_char(a.age,'FM9999') AS age, c.country FROM artist a JOIN country c ON a.country = c.code ORDER BY a.year_join;
                        ``` SELECT DISTINCT artist.country FROM artist;
                        ``` SELECT artist.country FROM artist GROUP BY artist.country;
                        ``` SELECT a.name, a.year_join FROM artist a WHERE a.country != 'United States';
                        ``` SELECT artist.name, artist.year_join FROM artist WHERE artist.country != 'United States' ORDER BY artist.name NULLS LAST;
                        ``` SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990;
                        ``` SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990;
                        ``` SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States';
                        ``` SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States';
                        ``` SELECT a.name FROM artist a WHERE a.year_join = (SELECT MAX(year_join) FROM artist);
                        ``` SELECT a.name FROM artist a ORDER BY a.year_join DESC LIMIT 1;
                        ``` SELECT COUNT(Exhibition_ID) AS number_of_exhibitions FROM exhibition WHERE Year >= 2005;
                        ``` SELECT COUNT(Exhibition_ID) FROM exhibition WHERE Year >= 2005;
                        ``` SELECT exhibition.theme, exhibition.year FROM exhibition WHERE exhibition.ticket_priced < 15;
                        ``` SELECT exhibition.theme, CAST(exhibition.year AS text) FROM exhibition WHERE exhibition.ticket_price < 15;
                        ``` SELECT a.name FROM artist a LEFT JOIN exhibition_artist ea ON a.artist_id = ea.artist_id WHERE ea.artist_id IS NULL;
                        ``` SELECT a.name FROM artist a LEFT JOIN exhibition_artist ea ON a.artist_id = ea.artist_id WHERE ea.artist_id IS NULL;
                        ``` SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE year < 2009;
                        ``` SELECT AVG(exhibition.ticket_price), MIN(exhibition.ticket_price), MAX(exhibition.ticket_price) FROM exhibition WHERE exhibition.year < 2009;
                        ``` SELECT exhibition.theme, exhibition.year FROM exhibition ORDER BY exhibition.ticket_price DESC;
                        ``` SELECT exhibition.theme, exhibition.year FROM exhibition ORDER BY exhibition.ticket_price DESC;
                        ``` SELECT a.name FROM artist a LEFT JOIN exhibition e ON a.artist_id = e.artist_id AND EXTRACT(YEAR FROM e.start_date) = 2004 WHERE e.artist_id IS NULL;
                        ``` SELECT a.name FROM artist a LEFT JOIN exhibition e ON a.artist_id = e.artist_id AND EXTRACT(YEAR FROM e.start_date) = 2004 WHERE e.artist_id IS NULL;
                        ``` SELECT i_id FROM item WHERE title ilike '%orange%'
                        ``` SELECT item.i_id, item.title FROM item;
                        ``` SELECT COUNT(*) AS total_reviews FROM review;
                        ``` SELECT COUNT(*) AS total_users FROM useracct;
                        ``` SELECT AVG(rating), MAX(rating) FROM review;
                        ``` SELECT MAX(rank) AS max_rank FROM review;
                        ``` SELECT COUNT(DISTINCT review.u_id) AS number_of_users FROM review;
                        ``` SELECT COUNT(DISTINCT review.i_id) AS number_of_items_reviewed FROM review;
                        ``` SELECT COUNT(*) AS total_items FROM item;
                        ``` SELECT u.name FROM useracct u LEFT JOIN review r ON u.u_id = r.u_id WHERE r.u_id IS NULL;
                        ``` SELECT item.title FROM item ORDER BY item.title ASC;
                        ``` SELECT i.title FROM item i LEFT JOIN review r ON i.i_id = r.item_id WHERE r.item_id IS NULL;
                        ``` SELECT useracct.name FROM useracct WHERE useracct.u_id NOT IN (SELECT reviewer_id FROM review);
                        ``` SELECT COUNT(*) AS total_users FROM useracct WHERE u_id NOT IN (SELECT reviewer_u_id FROM reviews);
                        ``` SELECT COUNT(*) AS total_items_without_reviews FROM item;
                        ``` SELECT COUNT(*) AS total_players FROM player;
                        ``` SELECT player.player_name FROM player ORDER BY player.votes ASC;
                        ``` SELECT player.gender, player.occupation FROM player;
                        ``` SELECT player.player_name, player.residence FROM player WHERE "Occupation" != 'Researcher';
                        ``` SELECT player.sponsor_name FROM player WHERE (player.residence = 'Brandon' OR player.residence = 'Birtle');
                        ``` SELECT p.player_name, COUNT(v.vote_id) AS vote_count FROM player p JOIN vote v ON p.player_id = v.player_id GROUP BY p.player_name ORDER BY vote_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT player.occupation, COUNT(*) AS total_play FROM player GROUP BY player.occupation ORDER BY total_play DESC NULLS LAST;
                        ``` SELECT player.occupation FROM player GROUP BY player.occupation ORDER BY COUNT(player.occupation) DESC NULLS LAST LIMIT 1;
                        ``` SELECT residence FROM player GROUP BY residence HAVING COUNT(player_id) >= 2;
                        ``` SELECT player.player_name FROM player WHERE player.player_id NOT IN (SELECT coach.coach_player_id FROM coach);
                        ``` SELECT DISTINCT residence FROM player WHERE gender IN ('M', 'F');
                        ``` SELECT COUNT(*) AS total_gymnasts FROM gymnast;
                        ``` SELECT COUNT(*) FROM gymnast;
                        ``` SELECT gymnast.gymnast_id, SUM(gymnast.floor_exercise_points + gymnast.pommel_horse_points + gymnast.rings_points + gymnast.vault_points + gymnast.parallel_bars_points + gymnast.horizontal_bar_points) AS total_points FROM gymnast GROUP BY gymnast.gymnast_id ORDER BY total_points DESC NULLS LAST;
                        ``` SELECT gymnast_id, total_points FROM gymnast ORDER BY total_points DESC;
                        ``` SELECT gymnast_id, total_points FROM gymnast ORDER BY floor_exercise_points DESC;
                        ``` SELECT gymnast.gymnast_id, gymnast.floor_exercise_points FROM gymnast ORDER BY gymnast.floor_exercise_points DESC;
                        ``` SELECT AVG(gymnast.horizontal_bar_points) AS average_horizontal_bar_points FROM gymnast;
                        ``` SELECT AVG(gymnast.horizontal_bar_points) AS average_horizontal_bar_points FROM gymnast;
                        ``` SELECT people.name FROM people ORDER BY people.name ASC;
                        ``` SELECT p.name FROM people p ORDER BY p.name ASC;
                        ``` SELECT MAX(people.age) AS oldest_person_age FROM people;
                        ``` SELECT people.name, MAX(people.height) AS max_height, people.age FROM people GROUP BY people.name, people.age HAVING MAX(people.height) = (SELECT MAX(height) FROM people);
                        ``` SELECT p.name FROM people p ORDER BY p.age DESC NULLS LAST LIMIT 5;
                        ``` SELECT p.name FROM people p ORDER BY p.age DESC NULLS LAST LIMIT 5;
                        ``` SELECT DISTINCT people.homeowner FROM people WHERE people.homeowner NOT IN (SELECT gymnasts.homeowner FROM gymnasts);
                        ``` SELECT people.hearth FROM people WHERE people.hearth IS NULL;
                        ``` SELECT p.hearth FROM people p WHERE p.age > 23 AND p.age < 20;
                        ``` SELECT DISTINCT people.hearth FROM people WHERE age > 23 AND age < 20;
                        ``` SELECT COUNT(DISTINCT people.hometown) AS number_of_homes FROM people;
                        ``` SELECT COUNT(DISTINCT people.hometown) AS num_homes FROM people;
                        ``` SELECT COUNT(*) AS total_accounts FROM accounts;
                        ``` SELECT COUNT(*) AS account_count FROM accounts;
                        ``` SELECT SUM(checking.balance) AS total_balance FROM checking;
                        ``` SELECT SUM(checking.balance) AS total_balance FROM checking;
                        ``` SELECT AVG(checking.balance) AS average_balance FROM checking;
                        ``` SELECT AVG(checking.balance) AS average_balance FROM checking;
                        ``` SELECT COUNT(*) AS account_count FROM SAVINGS WHERE savings > (SELECT AVG(savings) FROM SAVINGS);
                        ``` SELECT COUNT(*) AS account_count FROM SAVINGS WHERE savings.balance > (SELECT AVG(savings.balance) FROM savings);
                        ``` SELECT accounts.name FROM accounts ORDER BY accounts.name ASC;
                        ``` SELECT accounts.name FROM accounts ORDER BY accounts.name ASC;
                        ``` SELECT COUNT(*) FROM browser WHERE market_share >= 5;
                        ``` SELECT browser.name FROM browser ORDER BY browser.market_share DESC;
                        ``` SELECT browser.id AS "Browser ID", browser.name AS "Browser Name", browser.market_share AS "Market Share" FROM browser;
                        ``` SELECT MAX(market_share) AS max_market_share, MIN(market_share) AS min_market_share, AVG(market_share) AS avg_market_share FROM browser WHERE name IN ('Internet Explorer', 'Firefox', 'Safari');
                        ``` SELECT browser.id, browser.market_share FROM browser WHERE browser.name ilike '%Safari%'
                        ``` SELECT Web_client_accelerator.name, Web_client_accelerator.os FROM Web_client_accelerator WHERE Web_client_accelerator.connection != 'Broadband';
                        ``` SELECT COUNT(DISTINCT Web_client_accelerator.client) AS client_count FROM Web_client_accelerator;
                        ``` SELECT COUNT(*) AS incompatible_accelerators FROM Web_client_accelerator WHERE name NOT IN (SELECT browser FROM Browser_list);
                        ``` SELECT Web_client_accelerator.name, Web_client_accelerator.operating_system FROM Web_client_accelerator WHERE "Operating system" != 'Opera' ORDER BY Web_client_accelerator.name NULLS LAST;
                        ``` SELECT Web_client_accelerator.name FROM Web_client_accelerator WHERE Web_client_accelerator.name ilike '%Opera%';
                        ``` SELECT Web_client_accelerator.operating_system, COUNT(*) AS total_web_accelerators FROM Web_client_accelerator GROUP BY Web_client_accelerator.operating_system;
                        ``` SELECT COUNT(*) AS total_wrestlers FROM wrestler;
                        ``` SELECT COUNT(*) AS total_wrestlers FROM wrestler;
                        ``` SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held DESC;
                        ``` SELECT wrestler.name FROM wrestler ORDER BY CAST(wrestler.days_held AS FLOAT) DESC;
                        ``` SELECT wrestler.name FROM wrestler ORDER BY CAST(wrestler.days_held AS FLOAT) ASC LIMIT 1;
                        ``` SELECT wrestler.name FROM wrestler ORDER BY CAST(wrestler.days_held AS FLOAT) ASC LIMIT 1;
                        ``` SELECT COUNT(Reign) AS total_reigns FROM wrestler WHERE "Location" != 'Tokyo,Japan';
                        ``` SELECT Wrestler_ID, Name, Reign, CAST(Days_held AS FLOAT) / NULLIF(COUNT(*), 0) OVER (PARTITION BY Wrestler_ID) AS fraction_of_days_reigned FROM wrestler WHERE "Location" != 'Tokyo, Japan' GROUP BY Wrestler_ID, Name, Reign;
                        ``` SELECT wrestler.name, wrestler.location FROM wrestler;
                        ``` SELECT wrestler.name, wrestler.location FROM wrestler;
                        ``` SELECT Eliminations.Eliminations_Move FROM Eliminations WHERE Eliminations.Team = 'Team Orton';
                        ``` SELECT Eliminations.Eliminations_Move FROM Eliminations WHERE Eliminations.Team = 'Orton';
                        ``` SELECT e.team, COUNT(e.eliminations_id) AS num_eliminations FROM eliminations e GROUP BY e.team;
                        ``` SELECT Team, COUNT(Eliminations_ID) AS num_eliminations FROM Eliminations GROUP BY Team;
                        ``` SELECT DISTINCT Eliminations.Team FROM Eliminations GROUP BY Eliminations.Team HAVING COUNT(Elimitations.Eliminations_ID) > 3;
                        ``` SELECT Eliminations.Team FROM Eliminations GROUP BY Eliminations.Team HAVING COUNT(Eliminations.Eliminations_ID) > 3;
                        ``` SELECT wrestler.reign, CAST(wrestler.days_held AS FLOAT) AS days_held FROM wrestler;
                        ``` SELECT wrestler.name, COUNT(wrestler_id) AS number_of_reigns, SUM(days_held::integer) AS total_days_held FROM wrestler GROUP BY wrestler.name;
                        ``` SELECT wrestler.name FROM wrestler WHERE CAST(wrestler.days_held AS FLOAT) < 100;
                        ``` SELECT wrestler.name FROM wrestler WHERE CAST(wrestler.days_held AS FLOAT) < 100;
                        ``` SELECT wrestler.reign, COUNT(*) AS frequency FROM wrestler GROUP BY wrestler.reign ORDER BY frequency DESC NULLS LAST;
                        ``` SELECT wrestler.reign FROM wrestler GROUP BY wrestler.reign ORDER BY COUNT(wrestler.reign) DESC NULLS LAST LIMIT 1;
                        ``` SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(wrestler.wrestler_id) > 2;
                        ``` SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(wrestler.wrestler_id) > 2;
                        ``` SELECT wrestler.name FROM wrestler WHERE wrestler.reign != 'eliminated';
                        ``` SELECT wrestler.name FROM wrestler WHERE wrestler.reign not ilike '%eliminated%' ORDER BY wrestler.name NULLS LAST;
                        ``` SELECT DISTINCT Eliminations.Team FROM Eliminations WHERE Eliminations.Eliminated_By ILIKE '%Orton%' AND Eliminations.Eliminated_by ILIKE '%Benjamin%';
                        ``` SELECT DISTINCT Eliminations.Team FROM Eliminations WHERE "Eliminated By" ILIKE '%Orton%' AND "Eliminated By" ILIKE '%Benjamin%' ORDER BY Eliminations.Team NULLS LAST;
                        ``` SELECT COUNT(DISTINCT Team) AS num_teams FROM Eliminations;
                        ``` SELECT COUNT(DISTINCT Eliminations.Team) AS number_of_teams FROM Eliminations;
                        ``` SELECT Eliminations.Time FROM Eliminations WHERE (Eliminations.Wrestler_ID = 'Punk' OR Eliminations.Wrestler_ID = 'Orton') AND Eliminations.Team IS NOT NULL;
                        ``` SELECT Eliminations.Time FROM Eliminations WHERE Eliminations.Eliminated_By IN ('Punk', 'Orton');
                        ``` SELECT COUNT(*) AS number_of_schools FROM school;
                        ``` SELECT COUNT(*) FROM School;
                        ``` SELECT School_name FROM School ORDER BY school_name ASC;
                        ``` SELECT school.school_name, school.location, school.mascot FROM school;
                        ``` SELECT SUM(Enrollment) AS total_enrollment, AVG(Enrollment) AS average_enrollment FROM School;
                        ``` SELECT School.mascot FROM school WHERE school.enrollment > (SELECT AVG(enrollment) FROM school);
                        ``` SELECT School_name FROM School ORDER BY enrollment ASC LIMIT 1;
                        ``` SELECT AVG(Enrollment) AS average_enrollment, MAX(Enrollment) AS max_enrollment, MIN(Enrollment) AS min_enrollment FROM School;
                        ``` SELECT COUNT(school_id) AS school_count, SUM(enrollment) AS total_enrollment FROM school GROUP BY county;
                        ``` SELECT endowment.donator_name, SUM(endowment.amount) AS total_amount FROM endowment GROUP BY endowment.donator_name ORDER BY total_amount DESC;
                        ``` SELECT School_name FROM school WHERE "Location" not ilike '%Ave%' ORDER BY "School Name" NULLS LAST;
                        ``` SELECT endowment.donator_name FROM endowment WHERE endowment.amount >= 9;
                        ``` SELECT endowment.donator_name, endowment.amount FROM endowment ORDER BY endowment.amount DESC LIMIT 1;
                        ``` SELECT COUNT(*) AS total_budgets FROM budget WHERE budgeted > 3000 AND year <= 2001;
                        ``` SELECT COUNT(*) FROM budget WHERE year <= 2001 AND budget > 3000;
                        ``` SELECT endowment.donor_name FROM endowment;
                        ``` SELECT COUNT(*) FROM budget WHERE budget.budgeted < budget.invested;
                        ```failure
 SELECT COUNT(building_id) AS total_buildings FROM building;
                        ``` SELECT building.name, building.street_address, COUNT(floor) AS floor_count FROM building GROUP BY building.name, building.street_address ORDER BY floor_count DESC NULLS LAST;
                        ``` SELECT MAX(Heigh_Feet) AS max_height FROM Building;
                        ``` SELECT AVG(heath_feet) AS average_heath_floors, MAX(heath_floors) AS max_heath_floors, MIN(heath_floors) AS min_heath_floors FROM building;
                        ``` SELECT COUNT(*) FROM building WHERE (heigh_floors > (SELECT AVG(heigh_floors) FROM building)) OR (number_of_floors > (SELECT AVG(number_of_floors) FROM building));
                        ``` SELECT building.name FROM building WHERE building.height_feet >= 200 AND building.floors >= 20;
                        ``` SELECT Institution.Institution, Institution.location FROM Institution WHERE Institution.founded > '1990' AND Institution.type ilike '%Private%';
                        ``` SELECT Institution.type, COUNT(Institution.institution_id) AS num_institutions, SUM(institution.enrollment) AS total_enrollment FROM institution GROUP BY institution.type;
                        ``` SELECT Institution.type, COUNT(Institution_id) AS num_institutions FROM Institution GROUP BY Institution.type ORDER BY num_institutions DESC LIMIT 1;
                        ``` SELECT Institution.type FROM Institution WHERE Institution.founded > '1990' AND Institution.enrollment >= '1000' ORDER BY Institution.type NULLS LAST;
                        ``` SELECT building.name FROM building LEFT JOIN institution ON building.building_id = institution.building_id WHERE institution.building_id IS NULL;
                        ``` SELECT building.name FROM building WHERE CAST(building.years_as_tallest AS integer) != 2003;
                        ``` SELECT DISTINCT Institution.type FROM Institution;
                        ``` SELECT COUNT(*) AS number_of_institutions FROM Institution WHERE Institution_id NOT IN (SELECT Protein.Institution_id FROM Protein);
                        ``` SELECT DISTINCT LOCATION FROM CINEMA WHERE CAPacity > 800;
                        ``` SELECT DISTINCT cinema.location FROM cinema WHERE cinema.opening_year IN (2010, 2011);
                        ``` SELECT COUNT(Cinema_ID) AS number_of_cinemas FROM cinema;
                        ``` SELECT COUNT(Cinema_ID) AS total_cinemas FROM cinema;
                        ``` SELECT c.name, c.opening_year, c.capacity FROM cinema c;
                        ``` SELECT c.name, c.location FROM cinema c WHERE c.capacity > (SELECT AVG(capacity) FROM cinema);
                        ``` SELECT DISTINCT cinema.location FROM cinema;
                        ``` SELECT DISTINCT cinema.location FROM cinema;
                        ``` SELECT c.name, c.opening_year FROM cinema c ORDER BY c.opening_year DESC;
                        ``` SELECT cinema.name, cinema.location FROM cinema ORDER BY cinema.capacity DESC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE open_year >= 2011;
                        ``` SELECT cinema.location, COUNT(cinema.cinema_id) AS number_of_cinemas FROM cinema GROUP BY cinema.location;
                        ``` SELECT cinema.location, COUNT(cinema.cinema_id) AS number_of_cinemas FROM cinema WHERE cinema.opening_year >= 2010 GROUP BY cinema.location ORDER BY number_of_cinemas DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) >= 2;
                        ``` SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) >= 2;
                        ``` SELECT film.title, film.directed_by FROM film;
                        ``` SELECT film.title, film.directed_by FROM film;
                        ``` SELECT DISTINCT film.directed_by FROM film;
                        ``` SELECT DISTINCT film.directed_by FROM film;
                        ``` SELECT film.directed_by, COUNT(film.title) AS num_films FROM film GROUP BY film.directed_by;
                        ``` SELECT film.title, film.directed_by FROM film WHERE film.original_air_date IS NULL;
                        ``` SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) > 1;
                        ``` SELECT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) > 1;
                        ``` SELECT COUNT(*) FROM film WHERE title ilike '%Dummy%';
                        ``` SELECT COUNT(*) FROM film WHERE title ilike '%Dummy%';
                        ``` SELECT p.customer_id, SUM(p.amount_paid) AS total_amount_paid FROM Payments p GROUP BY p.customer_id ORDER BY total_amount_paid DESC NULLS LAST;
                        ``` SELECT p.product_id FROM Products_Booked p WHERE p.booked_count >= 3;
                        ``` SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products_for_Hire;
                        ``` SELECT c.first_name, c.last_name, c.gender_mf FROM Customers c WHERE c.good_or_bad_customer = 'Good' ORDER BY c.last_name;
                        ``` SELECT AVG(payments.amount_due) AS average_amount_due FROM payments;
                        ``` SELECT MAX(booked_count) AS max_booked_count, MIN(booked_count) AS min_booked_count, AVG(booked_count) AS avg_booked_count FROM Products_Booked;
                        ``` SELECT DISTINCT Payments.payment_type_code FROM Payments;
                        ``` SELECT Products_for_Hire.product_id, Products_for_Hire.daily_hire_cost FROM Products_for_Hire WHERE Products_for_Hire.product_name ilike '%Book%';
                        ``` SELECT COUNT(*) FROM Products_for_Hire WHERE daily_hire_cost <= 200;
                        ``` SELECT Payments.payment_date FROM Payments WHERE (Payments.amount_paid > 300 OR Payments.payment_type_code = 'check')
                        ``` SELECT p.product_name, p.product_description FROM Products_for_Hire p WHERE p.product_type_code = 'Cutlery' AND p.daily_hire_cost < 20;
                        ``` SELECT COUNT(Phone_ID) AS total_phones FROM phone;
                        ``` SELECT phone.name FROM phone ORDER BY phone.price ASC;
                        ``` SELECT phone.memory_in_g, phone.carrier FROM phone;
                        ``` SELECT DISTINCT phone.carrier FROM phone WHERE phone.memory_in_g > 32;
                        ``` SELECT phone.name FROM phone WHERE phone.carrier IN ('Sprint', 'TMobile');
                        ``` SELECT phone.carrier FROM phone WHERE price = (SELECT MAX(price) FROM phone);
                        ``` SELECT phone.carrier, COUNT(phone.phone_id) AS number_of_phones FROM phone GROUP BY phone.carrier;
                        ``` SELECT phone.carrier, COUNT(*) AS frequency FROM phone GROUP BY phone.carrier ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT phone.carrier FROM phone WHERE (phone.memory_in_g < 32 AND phone.memory_in_g > 64) GROUP BY phone.carrier;
                        ``` SELECT phone.name FROM phone WHERE phone.carrier IS NULL;
                        ``` SELECT COUNT(*) AS number_of_gas_companies FROM company WHERE main_industry ilike '%gas%';
                        ``` SELECT COUNT(*) AS total_companies FROM company;
                        ``` SELECT c.company, c.rank FROM company c ORDER BY c.sales_billion DESC;
                        ``` SELECT c.company_id, c.rank, c.company FROM company c ORDER BY c.sales_billion DESC;
                        ``` SELECT c.company, c.main_industry FROM company c WHERE c.headquarters != 'USA';
                        ``` SELECT company.company, company.main_industry FROM company WHERE company.headquarters != 'United States' ORDER BY company.company NULLS LAST;
                        ``` SELECT c.company, c.headquarters FROM company c ORDER BY c.market_value DESC;
                        ``` SELECT company.company, company.headquarters FROM company ORDER BY company.market_value DESC;
                        ``` SELECT MIN(market_value) AS min_market_value, MAX(market_value) AS max_market_value, AVG(market_value) AS avg_market_value FROM company;
                        ``` SELECT c.company_id, MIN(c.market_value) AS min_market_value, MAX(c.market_value) AS max_market_value, AVG(c.market_value) AS avg_market_value FROM company c GROUP BY c.company_id;
                        ``` SELECT company.main_industry FROM company;
                        ``` SELECT company.main_industry FROM company GROUP BY company.main_industry;
                        ``` SELECT headquarters, COUNT(*) AS company_count FROM company GROUP BY headquarters;
                        ``` SELECT headquarters, COUNT(*) AS company_count FROM company GROUP BY headquarters;
                        ``` SELECT c.company, CAST(c.market_value AS FLOAT) / NULLIF(SUM(c.market_value), 0) OVER (PARTITION BY c.main_industry) AS fraction FROM company c;
                        ``` SELECT c.company_id, c.main_industry, SUM(c.market_value) AS total_market_value FROM company c GROUP BY c.company_id, c.main_industry;
                        ``` SELECT company.main_industry, SUM(company.market_value) AS total_market_value, COUNT(*) AS num_companies FROM company GROUP BY company.main_industry ORDER BY total_market_value DESC NULLS LAST, num_companies DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.main_industry, COUNT(*) AS num_companies FROM company c GROUP BY c.main_industry ORDER BY num_companies DESC LIMIT 1;
                        ``` SELECT headquarters FROM company WHERE main_industry ilike '%banking%' GROUP BY headquarters HAVING COUNT(company_id) >= 2;
                        ``` SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ilike '%banking%' GROUP BY company.headquarters HAVING COUNT(company.company_id) >= 2;
                        ``` SELECT g.station_id, g.location, g.manager_name FROM gas_station g ORDER BY g.open_year;
                        ``` SELECT g.station_id, g.location, g.manager_name FROM gas_station g ORDER BY g.open_year;
                        ``` SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;
                        ``` SELECT COUNT(*) AS total_stations FROM gas_station WHERE open_year BETWEEN 2000 AND 2005;
                        ``` SELECT g.location, COUNT(*) AS station_count FROM gas_station g GROUP BY g.location ORDER BY h.location NULLS LAST;
                        ``` SELECT gas_station.location, COUNT(gas_station.station_id) AS station_count FROM gas_station GROUP BY gas_station.location ORDER BY gas_station.location NULLS LAST;
                        ``` SELECT DISTINCT c.headquarters FROM company c WHERE c.main_industry ilike '%banking%' AND c.main_industry ilike '%oil and gas%';
                        ``` SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ilike '%banking%' AND company.main_industry ilike '%oil and gas%';
                        ``` SELECT headquarters FROM company WHERE main_industry not ilike '%banking%'
                        ``` SELECT company.headquarters FROM company WHERE company.main_industry not ilike '%banking%' AND company.company IS NOT NULL;
                        ``` SELECT c.company, c.main_industry FROM company c WHERE c.assets_billion IS NULL;
                        ``` SELECT company.main_industry, company.company FROM company WHERE company.assets_billion IS NULL;
                        ``` SELECT m.manager_name, COUNT(*) AS station_count FROM gas_station g JOIN manager m ON g.manager_name = m.manager_name WHERE open_year > 2000 GROUP BY m.manager_name ORDER BY count DESC NULLS LAST LIMIT 1;
                        ``` SELECT m.manager_name, COUNT(*) AS number_of_stations FROM gas_station g JOIN manager m ON g.manager_name = m.manager_name WHERE open_year > 2000 GROUP BY m.manager_name ORDER BY number_of_stations DESC LIMIT 1;
                        ``` SELECT gas_station.location, gas_station.open_year FROM gas_station ORDER BY gas_station.open_year NULLS LAST;
                        ``` SELECT g.location, CAST(g.open_year AS FLOAT) AS open_year FROM gas_station g ORDER BY open_year NULLS LAST;
                        ``` SELECT c.company_id, c.rank, c.company, row_number() OVER (PARTITION BY c.main_industry ORDER BY c.sales_billion DESC, c.profits_billion ASC) AS rank_within_industry FROM company c WHERE main_industry = 'banking';
                        ``` SELECT c.company_id, c.rank, c.company, c.sales_billion, c.profits_billion, c.market_value FROM company c WHERE main_industry = 'banking' ORDER BY sales_billion DESC, profits_billion DESC;
                        ``` SELECT COUNT(Region_ID) AS region_count FROM Region;
                        ``` SELECT COUNT(*) FROM region;
                        ``` SELECT DISTINCT region.region_name FROM region ORDER BY region.label NULLS LAST;
                        ``` SELECT region.region_name FROM region ORDER BY region.label;
                        ``` SELECT COUNT(*) AS total_parties FROM party;
                        ``` SELECT COUNT(DISTINCT party.party_id) AS number_of_parties FROM party;
                        ``` SELECT party.minister, party.took_office, party.left_office FROM party ORDER BY party.left_office NULLS LAST;
                        ``` SELECT party.minister, party.took_office, party.left_office FROM party ORDER BY party.left_office DESC;
                        ``` SELECT party.minister FROM party WHERE CAST(party.took_office AS DATE) > '1961-01-01' AND CAST(party.took_office AS DATE) < '1959-12-31';
                        ``` SELECT party.minister FROM party WHERE CAST(party.took_office AS DATE) > '1960-01-01' AND CAST(party.took_office AS DATE) < '1959-12-31';
                        ``` SELECT p.minister FROM party p WHERE 'Progress' NOT IN (p.left_office, p.right_office);
                        ``` SELECT p.minister FROM party p LEFT JOIN progress_party pr ON p.party_id = pr.party_id WHERE pr.party_id IS NULL;
                        ``` SELECT p.minister, row_number() OVER (PARTITION BY p.party_id ORDER BY p.took_office DESC) AS rank FROM party p;
                        ``` SELECT p.minister, COUNT(*) OVER (PARTITION BY p.minister) AS total_parties FROM party p GROUP BY p.minister ORDER BY total_parties DESC;
                        ``` SELECT party.minister FROM party WHERE party.left_office = (SELECT MAX(party.start_office) FROM party);
                        ``` SELECT party.minister FROM party WHERE party.left_office = (SELECT MAX(party.left_office) FROM party);
                        ``` SELECT p.party_name FROM party p LEFT JOIN member m ON p.party_id = m.party_id WHERE m.member_id IS NULL;
                        ``` SELECT p.party_name FROM party p LEFT JOIN member m ON p.party_id = m.party_id WHERE m.member_id IS NULL;
                        ``` SELECT m.member_name FROM member m WHERE m.member_id IN (SELECT p.member_id FROM party p WHERE p.party_id = 3) AND m.member_id IN (SELECT q.member_id FROM party q WHERE q.party_id = 1);
                        ``` SELECT m1.member_name FROM member m1 JOIN member m2 ON (m1.member_id = m2.member_id AND m1.party_id != m2.party_id) WHERE m1.party_id IN (3, 1);
                        ``` SELECT COUNT(*) AS total_events FROM party_events;
                        ``` SELECT COUNT(*) AS num_events FROM party_events;
                        ``` SELECT m.member_name FROM member m LEFT JOIN event e ON m.member_id = e.member_id WHERE e.member_id IS NULL;
                        ``` SELECT member.member_name FROM member WHERE member.member_id NOT IN (SELECT event.member_id FROM event);
                        ``` SELECT party_events.event_name FROM party_events GROUP BY party_events.event_name HAVING COUNT(party_events.event_id) > 2;
                        ``` SELECT DISTINCT event_name FROM party_events WHERE event_id IN (SELECT event_id FROM party_events GROUP BY event_id HAVING COUNT(event_id) > 2);
                        ``` SELECT COUNT(*) AS total_pilots FROM pilot;
                        ``` SELECT pilot.pilot_name FROM pilot ORDER BY pilot.rank ASC;
                        ``` SELECT pilot.position, pilot.team FROM pilot;
                        ``` SELECT DISTINCT pilot.position FROM pilot WHERE pilot.age > 30;
                        ``` SELECT pilot.pilot_name FROM pilot WHERE pilot.team IN ('Bradley', 'Fordham');
                        ``` SELECT MAX(pilot.join_year) AS max_join_year FROM pilot;
                        ``` SELECT pilot.nationality, COUNT(*) AS num_pilots FROM pilot GROUP BY pilot.nationality;
                        ``` SELECT pilot.nationality, COUNT(pilot.nationality) AS frequency FROM pilot GROUP BY pilot.nationality ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT pilot.position FROM pilot WHERE (pilot.join_year > 2005 AND pilot.join_year < 2000) GROUP BY pilot.position;
                        ``` SELECT pilot.pilot_name FROM pilot WHERE pilot.pilot_id IS NULL;
                        ``` SELECT Ref_Document_Status.document_status_code FROM Ref_Document_Status;
                        ``` SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status WHERE Ref_Document_Status.document_status_code = 'working';
                        ``` SELECT Ref_Document_Types.document_type_code FROM Ref_Document_Types;
                        ``` SELECT Ref_Document_Types.document_type_description FROM Ref_Document_Types WHERE Ref_Document_Types.document_type_code = 'Paper';
                        ``` SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents;
                        ``` SELECT Ref_Shipping_Agents.shipping_agent_code FROM Ref_Shipping_Internts WHERE "Ref_Shipping_Agent" ILIKE '%Ups%';
                        ``` SELECT roles.role_code FROM roles;
                        ``` SELECT roles_description FROM roles WHERE role_code = 'ED';
                        ``` SELECT COUNT(employee_id) AS total_employees FROM Employees;
                        ``` SELECT Documents.document_id, Documents.receipt_date FROM Documents;
                        ``` SELECT COUNT(*) AS total_documents_with_status_code_done FROM Documents WHERE document_status_code = 'done';
                        ``` SELECT Documents.document_type_code FROM Documents WHERE Documents.document_id = 2;
                        ``` SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = 'done' AND Documents.document_type_code = 'paper';
                        ``` SELECT Documents.receipt_date FROM Documents WHERE Documents.document_id = 3;
                        ``` SELECT Documents_Mailed.mailing_date FROM Documents_Mailed WHERE Documents_Mailed.document_id = 7;
                        ``` SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = 'done' AND Documents.document_type_code = 'Paper' AND Documents.shipping_agent_code != 'USPS';
                        ``` SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = 'done' AND Documents.document_type_code = 'Paper' AND Documents.shipping_agent_code = 'USPS';
                        ``` SELECT Document_Drafts.draft_details FROM Document_Drafts WHERE Document_Drafts.document_id = 7;
                        ``` SELECT COUNT(*) AS total_copies FROM draft_copies WHERE document_id = 2;
                        ``` SELECT dc.document_id, COUNT(*) AS copy_number FROM Draft_Copies dc GROUP BY dc.document_id ORDER BY copy_number DESC NULLS LAST LIMIT 1;
                        ``` SELECT document_id, copy_number FROM Draft_Copies WHERE copy_number > 1;
                        ``` SELECT e.employee_name FROM Employees e LEFT JOIN Document_Circulation_History dch ON e.employee_id = dch.employee_id WHERE dch.employee_id IS NULL;
                        ``` SELECT c.document_id, COUNT(DISTINCT ch.employee_id) AS employee_count FROM Circulation_History ch JOIN Catalog c ON ch.document_id = c.document_id GROUP BY c.document_id;
                        ``` SELECT d.dname FROM department d ORDER BY d.mgr_start_date;
                        ``` SELECT dependent.dependent_name FROM dependent WHERE dependent.relationship = 'spouse';
                        ``` SELECT COUNT(*) FROM dependent WHERE sex = 'female';
                        ``` SELECT e.fname, e.lname FROM employee e WHERE e.salary > 30000;
                        ``` SELECT employee.sex, COUNT(employee.lname) AS total_count FROM employee WHERE employee.salary < 50000 GROUP BY employee.sex;
                        ``` SELECT employee.fname, employee.lname, employee.address FROM employee ORDER BY employee.bdate ASC;
                        ``` SELECT p.participant_id, p.participant_type_code, p.participant_details FROM participants p;
                        ``` SELECT COUNT(*) AS total_organizers FROM Participants WHERE Participant_Type_Code ilike '%Organizer%';
                        ``` SELECT Services.Service_Type_Code FROM Services ORDER BY Services.Service_Type_Code ASC;
                        ``` SELECT Events.service_id, Events.event_details FROM Events;
                        ``` SELECT Participants.Participant_Type_Code, COUNT(*) AS frequency FROM Participants GROUP BY Participants.Participant_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(Event_ID) AS max_event_id FROM Participants_in_Events;
                        ``` SELECT Events.Event_ID FROM Events WHERE Events.Event_Details not ilike '%Kenyatta%Kushn%'
                        ``` SELECT COUNT(*) AS num_events_without_participants FROM Events;
                        ``` SELECT DISTINCT Participants_in_Events.Participant_ID FROM Participants_in_Events;
                        ``` SELECT races.name FROM races ORDER BY races.year DESC NULLS LAST LIMIT 1;
                        ``` SELECT races.name FROM races ORDER BY races.year DESC NULLS LAST LIMIT 1;
                        ``` SELECT races.name, to_date(races.date, 'YYYY-MM-DD') AS race_date FROM races ORDER BY to_date(races.date, 'YYYY-MM-DD') DESC LIMIT 1;
                        ``` SELECT races.name, to_date(races.date,'YYYY-MM-DD') AS race_date FROM races WHERE races.year = (SELECT MAX(races.year) FROM races) ORDER BY races.raceId DESC LIMIT 1;
                        ``` SELECT name FROM races WHERE year = 2017;
                        ``` SELECT races.name FROM races WHERE races.year = 2017;
                        ``` SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2014 AND 2017;
                        ``` SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2014 AND 2017;
                        ``` SELECT COUNT(DISTINCT drivers.driverId) AS total_drivers FROM drivers LEFT JOIN race_results ON drivers.driverId = race_results.driverId AND race_results.raceId IN (SELECT raceId FROM races WHERE year = 2009);
                        ``` SELECT COUNT(DISTINCT constructors.constructorId) AS number_of_drivers FROM constructors LEFT JOIN races ON constructors.constructorId = races.constructorId AND races.raceDate BETWEEN to_date('2009-01-01', 'YYYY-MM-DD') AND to_date('2009-12-31', 'YYYY-MM-DD') WHERE races.raceId IS NULL;
                        ``` SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality ilike '%German%';
                        ``` SELECT forename, surname FROM drivers WHERE nationality = 'German' ORDER BY forename ASC, surname ASC;
                        ``` SELECT nationality, COUNT(*) AS number_of_constructors FROM constructors GROUP BY nationality;
                        ``` SELECT nationality, COUNT(DISTINCT constructorId) AS num_constructors FROM constructors GROUP BY nationality;
                        ``` SELECT c.constructorId, COUNT(cs.raceId) AS race_count FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId GROUP BY c.constructorId;
                        ``` SELECT c.constructorId, COUNT(r.raceId) AS race_count FROM constructorStandings c JOIN race r ON c.raceId = r.raceId GROUP BY c.constructorId;
                        ``` SELECT p.driverId, p.stop FROM pitStops p WHERE p.raceId = 841 ORDER BY p.duration ASC NULLS LAST;
                        ``` SELECT p.raceId AS race_id, p.stop AS previous_stop, d.stop AS next_stop FROM pitStops p JOIN (SELECT MIN(stop) AS next_stop FROM pitStops WHERE raceId != 841) d ON TRUE;
                        ``` SELECT DISTINCT ps.driver_id FROM pitStops ps WHERE ps.race_id = 841 AND ps.stop > (SELECT AVG(ps2.stop) FROM pitStops ps2 WHERE ps2.race_id = 841);
                        ``` SELECT p.driverId, to_number(p.stop,'99999999') AS stop FROM pitStops p WHERE to_number(p.duration,'99999999') > (SELECT duration FROM pitStops WHERE raceId = 841)
                        ``` SELECT DISTINCT drivers.forename FROM drivers ORDER BY drivers.forename ASC;
                        ``` SELECT drivers.forename FROM drivers GROUP BY drivers.forename ORDER BY drivers.forename ASC;
                        ``` SELECT DISTINCT name FROM races ORDER BY name DESC;
                        ``` SELECT reverse(races.name) AS name FROM races GROUP BY reverse(races.name);
                        ``` SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2009 AND 2011;
                        ``` SELECT races.name FROM races WHERE races.year BETWEEN 2009 AND 2011;
                        ``` SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';
                        ``` SELECT races.name FROM races WHERE (races.time::TIME > '12:00:00' OR races.time::TIME < '09:00:00');
                        ``` SELECT DISTINCT c.name FROM circuits c WHERE c.country IN ('UK', 'malaysia') ORDER BY c.name NULLS LAST;
                        ``` SELECT c.name FROM circuits c WHERE c.country IN ('UK', 'malaysia') ORDER BY c.name NULLS LAST;
                        ``` SELECT c.circuitId, c.location FROM circuits c WHERE c.country IN ('France', 'Belgium') ORDER BY c.circuitId NULLS LAST;
                        ``` SELECT c.circuitId, c.location FROM circuits c WHERE c.country IN ('France', 'Belgium') ;
                        ``` SELECT COUNT(*) AS total_technicians FROM technician;
                        ``` SELECT COUNT(*) AS total_technicians FROM technician;
                        ``` SELECT technician.name FROM technician ORDER BY technician.age ASC;
                        ``` SELECT technician.name FROM technician ORDER BY technician.age ASC;
                        ``` SELECT technician.team, technician.starting_year FROM technician;
                        ``` SELECT t.name, t.team, CAST(t.starting_year AS text) AS starting_year FROM technician t;
                        ``` SELECT technician.name FROM technician WHERE technician.team != 'NYY';
                        ``` SELECT technician.name FROM technician WHERE technician.team != 'NYY';
                        ``` SELECT technician.name FROM technician WHERE technician.age IN (36, 37);
                        ``` SELECT technician.name FROM technician WHERE technician.age IN (36, 37);
                        ``` SELECT MIN(technician.starting_year) AS earliest_starting_year FROM technician;
                        ``` SELECT MIN(technician.starting_year) AS earliest_starting_year FROM technician;
                        ``` SELECT t.team, COUNT(*) AS total_technicians FROM technician t GROUP BY t.team;
                        ``` SELECT t.team, COUNT(*) AS total_technicians FROM technician t GROUP BY t.team;
                        ``` SELECT t.team FROM technician t GROUP BY t.team ORDER BY COUNT(t.technician_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT t.team FROM (SELECT technician_id, COUNT(*) OVER (PARTITION BY team) AS total_technicians FROM technician GROUP BY technician_id) AS subquery JOIN technician t ON subquery.technician_id = t.technician_id ORDER BY total_technicians DESC NULLS LAST;
                        ``` SELECT DISTINCT technician.team FROM technician GROUP BY technician.team HAVING COUNT(technician.technician_id) >= 2;
                        ``` SELECT DISTINCT technician.team FROM technician GROUP BY technician.team HAVING COUNT(technician.technician_id) >= 2;
                        ``` SELECT t.name FROM technician t LEFT JOIN machine_technician mt ON t.technician_id = mt.technician_id WHERE mt.technician_id IS NULL;
                        ``` SELECT t.name FROM technician t LEFT JOIN machine_technician mt ON t.technician_id = mt.technician_id WHERE mt.technician_id IS NULL;
                        ``` SELECT technician.starting_year FROM technician WHERE technician.team IN ('CLE', 'CWS');
                        ``` SELECT MIN(technician.starting_year) AS earliest_starting_year FROM technician WHERE technician.team IN ('CLE', 'CWS');
                        ``` SELECT COUNT(*) AS total_entrepreneurs FROM entrepreneur;
                        ``` SELECT COUNT(*) AS total_entrepreneurs FROM entrepreneur;
                        ``` SELECT entrepreneur.company FROM entrepreneur ORDER BY entrepreneur.money_requested DESC;
                        ``` SELECT entrepreneur.company FROM entrepreneur ORDER BY entrepreneur.money_requested DESC;
                        ``` SELECT entrepreneur.company, entrepreneur.investor FROM entrepreneur;
                        ``` SELECT e.company, e.investor FROM entrepreneur e;
                        ``` SELECT AVG(entrepreneur.money_requested) AS average_money_requested FROM entrepreneur;
                        ``` SELECT AVG(entrepreneur.money_requested) AS average_money_requested FROM entrepreneur;
                        ``` SELECT people.name FROM people ORDER BY people.weight ASC;
                        ``` SELECT people.name FROM people ORDER BY people.weight ASC;
                        ``` SELECT MIN(people.weight) AS minimum_weight FROM people;
                        ``` SELECT MIN(people.weight) AS minimum_weight FROM people;
                        ``` SELECT e.investor, COUNT(DISTINCT e.people_id) AS num_entrepreneurs FROM entrepreneur e GROUP BY e.investor;
                        ``` SELECT entrepreneur.investor, COUNT(entrepreneur.people_id) AS number_of_entrepreneurs FROM entrepreneur GROUP BY entrepreneur.investor;
                        ``` SELECT entrepreneur.investor, COUNT(entrepreneur.people_id) AS num_investments FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY num_investments DESC NULLS LAST LIMIT 1;
                        ``` SELECT entrepreneur.investor, COUNT(entrepreneur.people_id) AS num_investments FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY num_investments DESC NULLS LAST LIMIT 1;
                        ``` SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(entrepreneur.people_id) >= 2;
                        ``` SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(entrepreneur.people_id) >= 2;
                        ``` SELECT p.name FROM people p WHERE p.heath != 1;
                        ``` SELECT p.name FROM people p WHERE p.heath != 1;
                        ``` SELECT entrepreneur.investor FROM entrepreneur WHERE entrepreneur.money_requested > 140000 OR entrepreneur.money_requested < 120000;
                        ``` SELECT DISTINCT entrepreneur.investor FROM entrepreneur WHERE (entrepreneur.money_requested > 140000 AND entrepreneur.money_requested < 120000) GROUP BY entrepreneur.investor HAVING COUNT(DISTINCT CASE WHEN entrepreneur.money_requested > 140000 THEN entrepreneur.people_id END) = COUNT(DISTINCT CASE WHEN entrepreneur.money_requested < 120000 THEN entrepreneur.people_id END);
                        ``` SELECT COUNT(DISTINCT entrepreneur.company) AS number_of_companies FROM entrepreneur;
                        ``` SELECT COUNT(DISTINCT entrepreneur.company) AS num_companies FROM entrepreneur;
                        ``` SELECT COUNT(perpetrator_id) AS total_perpetrators FROM perpetrator;
                        ``` SELECT p.date, p.killed FROM perpetrator p ORDER BY p.killed DESC;
                        ``` SELECT perpetrator.people_id FROM perpetrator ORDER BY perpetrator.injured ASC;
                        ``` SELECT AVG(injured) AS average_injuries FROM perpetrator;
                        ``` SELECT p.location FROM perpetrator p WHERE p.killed = (SELECT MAX(killed) FROM perpetrator);
                        ``` SELECT people.name FROM people ORDER BY people.height ASC;
                        ``` SELECT p.country, COUNT(*) AS total_perpetrators FROM perpetrator p GROUP BY p.country;
                        ``` SELECT p.country, COUNT(*) AS total_perpetrations FROM perpetrator p GROUP BY p.country ORDER BY total_perpetrations DESC NULLS LAST LIMIT 1;
                        ``` SELECT country FROM perpetrator GROUP BY country HAVING COUNT(perpetrator_id) >= 2;
                        ``` SELECT p.name FROM people p WHERE p.heist IS NULL;
                        ``` SELECT p.country FROM perpetrator p WHERE p.injured > 50 AND p.injured < 20 GROUP BY p.country HAVING COUNT(*) > 1;
                        ``` SELECT COUNT(DISTINCT Location) AS number_of_locations FROM perpetrator;
                        ``` SELECT MAX(perpetrator.year) AS latest_year FROM perpetrator;
                        ``` SELECT Campuses.campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%' ORDER BY Campuses.campus NULLS LAST;
                        ``` SELECT Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ``` SELECT Campuses.Campus FROM Campuses WHERE "Location" ILIKE '%Chico%';
                        ``` SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Chico%';
                        ``` SELECT Campuses.Campus FROM Campuses WHERE Campuses.year = 1958;
                        ``` SELECT Campus FROM Campuses WHERE Year = 1958;
                        ``` SELECT Campus FROM Campuses WHERE Year < 1800;
                        ``` SELECT Campus FROM Campuses WHERE Year < 1800;
                        ``` SELECT Campuses.Campus FROM Campuses WHERE (Campuses.year >= 1935 AND Campuses.year <= 1939)
                        ``` SELECT Campus FROM Campuses WHERE Year BETWEEN 1935 AND 1939;
                        ``` SELECT Campus FROM Campuses WHERE "Location" ILIKE '%Northridge%' OR "Location" ILIKE '%Los%Angeles%' OR "Location" ILIKE '%San%Francisco%';
                        ``` SELECT Campus FROM Campuses WHERE "Location" ILIKE '%Northridge%' OR "Location" ILIKE '%Los%Angeles%' OR "Location" ILIKE '%San%Francisco%';
                        ``` SELECT COUNT(*) FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes);
                        ``` SELECT COUNT(*) FROM csu_fees WHERE Campus > (SELECT AVG(Campus) FROM csu_tes);
                        ``` SELECT COUNT(*) FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes);
                        ``` SELECT COUNT(*) AS num_universities FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes);
                        ``` SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%' AND "Year" > '1950';
                        ``` SELECT Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%' AND "Year" > '1950';
                        ``` SELECT degrees.year, SUM(degrees.degrees) AS total_degrees FROM degrees GROUP BY degrees.year ORDER BY total_degrees DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(year) AS max_year FROM degrees;
                        ``` SELECT degrees.campus, SUM(degrees.degrees) AS total_degrees FROM degrees GROUP BY degrees.campus ORDER BY total_degrees DESC NULLS LAST LIMIT 1;
                        ``` SELECT degrees.campus, SUM(degrees.degrees) AS total_degrees FROM degrees GROUP BY degrees.campus ORDER BY total_degrees DESC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(csuf_fees.campus_fee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = 1996;
                        ``` SELECT AVG(campus_fee) AS average_campus_fee FROM csu_fees WHERE "year" = 1996;
                        ``` SELECT AVG(csufees_fees.campusfee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = 2005;
                        ``` SELECT AVG(campus_fee) AS average_campus_fee FROM csu_fees WHERE year = 2005;
                        ``` SELECT COUNT(*) FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ``` SELECT COUNT(*) FROM Campuses WHERE County = 'LA';
                        ``` SELECT Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ``` SELECT Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ``` SELECT COUNT(faculty) AS total_faculty FROM faculty WHERE year = 2002;
                        ``` SELECT COUNT(faculty) AS total_faculty FROM faculty WHERE year = 2002;
                        ``` SELECT COUNT(*) AS total_campuses FROM Campuses WHERE "Campus" ILIKE '%CSU%' ;
                        ``` SELECT COUNT(*) AS total_campuses FROM Campuses;
                        ``` SELECT COUNT(Candidate.candidate_id) AS total_candidates FROM candidate;
                        ``` SELECT COUNT(*) AS total_candidates FROM candidate;
                        ``` SELECT c.poll_source, COUNT(*) AS total_candidates FROM candidate c GROUP BY c.poll_source ORDER BY total_candidates DESC NULLS LAST LIMIT 1;
                        ``` SELECT candidate.poll_source, COUNT(candidate.people_id) AS number_of_candidates FROM candidate GROUP BY candidate.poll_source ORDER BY number_of_candidates DESC NULLS LAST LIMIT 1;
                        ``` SELECT candidate.candidate_id, candidate.support_rate FROM candidate ORDER BY candidate.support_rate DESC NULLS LAST LIMIT 3;
                        ``` SELECT candidate.candidate_id, candidate.support_rate FROM candidate ORDER BY candidate.support_rate DESC NULLS LAST LIMIT 3;
                        ``` SELECT MIN(candidate.oppose_rate) AS min_oppose_rate, candidate.candidate_id FROM candidate GROUP BY candidate.candidate_id;
                        ``` SELECT MIN(candidate.oppose_rate) AS min_oppose_rate, candidate.candidate_id FROM candidate GROUP BY candidate.candidate_id;
                        ``` SELECT candidate.candidate_id, candidate.people_id, candidate.poll_source, candidate.date, (candidate.support_rate + NULLIF(candidate.consider_rate, 0)) AS support_consider_ratio, (candidate.consider_rate + NULLIF(candidate.oppose_rate, 0)) AS consider_oppose_ratio FROM candidate ORDER BY support_consider_ratio ASC;
                        ``` SELECT candidate.candidate_id, candidate.people_id, candidate.poll_since, candidate.support_rate, candidate.consider_rate, candidate.oppose_rate FROM candidate ORDER BY candidate.unsure_rate ASC;
                        ``` SELECT candidate.poll_source, MAX(candidate.oppose_rate) AS max_oppose_rate FROM candidate GROUP BY candidate.poll_source ORDER BY max_oppose_rate DESC NULLS LAST LIMIT 1;
                        ``` SELECT candidate.poll_source FROM candidate WHERE candidate.oppose_rate = (SELECT MAX(candidate.oppose_rate) FROM candidate);
                        ``` SELECT p.name FROM people p ORDER BY p.date_of_birth ASC;
                        ``` SELECT people.name FROM people ORDER BY people.date_of_birth;
                        ``` SELECT AVG(Height) AS average_height, AVG(Weight) AS average_weight FROM people WHERE Sex = 'M';
                        ``` SELECT AVG(Height), AVG(Weight) FROM people WHERE Sex = 'M';
                        ``` SELECT people.name FROM people WHERE CAST(people.height AS FLOAT) > 200 AND CAST(people.height AS FLOAT) < 190;
                        ``` SELECT people.name FROM people WHERE people.height > 200 OR people.height < 190;
                        ``` SELECT people.sex, AVG(people.weight) AS average_weight, MIN(people.weight) AS min_weight FROM people GROUP BY people.sex;
                        ``` SELECT Sex, AVG(Weight) AS average_weight, MIN(Weight) AS min_weight FROM people GROUP BY Sex;
                        ``` SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT c.candidate_id FROM candidates c);
                        ``` SELECT p.name FROM people p WHERE p.people_id NOT IN (SELECT c.candidate_id FROM candidates c);
                        ``` SELECT sex, COUNT(*) AS total_people FROM people WHERE weight > 85 GROUP BY sex;
                        ``` SELECT people.sex, COUNT(*) AS total_people FROM people WHERE people.weight > 85 GROUP BY people.sex;
                        ``` SELECT MAX(support_rate) AS max_support_rate, MIN(consider_rate) AS min_consider_rate, MIN(oppose_rate) AS min_oppose_rate FROM candidate;
                        ``` SELECT MAX(support_rate) AS max_support_rate, MIN(consider_rate) AS min_consider_rate, MIN(oppose_rate) AS min_oppose_rate FROM candidate;
                        ``` SELECT p.name FROM people p WHERE p.height < (SELECT AVG(height) FROM people);
                        ``` SELECT p.name FROM people p WHERE p.height < (SELECT AVG(height) FROM people);
                        ``` SELECT p.people_id, p.sex, p.name, to_number(p.date_of_birth,'YYYYMMDD') AS date_of_birth, p.height, p.weight FROM people p;
                        ``` SELECT p.people_id, p.sex, p.name, to_number(p.date_of_birth,'YYYYMMDD') AS date_of_birth, p.heath, p.weight FROM people p;
                        ``` SELECT COUNT(*) AS total_movies FROM Movie WHERE director ilike '%Steven%Spielberg%';
                        ``` SELECT Movie.title FROM Movie WHERE Movie.director ilike '%Steven%Spielberg%' ORDER BY Movie.title NULLS LAST;
                        ``` SELECT Movie.title FROM Movie WHERE Movie.year > 2000 AND Movie.director ilike '%James%Cameron%';
                        ``` SELECT Movie.title FROM Movie WHERE Movie.director ilike '%James%Cameron%' AND Movie.year > 2000;
                        ``` SELECT COUNT(*) FROM Movie WHERE year < 2000;
                        ``` SELECT COUNT(*) AS number_of_movies FROM Movie WHERE year < 2000;
                        ``` SELECT Movie.director FROM Movie WHERE Movie.title ilike '%Avatar%';
                        ``` SELECT Movie.director FROM Movie WHERE Movie.title ILIKE '%Avitar%' ORDER BY Movie.director NULLS LAST;
                        ``` SELECT COUNT(rID) AS total_reviewers FROM Reviewer;
                        ``` SELECT COUNT(rID) AS total_reviewers FROM Reviewer;
                        ``` SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ilike '%Mike%';
                        ``` SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ilike '%Mike%';
                        ``` SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Daniel%Lewis%' ;
                        ``` SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Daniel%Lewis%' ;
                        ``` SELECT COUNT(*) AS total_ratings FROM Rating WHERE stars > 3;
                        ``` SELECT COUNT(*) AS num_ratings FROM Rating WHERE stars > 3;
                        ``` SELECT MIN(stars) AS lowest_star_rating, MAX(stars) AS highest_star_rating FROM Rating;
                        ``` SELECT MAX(stars) AS max_stars, MIN(stars) AS min_stars FROM Rating;
                        ``` SELECT COUNT(*) AS total_movies_without_ratings FROM Movie WHERE rating IS NULL;
                        ``` SELECT Movie.title FROM Movie WHERE Movie.mID NOT IN (SELECT Rating.movie_id FROM Rating);
                        ``` SELECT title FROM Movie ORDER BY year DESC LIMIT 1;
                        ``` SELECT Movie.title FROM Movie ORDER BY Movie.year DESC LIMIT 1;
                        ``` SELECT m.title FROM Movie m WHERE m.year > (SELECT MAX(m2.year) FROM Movie m2 WHERE m2.director ILIKE '%Steven%Spielberg%')
                        ``` SELECT m.title FROM Movie m JOIN (SELECT MAX(year) AS max_year FROM Movie WHERE director ilike '%Steven%Spielberg%') AS latest_spielberg_movie ON m.year > latest_spielberg_movie.max_year;
                        ``` SELECT r.name AS reviewer_name, m.title AS movie_title FROM Reviewer r CROSS JOIN Movie m;
                        ``` SELECT r.name, m.title FROM Reviewer AS r CROSS JOIN Movie AS m;
                        ``` SELECT COUNT(*) AS total_movies FROM Movie WHERE "director" != 'Chris Jackson';
                        ``` SELECT m.title FROM Movie AS m WHERE m.mID NOT IN (SELECT reviewer_id FROM Review WHERE reviewer_name ILIKE '%Chris%Jackson%') ;
                        ``` SELECT DISTINCT Movie.director FROM Movie GROUP BY Movie.director HAVING COUNT(Movie.mID) = 1;
                        ``` SELECT DISTINCT Movie.director FROM Movie;
                        ``` SELECT DISTINCT Movie.director FROM Movie WHERE Movie.director IS NOT NULL GROUP BY Movie.director HAVING COUNT(Movie.mID) = 1;
                        ``` SELECT DISTINCT Movie.director FROM Movie WHERE Movie.director IS NOT NULL;
                        ``` SELECT AVG(r.stars) AS average_rating FROM Rating r JOIN Movie m ON r.mID = m.mID WHERE m.title NOT ILIKE '%Brittany%Harris%' GROUP BY m.title;
                        ``` SELECT AVG(r.rating) AS average_rating FROM Rating r JOIN Movie m ON r.mID = m.mID WHERE r.rID NOT IN (SELECT br.rID FROM Brittany_Harris_Reviews br);
                        ``` SELECT m.mID FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID AND r.raterName = 'Brittany Harris' WHERE r.raterName IS NULL;
                        ``` SELECT m.mID FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID AND r.raterID = 757071 GROUP BY m.mID HAVING COUNT(r.rID) = 0;
                        ``` SELECT mID, AVG(stars) AS average_rating FROM Rating GROUP BY mID HAVING COUNT(rID) >= 2;
                        ``` SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title HAVING COUNT(r.rID) > 3;
                        ``` SELECT reviewer.rID FROM reviewer LEFT JOIN rating ON reviewer.rID = rating.rID WHERE rating.stars IS NULL OR rating.stars != 4;
                        ``` SELECT r.rID AS reviewer_id FROM Rating r WHERE r.stars != 4;
                        ``` SELECT DISTINCT r.rID FROM Rating r WHERE NOT EXISTS (SELECT 1 FROM Rating r2 WHERE r2.stars = 4 AND r2.rID != r.rID AND r2.mID = r.mID) ;
                        ``` SELECT DISTINCT r.rID FROM Rating r WHERE NOT EXISTS (SELECT 1 FROM Rating r2 WHERE r.mID = r2.mID AND r2.stars >= 4);
                        ``` SELECT title FROM Movie WHERE year < 1980 OR director ilike '%James%Cameron%'
                        ``` SELECT Movie.title FROM Movie WHERE (Movie.year < 1980 OR Movie.director = 'James Cameron') AND Movie.director IS NOT NULL;
                        ``` SELECT COUNT(County_ID) AS number_of_counties FROM county_public_safety;
                        ``` SELECT COUNT(*) AS total_counties FROM county_public_safety;
                        ``` SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population DESC;
                        ``` SELECT county_public_safety.name FROM country_public_safety ORDER BY county_public_safety.population DESC;
                        ``` SELECT county_public_safety.police_force FROM county_public_safety WHERE county_public_safety.location not ilike '%east%' GROUP BY county_public_safety.police_force;
                        ``` SELECT county_public_safety.police_force FROM county_public_safety WHERE county_public_safety.location not ilike '%East%' GROUP BY county_public_safety.police_force;
                        ``` SELECT MIN(Crime_rate) AS min_crime_rate, MAX(Crime_rate) AS max_crime_rate FROM county_public_safety;
                        ``` SELECT MIN(crime_rate) AS min_crime_rate, MAX(crime_rate) AS max_crime_rate FROM county_public_safety;
                        ``` SELECT county_public_safety.name, COUNT(county_public_safety.police_officers) AS police_officers_count, SUM(county_public_safety.crime_rate) AS total_crimes FROM county_public_safety GROUP BY county_public_safety.name ORDER BY police_officers_count ASC;
                        ``` SELECT county_public_safety.name, COUNT(county_public_safety.police_officers) AS police_officers_count, AVG(county_public_safety.crime_rate) AS average_crime_rate FROM county_public_safety GROUP BY county_public_safety.name ORDER BY police_officers_count ASC;
                        ``` SELECT city.name FROM city ORDER BY city.name ASC;
                        ``` SELECT city.name FROM city ORDER BY city.name ASC;
                        ``` SELECT city.name, (city.hispanic / NULLIF(SUM(city.white, city.black, city.amerindian, city.asian, city.multiracial), 0)) * 100 AS hispanic_ratio FROM city WHERE city.black > 10 GROUP BY city.name ORDER BY hispanic_ratio DESC NULLS LAST;
                        ``` SELECT city.name, (cast(city.hispanic AS FLOAT) / NULLIF(SUM(city.white, city.black, city.amerindian, city.asian, city.multiracial), 0)) * 100 AS hispanic_percentage FROM city WHERE city.black > 10 GROUP BY city.name ORDER BY hispanic_percentage DESC NULLS LAST;
                        ``` SELECT c.name, c.population FROM county_public_safety c JOIN (SELECT COUNT(*) AS total_population, COUNTY_ID FROM county_public_safety GROUP BY COUNTY_ID) d ON c.county_id = d.county_id WHERE c.population = (SELECT MAX(population) FROM county_public_safety);
                        ``` SELECT c.name, c.population FROM county_public_safety c JOIN (SELECT COUNT(*) AS total_population, COUNTY_ID FROM county_public_safety GROUP BY COUNTY_ID) d ON c.county_id = d.county_id WHERE d.total_population = (SELECT MAX(total_population) FROM (SELECT COUNT(*) AS total_population, COUNTY_ID FROM county_public_safety GROUP BY COUNTY_ID));
                        ``` SELECT c.name, (cast(c.white AS FLOAT) / NULLIF(SUM(c.white, c.black, c.amerindian, c.asian, c.multiracial, c.hispanic), 0)) AS white_percentage FROM city c GROUP BY c.name ORDER BY white_percentage DESC NULLS LAST LIMIT 5;
                        ``` SELECT city.name FROM city WHERE city.white = (SELECT MAX(city.white) FROM city) GROUP BY city.name ORDER BY city.white DESC NULLS LAST LIMIT 5;
                        ``` SELECT c.name AS city_name, co.county_name FROM city c JOIN county co ON c.county_id = co.county_id WHERE c.police_officers > (SELECT MAX(police_officers) FROM city);
                        ``` SELECT c.name, COUNT(p.police_officer) AS police_count FROM city c JOIN police p ON c.city_id = p.city_id GROUP BY c.name ORDER BY police_count DESC;
                        ``` SELECT COUNT(DISTINCT city.name) AS number_of_cities FROM city WHERE (city.white > 20000 OR city.black > 20000 OR city.amerindian > 20000 OR city.asian > 20000 OR city.hispanic > 20000);
                        ``` SELECT COUNT(DISTINCT c.name) AS number_of_cities FROM city c JOIN county co ON c.county_id = co.county_id WHERE c.population > 20000;
                        ``` SELECT county_public_safety.police_force, COUNT(county_id) AS number_of_counties FROM county_public_safety GROUP BY county_public_safety.police_force;
                        ``` SELECT county_public_safety.police_force, COUNT(county_id) AS number_of_counties FROM county_public_safety GROUP BY county_public_safety.police_force;
                        ``` SELECT county_public_safety.location, COUNT(county_public_safety.name) AS COUNT FROM county_public_safety GROUP BY county_public_safety.location ORDER BY COUNT DESC NULLS LAST LIMIT 1;
                        ``` SELECT county_public_safety.location, COUNT(county_public_safety.name) AS county_name_count FROM county_public_safety GROUP BY county_public_safety.location ORDER BY county_name_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT county_public_safety.name FROM county_public_safety WHERE county_public_safety.location IS NULL;
                        ``` SELECT county_public_safety.name FROM county_public_safety WHERE county_public_safety.location IS NULL;
                        ``` SELECT county_public_safety.county_id, COUNT(*) AS number_of_cities FROM county_public_safety WHERE county_public_safety.location ilike '%east%' OR county_public_safety.location ilike '%west%' GROUP BY county_public_safety.county_id;
                        ``` SELECT DISTINCT county_public_safety.police_force FROM county_public_safety WHERE county_public_safety.location ilike '%East%' AND country_public_safety.location ilike '%West%' ;
                        ``` SELECT city.name FROM city WHERE (city.white / total_population) + (city.black / total_population) + (city.amerindian / total_population) + (city.asian / total_population) + (city.multiracial / total_population) <= 100;
                        ``` SELECT city.name FROM city WHERE (city.white + city.black + city.amerindian + city.asian + city.multiracial + city.hispanic) / NULLIF(city.total_population, 0) < 100;
                        ``` SELECT county_public_safety.name, SUM(county_public_safety.case_burden) AS total_cases FROM county_public_safety GROUP BY county_public_safety.name ORDER BY total_cases DESC NULLS LAST;
                        ``` SELECT county_public_safety.name, COUNT(county_public_safety.case_burden) AS total_cases FROM county_public_safety GROUP BY county_public_safety.name ORDER BY total_cases DESC NULLS LAST;
                        ``` SELECT Rooms.roomName FROM Rooms WHERE Rooms.decor = 'modern' AND Rooms.basePrice < 160 AND Rooms.beds = 2;
                        ``` SELECT Rooms.roomName FROM Rooms WHERE Rooms.beds = 2 AND Rooms.basePrice < 160;
                        ``` SELECT Rooms.roomId, Rooms.roomName FROM Rooms WHERE (Rooms.basePrice > 160) AND (Rooms.maxoccupancy > 2);
                        ``` SELECT Rooms.roomId, Rooms.roomName FROM Rooms WHERE (Rooms.beds > 2 AND CAST(Rooms.basePrice AS FLOAT) > 160);
                        ``` SELECT COUNT(Kids) AS total_kids FROM Reservations WHERE "FirstName" ILIKE '%Roy%Sweazzy%'
                        ``` SELECT COUNT(Kids) AS total_kids FROM Reservations WHERE FirstName ilike '%Roy%Sweaz%'
                        ``` SELECT COUNT(*) AS number_of_reservations FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY';
                        ``` SELECT COUNT(*) AS total_reservations FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY';
                        ``` SELECT COUNT(Reservations.Adults) AS total_adults FROM Reservations WHERE Reservations.Room = 'CONRAD SELBIG' AND CAST(Reservations.CheckIn AS DATE) = '2010-10-23';
                        ``` SELECT Reservations.Adults FROM Reservations WHERE "CheckIn" ILIKE '%oct%23,%2010%' AND "Room" ILIKE '%conrad%selbig%';
                        ``` SELECT Reservations.Kids FROM Reservations WHERE Reservations.CheckIn ilike '%Sep%21,%2010%' AND Reservations.Room ilike '%DAMIEN%TRACHSEL%'
                        ``` SELECT Reservations.Kids FROM Reservations WHERE Reservations.CheckIn ILIKE '%Sep%21,%2010%' AND Reservations.LastName ILIKE '%DAMIEN%TRACHSEL%';
                        ``` SELECT COUNT(*) AS total_king_beds FROM Rooms WHERE bedType = 'King';
                        ``` SELECT COUNT(*) AS total_king_beds FROM Rooms WHERE bedType = 'King';
                        ``` SELECT Rooms.roomName, Rooms.decor FROM Rooms WHERE Rooms.bedType = 'king' ORDER BY Rooms.basePrice DESC;
                        ``` SELECT Rooms.roomName, Rooms.decor FROM Rooms WHERE Rooms.bedType = 'king' ORDER BY Rooms.basePrice NULLS LAST;
                        ``` SELECT Rooms.roomName, MIN(Rooms.basePrice) AS min_base_price FROM Rooms GROUP BY Rooms.roomName;
                        ``` SELECT Rooms.roomName, CAST(Rooms.basePrice AS FLOAT) AS base_price FROM Rooms ORDER BY Rooms.basePrice ASC LIMIT 1;
                        ``` SELECT Rooms.decor FROM Rooms WHERE Rooms.roomName ilike '%Recluse%and%defiance%'
                        ``` SELECT Rooms.decor FROM Rooms WHERE Rooms.roomName ilike '%recluse%and%defiance%' ;
                        ``` SELECT roomType, AVG(basePrice) AS average_base_price FROM Rooms GROUP BY roomType;
                        ``` SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType;
                        ``` SELECT COUNT(DISTINCT Rooms.roomid) AS total_modern_rooms FROM Rooms WHERE decor ilike '%modern%';
                        ``` SELECT COUNT(*) AS total_occupants FROM Rooms WHERE decor ilike '%modern%';
                        ``` SELECT COUNT(*) AS total_rooms FROM Rooms;
                        ``` SELECT COUNT(*) AS total_rooms FROM Rooms;
                        ``` SELECT COUNT(*) FROM Rooms WHERE bedType = 'king';
                        ``` SELECT COUNT(*) FROM Rooms WHERE bedType = 'king';
                        ``` SELECT Rooms.bedType, COUNT(Rooms.RoomId) AS room_count FROM Rooms GROUP BY Rooms.bedType;
                        ``` SELECT Rooms.bedType, COUNT(Rooms.RoomId) AS room_count FROM Rooms GROUP BY Rooms.bedType;
                        ``` SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.maxoccupancy DESC LIMIT 1;
                        ``` SELECT Rooms.roomName, MAX(Rooms.maxoccupancy) AS max_occupancy FROM Rooms GROUP BY Rooms.roomName ORDER BY max_occupancy DESC NULLS LAST LIMIT 1;
                        ``` SELECT Rooms.roomid, Rooms.roomname FROM Rooms ORDER BY Rooms.base_price DESC LIMIT 1;
                        ``` SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.base_price DESC LIMIT 1;
                        ``` SELECT Rooms.bedType, Rooms.roomName FROM Rooms WHERE Rooms.baseFeet IS TRUE;
                        ``` SELECT Rooms.bedType, Rooms.roomName FROM Rooms WHERE "decor" ILIKE '%traditional%' ORDER BY Rooms.bedType NULLS LAST;
                        ``` SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE bedType = 'king' GROUP BY Rooms.decor;
                        ``` SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE bedType = 'king' GROUP BY Rooms.decor;
                        ``` SELECT decor, AVG(base_price) AS average_base_price, MIN(base_price) AS min_base_price FROM Rooms GROUP BY decor;
                        ``` SELECT Rooms.decor, AVG(Rooms.price) AS average_price, MIN(Rooms.price) AS min_price FROM Rooms GROUP BY Rooms.decor;
                        ``` SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.beds DESC;
                        ``` SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice DESC;
                        ``` SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE CAST(Rooms.baseFeet AS FLOAT) > 120 GROUP BY Rooms.decor;
                        ``` SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE CAST(Rooms.baseFeet as FLOAT) > 120 GROUP BY Rooms.decor;
                        ``` SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType;
                        ``` SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType;
                        ``` SELECT Rooms.roomName FROM Rooms WHERE (Rooms.bedType ilike '%king%' OR Rooms.bedType ilike '%que%') AND (Rooms.bedType ilike '%que%' OR Rooms.bedType ilike '%que%');
                        ``` SELECT Rooms.roomName FROM Rooms WHERE (Rooms.bedType ilike '%king%' OR Rooms.bedType ilike '%queen%') ;
                        ``` SELECT COUNT(DISTINCT room_beds.bedtype) AS number_of_bed_types FROM rooms AS room_beds;
                        ``` SELECT COUNT(DISTINCT room_type) AS total_bed_types FROM rooms;
                        ``` SELECT Rooms.roomId, Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 3;
                        ``` SELECT Rooms.roomId, Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 3;
                        ``` SELECT Rooms.roomName FROM Rooms WHERE Rooms.basePrice > (SELECT AVG(Rooms.basePrice) FROM Rooms);
                        ``` SELECT Rooms.roomName FROM Rooms WHERE (SELECT AVG(basePrice) FROM Rooms) < Rooms.baseFeet;
                        ``` SELECT COUNT(*) AS room_count FROM Rooms r WHERE NOT EXISTS (SELECT 1 FROM Reservations re WHERE re.roomid = r.roomid);
                        ``` SELECT COUNT(*) AS total_rooms FROM Rooms WHERE RoomId NOT IN (SELECT roomId FROM Reservations);
                        ``` SELECT Rooms.roomName FROM Rooms WHERE (Rooms.basePrice >= 120 AND Rooms.basePrice <= 150);
                        ``` SELECT Rooms.roomName FROM Rooms WHERE (Rooms.basePrice >= 120 AND Rooms.baseCost <= 150) OR (Rooms.maxOccupancy >= 120 AND Rooms.maxOccupancy <= 150);
                        ``` SELECT COUNT(DISTINCT CMI_Cross_References.source_system_code) AS number_of_source_system_codes FROM CMI_Cross_References;
                        ``` SELECT personal_master_index.master_customer_id, personal_master_index.cmi_details FROM personal_master_index ORDER BY personal_master_index.cmi_details DESC;
                        ``` SELECT p.council_tax_id, p.cmi_cross_ref_id FROM parking_fines p;
                        ``` SELECT COUNT(*) AS total_council_taxes FROM rent_arrears;
                        ``` SELECT CMI_Cross_References.cmic_cross_ref_id FROM CMI_Cross_References WHERE CMI_Cross_References.cmic_cross_ref_id NOT IN (SELECT Parking_Taxes.parking_tax_id FROM Parking_Taxes) ORDER BY CMI_Cross_References.cmic_cross_ref_id NULLS LAST;
                        ``` SELECT DISTINCT CMI_Cross_References.source_system_code FROM CMI_Cross_References WHERE CMI_Cross_References.source_system_code ilike '%en%';
                        ``` SELECT COUNT(*) AS total_parties FROM party;
                        ``` SELECT COUNT(*) AS total_parties FROM party;
                        ``` SELECT party.theme_id, COUNT(party.number_of_hosts) AS total_hosts FROM party GROUP BY party.theme_id ORDER BY total_hosts ASC;
                        ``` SELECT party.theme_id, COUNT(party.host_id) AS host_count FROM party GROUP BY party.theme_id ORDER BY host_count ASC;
                        ``` SELECT p.party_theme, p.location FROM party p;
                        ``` SELECT p.party_id, p.party_theme, p.location FROM party p;
                        ``` SELECT MIN(first_year), MAX(last_year) FROM party WHERE theme IN ('Spring', 'Teqnology');
                        ``` SELECT MIN(first_year) AS earliest_year, MAX(last_year) AS latest_year FROM party WHERE theme IN ('Spring', 'Teqnology');
                        ``` SELECT AVG(party.number_of_hosts) AS average_number_of_hosts FROM party;
                        ``` SELECT AVG(party.number_of_hosts) AS average_number_of_hosts FROM party;
                        ``` SELECT p.location FROM party p WHERE p.number_of_hosts = (SELECT MAX(number_of_hosts) FROM party);
                        ``` SELECT p.location, COUNT(*) AS total_hosts FROM party p GROUP BY p.location ORDER BY total_hosts DESC NULLS LAST LIMIT 1;
                        ``` SELECT host.nationality, COUNT(*) AS total_hosts FROM host GROUP BY host.nationality;
                        ``` SELECT host.nationality, COUNT(*) AS total_hosts FROM host GROUP BY host.nationality;
                        ``` SELECT host.nationality, COUNT(*) AS frequency FROM host GROUP BY host.nationality ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT host.nationality, COUNT(*) AS total_hosts FROM host GROUP BY host.nationality ORDER BY total_hosts DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT host.nationality FROM host WHERE CAST(host.age AS FLOAT) > 45 AND CAST(host.age AS FLOAT) < 35;
                        ``` SELECT host.nationality FROM host WHERE CAST(host.age AS FLOAT) > 45 AND CAST(host.age AS FLOAT) < 35 GROUP BY host.nationality HAVING COUNT(host.name) > 1;
                        ``` SELECT host.name, host.nationality FROM host ORDER BY CAST(host.age AS FLOAT) ASC LIMIT 1;
                        ``` SELECT host.name, host.nationality FROM host WHERE host.age = (SELECT MAX(host_id.age) FROM host_id);
                        ``` SELECT h.name FROM host h LEFT JOIN party_host ph ON h.host_id = ph.host_id WHERE ph.host_id IS NULL;
                        ``` SELECT h.name FROM host h LEFT JOIN party p ON h.host_id = p.host_id WHERE p.host_id IS NULL;
                        ``` SELECT COUNT(*) AS region_count FROM region;
                        ``` SELECT COUNT(*) AS region_count FROM region;
                        ``` SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code;
                        ``` SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code;
                        ``` SELECT region.region_name FROM region ORDER BY region.region_name ASC;
                        ``` SELECT region.region_name FROM region ORDER BY region.region_name ASC;
                        ``` SELECT region.region_name FROM region WHERE region.region_name not ilike '%Denmark%' ORDER BY region.region_name NULLS LAST;
                        ``` SELECT region.region_name FROM region WHERE region.region_name not ilike '%Denmark%' ORDER BY region.region_name NULLS LAST;
                        ``` SELECT COUNT(*) AS total_storms FROM storm;
                        ``` SELECT COUNT(*) FROM storm WHERE number_deaths > 0;
                        ``` SELECT s.name, to_date(s.dates_active, 'YYYY-MM-DD') AS date_active, SUM(CASE WHEN d.deaths > 0 THEN 1 ELSE 0 END) AS deaths FROM storm s JOIN death d ON s.storm_id = d.storm_id GROUP BY s.name, date_activated;
                        ``` SELECT s.name, to_date(s.dates_active, 'YYYY-MM-DD') AS date_active, SUM(CASE WHEN s.number_deaths > 0 THEN 1 ELSE 0 END) AS number_of_storms_with_deaths FROM storm s GROUP BY s.name, date_activated;
                        ``` SELECT AVG(damage_millions_usd), MAX(damage_millions_usd) FROM storm WHERE max_speed > 1000;
                        ``` SELECT AVG(Damage_millions_usd), MAX(damage_millions_usd) FROM storm WHERE max_speed > 1000;
                        ``` SELECT SUM(storm.number_deaths) AS total_deaths, SUM(storm.damage_millions_usd) AS total_damage FROM storm WHERE storm.max_speed > (SELECT AVG(storm.max_speed) FROM storm);
                        ``` SELECT SUM(storm.number_deaths) AS total_deaths, SUM(storm.damage_millions_usd) AS total_damage_millions FROM storm WHERE storm.max_speed > (SELECT AVG(max_speed) FROM storm);
                        ``` SELECT s.name, to_char(to_timestamp(s.dolles_active), 'DD-Mon-YYYY') AS date_of_storm, s.max_speed, s.damage_millions_usd FROM storm s ORDER BY s.max_speed DESC;
                        ``` SELECT s.name, to_char(s.damage_millions_usd::FLOAT / 1000000, 'FM999990D00') AS damage_in_millions, rank() OVER (ORDER BY s.max_speed DESC) AS rank FROM storm s;
                        ``` SELECT COUNT(*) AS total_regions_affected FROM affected_region;
                        ``` SELECT COUNT(DISTINCT region_id) AS number_of_regions FROM storm_region;
                        ``` SELECT region.region_name FROM region WHERE region.region_id NOT IN (SELECT region_id FROM region);
                        ``` SELECT region.region_name FROM region WHERE region.region_id NOT IN (SELECT region_id FROM earthquake);
                        ``` SELECT s.name FROM storm s WHERE s.damage_millions_usd IS NULL;
                        ``` SELECT s.name FROM storm s WHERE s.storm_id NOT IN (SELECT d.storm_id FROM damage d);
                        ``` SELECT s.name FROM storm s WHERE NOT EXISTS (SELECT 1 FROM region r WHERE r.storm_id = s.storm_id GROUP BY r.storm_id HAVING COUNT(DISTINCT r.region) >= 2);
                        ``` SELECT s.name FROM storm s WHERE NOT EXISTS (SELECT 1 FROM region r WHERE r.storm_id = s.storm_id) AND NOT EXISTS (SELECT 1 FROM region r2 WHERE r2.storm_id = s.storm_id AND r2.region_id != r.region_id);
                        ``` SELECT COUNT(*) AS total_counties FROM county;
                        ``` SELECT COUNT(*) FROM county;
                        ``` SELECT county.county_name, COUNT(*) AS population FROM county GROUP BY county.county_name;
                        ``` SELECT county.county_name, COUNT(*)::FLOAT / total_population AS proportion FROM county GROUP BY county.county_name ORDER BY proportion DESC NULLS LAST;
                        ``` SELECT AVG(Population) FROM county;
                        ``` SELECT AVG(Population) AS average_population FROM county;
                        ``` SELECT MAX(Population) AS max_population, MIN(Population) AS min_population FROM county;
                        ``` SELECT MAX(Population) AS max_population, MIN(Population) AS min_population FROM county;
                        ``` SELECT DISTINCT election.district FROM election;
                        ``` SELECT DISTINCT election.district FROM election;
                        ``` SELECT county.zip_code FROM county WHERE county.county_name ilike '%Howard%' ;
                        ``` SELECT county.zip_code FROM county WHERE county.county_name ilike '%Howard%' ;
                        ``` SELECT election.delegate FROM election WHERE election.district = 1;
                        ``` SELECT election.delegate FROM election WHERE election.district = 1;
                        ``` SELECT election.delegate, election.committee FROM election;
                        ``` SELECT e.election_id, e.counties_represented, d.delegate, c.committee FROM election e JOIN delegate d ON e.delegation = d.delegate_id JOIN committee c ON e.committee = c.committee_id;
                        ``` SELECT COUNT(DISTINCT Governor) AS number_of_governors FROM party;
                        ``` SELECT COUNT(DISTINCT Governor) AS number_of_governors FROM party;
                        ``` SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.party = 'Democratic';
                        ``` SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.party = 'Democratic';
                        ``` SELECT DISTINCT party.year FROM party WHERE party.governor ilike '%Eliot%Spitzer%' ORDER BY party.year NULLS LAST;
                        ``` SELECT DISTINCT party.year FROM party WHERE party.governor ilike '%Eliot%Spitzer%' ORDER BY party.year NULLS LAST;
                        ``` SELECT * FROM election;
                        ``` SELECT e.election_id, e.counties_represented, e.district, e.delegate, e.party, e.first_elected, e.committee FROM election e;
                        ``` SELECT county.county_name FROM county ORDER BY county.population ASC;
                        ``` SELECT county.county_name FROM county ORDER BY county.population ASC;
                        ``` SELECT county.county_name FROM county ORDER BY county.county_name DESC;
                        ``` SELECT county.county_name FROM county ORDER BY county.county_name DESC;
                        ``` SELECT county.county_name, COUNT(zip.id) AS total_population FROM county JOIN zip ON county.county_id = zip.county_id GROUP BY county.county_name ORDER BY total_population DESC LIMIT 1;
                        ``` SELECT county.county_name FROM county ORDER BY county.population DESC NULLS LAST LIMIT 1;
                        ``` SELECT county.county_name, county.population FROM county ORDER BY county.population ASC NULLS LAST LIMIT 3;
                        ``` SELECT COUNTY.county_name FROM COUNTY ORDER BY COUNTY.population ASC NULLS LAST LIMIT 3;
                        ``` SELECT p.party FROM party p GROUP BY p.party HAVING COUNT(p.year) >= 2;
                        ``` SELECT p.party FROM party p GROUP BY p.party HAVING COUNT(p.year) >= 2;
                        ``` SELECT p.party_id, COUNT(*) AS num_years_governor FROM party p GROUP BY p.party_id ORDER BY num_years_governor DESC;
                        ``` SELECT p.party_id, COUNT(*) AS frequency FROM party p GROUP BY p.party_id ORDER BY frequency DESC NULLS LAST;
                        ``` SELECT party.governor, COUNT(party.year) AS num_times_comptroller FROM party WHERE party.comptroller IS NOT NULL GROUP BY party.governor ORDER BY num_times_comptroller DESC;
                        ``` SELECT p.party_id, COUNT(*) AS frequency FROM party p WHERE compartroller IS NOT NULL GROUP BY p.party_id ORDER BY frequency DESC;
                        ``` SELECT p.party FROM party p WHERE p.year IS NULL;
                        ``` SELECT p.party FROM party p LEFT JOIN delegate d ON p.party_id = d.party_id WHERE d.party_id IS NULL;
                        ``` SELECT COUNT(journalist.journalist_id) AS total_journalists FROM journalist;
                        ``` SELECT journalist.name FROM journalist ORDER BY journalist.years_working ASC;
                        ``` SELECT journalist.name, journalist.nationality::FLOAT, CAST(journalist.age AS FLOAT) FROM journalist;
                        ``` SELECT journalist.name FROM journalist WHERE journalist.nationality ilike '%England%' OR journalist.nationality ilike '%Wales%';
                        ``` SELECT AVG(journalist.years_working) AS average_years_working FROM journalist;
                        ``` SELECT journalist.nationality FROM journalist WHERE journalist.years_working = (SELECT MAX(journalist.years_working) FROM journalist);
                        ``` SELECT journalist.nationality, COUNT(journalist.journalist_id) AS total_journalists FROM journalist GROUP BY journalist.nationality;
                        ``` SELECT journalist.nationality, COUNT(*) AS frequency FROM journalist GROUP BY journalist.nationality ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT journalist.nationality FROM journalist WHERE (journalist.years_working > 10 OR journalist.years_working < 3) GROUP BY journalist.nationality HAVING COUNT(*) >= 2;
                        ``` SELECT event.date, event.venue, event.name FROM event ORDER BY event.event_attendance DESC;
                        ``` SELECT journalist.name FROM journalist WHERE journalist.journalist_id NOT IN (SELECT reporter.journalist_id FROM event JOIN reporter ON event.event_id = reporter.event_id);
                        ``` SELECT AVG(event_attendance) AS average_attendance, MAX(event_attendance) AS max_attendance FROM event;
                        ``` SELECT event.venue, event.name, event.event_id, event.date, event.event_attendance FROM event ORDER BY event.event_attendance DESC NULLS LAST LIMIT 2;
                        ``` SELECT Restaurant.ResID, Restaurant.ResName, Restaurant.Address FROM Restaurant;
                        ``` SELECT Restaurant.Address FROM Restaurant WHERE ResName ilike '%Subway%';
                        ``` SELECT CAST(Rating AS FLOAT) AS Rating FROM Restaurant WHERE ResName = 'Subway'
                        ``` SELECT Restaurant_Type.ResTypeName FROM Restaurant_Type;
                        ``` SELECT Restaurant_Type.ResTypeDescription FROM Restaurant_Type WHERE Restaurant_Type.ResTypeName ilike '%Sandwich%';
                        ``` SELECT Restaurant.ResName, MAX(Restaurant.Rating) AS max_rating FROM Restaurant GROUP BY Restaurant.ResName ORDER BY max_rating DESC NULLS LAST;
                        ``` SELECT Student.Age FROM Student WHERE Student.LName ilike '%Linda%Smith%' ;
                        ``` SELECT Student.Sex FROM Student WHERE Student.LName ilike '%Linda%Smith%' ;
                        ``` SELECT s.fname, s.lname FROM student AS s WHERE s.major = 600;
                        ``` SELECT Student.city_code FROM Student WHERE Student.LName ilike '%Linda%Smith%' AND Student.Fname ilike '%Smith%';
                        ``` SELECT COUNT(*) AS total_students FROM Student WHERE Advisor = 1121;
                        ``` SELECT s.advisor, COUNT(*) AS student_count FROM student s GROUP BY s.advisor ORDER BY student_count DESC NULLS LAST;
                        ``` SELECT s.major, COUNT(*) AS student_count FROM Student s GROUP BY s.major ORDER BY student_count ASC NULLS LAST LIMIT 1;
                        ``` SELECT Student.Major, COUNT(Student.StuID) AS student_count FROM Student GROUP BY Student.Major HAVING COUNT(Student.StuID) BETWEEN 2 AND 30;
                        ``` SELECT Student.Fname, Student.LName FROM Student WHERE "Age" > '18' AND "Major" = '600';
                        ``` SELECT Student.Fname, Student.LName FROM Student WHERE Student.Sex = 'female' AND Student.Age > 18 AND Student.Major != 600;
                        ``` SELECT a.actual_order_id FROM Actual_Orders a WHERE order_status_code = 'success';
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT COUNT(DISTINCT customers.payment_method) AS number_of_payment_methods FROM customers;
                        ``` SELECT Trucks.truck_id, Trucks.truck_licence_number, Trucks.truck_details FROM Trucks ORDER BY Trucks.truck_id;
                        ``` SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC NULLS LAST LIMIT 1;
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.customer_id NOT IN (SELECT customer_id FROM Addresses WHERE state = 'California') ;
                        ``` SELECT customers.customer_name, customers.customer_email FROM customers WHERE payment_method = 'Visa' ;
                        ``` SELECT a.state_province_county FROM Addresses a LEFT JOIN Employees e ON a.address_id = e.address_id WHERE e.employee_id IS NULL;
                        ``` SELECT customers.customer_name, customers.customer_phone, customers.customer_email FROM customers ORDER BY customers.date_became_customer;
                        ``` SELECT c.customer_name FROM Customers c ORDER BY c.customer_id ASC LIMIT 5;
                        ``` SELECT customers.payment_method, COUNT(*) AS frequency FROM customers GROUP BY customers.payment_method ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT route_name FROM Delivery_Routes ORDER BY route_name ASC;
                        ``` SELECT COUNT(*) AS total_authors FROM Authors;
                        ``` SELECT COUNT(*) AS total_authors FROM Authors;
                        ``` SELECT COUNT(*) FROM Inst;
                        ``` SELECT COUNT(*) AS total_institutions FROM inst;
                        ``` SELECT COUNT(*) AS total_papers FROM Papers;
                        ``` SELECT COUNT(*) AS total_papers FROM Papers;
                        ``` SELECT COUNT(*)::FLOAT / NULLIF((SELECT COUNT(*) FROM Papers), 0) AS fraction_of_papers_with_ml FROM Papers WHERE title ilike '%ML%';
                        ``` SELECT Papers.title FROM Papers WHERE Papers.title ilike '%ML%';
                        ``` SELECT Papers.title FROM Papers WHERE Papers.title ilike '%database%';
                        ``` SELECT Papers.title FROM Papers WHERE Papers.title ilike '%database%';
                        ``` SELECT Authors.fname FROM Authors WHERE Authors.lname ilike '%Ueno%';
                        ``` SELECT Authors.fname FROM Authors WHERE Authors.lname ilike '%Ueno%';
                        ``` SELECT Authors.lname FROM Authors WHERE Authors.fname ilike '%Amal%';
                        ``` SELECT Authors.lname FROM Authors WHERE Authors.fname ilike '%Amal%' ORDER BY Authors.lname NULLS LAST;
                        ``` SELECT a.fname FROM Authors AS a ORDER BY a.fname ASC;
                        ``` SELECT Authors.fname FROM Authors ORDER BY Authors.fname ASC;
                        ``` SELECT Authors.lname FROM Authors ORDER BY Authors.lname ASC;
                        ``` SELECT Authors.lname FROM Authors ORDER BY Authors.lname ASC;
                        ``` SELECT Authors.lname, Authors.fname FROM Authors ORDER BY Authors.lname ASC;
                        ``` SELECT Authors.lname, Authors.fname FROM Authors ORDER BY Authors.lname ASC;
                        ``` SELECT COUNT(DISTINCT actor.last_name) AS number_of_last_names FROM actor;
                        ``` SELECT COUNT(DISTINCT actor.last_name) AS num_last_names FROM actor;
                        ``` SELECT actor.first_name, COUNT(actor.actor_id) AS total_movies FROM actor GROUP BY actor.first_name ORDER BY total_movies DESC NULLS LAST LIMIT 1;
                        ``` SELECT actor.first_name, COUNT(actor.first_name) AS frequency FROM actor GROUP BY actor.first_name ORDER BY frequency DESC LIMIT 1;
                        ``` WITH actor_ratings AS (SELECT a.actor_id, a.first_name, a.last_name, COUNT(r.rating) AS rating FROM actor a JOIN rating r ON a.actor_id = r.actor_id GROUP BY a.actor_id, a.first_name, a.last_name), max_rating AS (SELECT MAX(rating) AS max_rating FROM actor_ratings) SELECT first_name, last_name FROM actor_ratings ar JOIN max_rating mr ON ar.rating = mr.max_rating;
                        ``` SELECT actor.first_name, actor.last_name FROM actor GROUP BY actor.first_name, actor.last_name ORDER BY COUNT(actor.actor_id) DESC LIMIT 1;
                        ``` SELECT DISTINCT address.district FROM address GROUP BY address.district HAVING COUNT(address.address_id) >= 2;
                        ``` SELECT district FROM address GROUP BY district HAVING COUNT(address_id) >= 2;
                        ``` SELECT address.phone, address.postal_code FROM address WHERE address.address ilike '%1031%Daugavpings%Parkway%' ;
                        ``` SELECT address.phone, address.postal_code FROM address WHERE address.address ilike '%1031%Daugavpings%Parkway%' ;
                        ``` SELECT COUNT(*) AS total_addresses FROM address WHERE district = 'California';
                        ``` SELECT COUNT(*) AS total_addresses FROM address WHERE district = 'California';
                        ``` SELECT film_id, title FROM film WHERE rental_rate = 0.99 AND stock_level < 3;
                        ``` SELECT film_id, title FROM film WHERE rental_rate = 0.99 AND inventory < 3;
                        ``` SELECT payment_date FROM payment WHERE amount > 10 AND staff_id IN (SELECT staff_id FROM staff WHERE first_name ilike '%Elsa%')
                        ``` SELECT payment_date FROM payment WHERE amount > 10 AND staff_first_name = 'Elsa'
                        ``` SELECT COUNT(*) FROM customer WHERE active = TRUE;
                        ``` SELECT COUNT(*) AS total_active_customers FROM customer WHERE active = TRUE;
                        ``` SELECT film.title, MAX(film.rental_rate) AS max_rental_rate FROM film GROUP BY film.title;
                        ``` SELECT film.title, film.rental_rate FROM film ORDER BY film.rental_rate DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.store_name, COUNT(i.inventory_id) AS total_inventory FROM stores s JOIN inventory i ON i.store_id = s.store_id GROUP BY s.store_name ORDER BY total_inventory DESC NULLS LAST LIMIT 1;
                        ``` SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(inventory_id) DESC LIMIT 1;
                        ``` SELECT SUM(payment.amount) AS total_amount FROM payment;
                        ``` SELECT SUM(payment.amount) AS total_amount FROM payment;
                        ``` SELECT COUNT(DISTINCT film.language_id) AS number_of_languages FROM film;
                        ``` SELECT COUNT(DISTINCT film.language_id) AS number_of_languages FROM film;
                        ``` SELECT film.title FROM film WHERE film.rating = 'R';
                        ``` SELECT film.title FROM film WHERE film.rating = 'R';
                        ``` SELECT COUNT(*) AS total_stores FROM store;
                        ``` SELECT COUNT(*) FROM store;
                        ``` SELECT COUNT(DISTINCT film.rating) AS number_of_ratings FROM film;
                        ``` SELECT COUNT(DISTINCT film.film_id) AS number_of_different_genres FROM film;
                        ``` SELECT film.title FROM film WHERE 'Deleted scenes' ilike '%special_features%';
                        ``` SELECT film.title FROM film WHERE film.special_features ilike '%Deleted%';
                        ``` SELECT COUNT(*) AS total_items FROM inventory WHERE store_id = 1;
                        ``` SELECT COUNT(inventory_id) AS total_items FROM inventory WHERE store_id = 1;
                        ``` SELECT MIN(payment.payment_date) AS earliest_payment_date FROM payment;
                        ``` SELECT MIN(payment.payment_date) AS earliest_payment_date FROM payment;
                        ``` SELECT film_id, title FROM film WHERE length > 100 OR (rating = 'PG' AND replacement_cost <= 200) AND film_id NOT IN (SELECT film_id FROM film WHERE replacement_cost > 200);
                        ``` SELECT film.title FROM film WHERE (film.length > 100 OR film.rating != 'PG') AND film.replacement_cost <= 200;
                        ``` SELECT customer.store_id, COUNT(customer.customer_id) AS total_customers FROM customer GROUP BY customer.store_id ORDER BY total_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.store_id, COUNT(*) AS customer_count FROM customer c GROUP BY c.store_id ORDER BY customer_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(payment.amount) AS max_amount FROM payment;
                        ``` SELECT MAX(payment.amount) AS max_amount FROM payment;
                        ``` SELECT customer.first_name FROM customer WHERE customer.create_date < '2005-08-23 02:06:01' AND customer.customer_id NOT IN (SELECT rental.customer_id FROM rental);
                        ``` SELECT customer.first_name FROM customer WHERE customer.customer_id NOT IN (SELECT rental.customer_id FROM rental JOIN rental_date ON rental.rental_id = rental_date.rental_id WHERE rental_date.last_update > '2005-08-23 02:06:01') AND customer.active = TRUE;
                        ``` SELECT COUNT(*) AS number_of_branches FROM bank;
                        ``` SELECT COUNT(*) AS total_branches FROM bank;
                        ``` SELECT CAST(SUM(branch_id) AS FLOAT) / NULLIF(COUNT(*), 0) AS avg_customers_per_branch FROM bank;
                        ``` SELECT SUM(b.no_of_customers) AS total_customers FROM bank b;
                        ``` SELECT SUM(branch_id) AS total_customers FROM bank WHERE city = 'New York City';
                        ``` SELECT SUM(banks.no_of_customers) AS total_customers FROM bank WHERE city = 'New York';
                        ``` SELECT AVG(no_of_customers) AS average_customers FROM bank WHERE state = 'Utah';
                        ``` SELECT AVG(banks.no_of_customers) AS average_customers FROM banks WHERE banks.state = 'Utah';
                        ``` SELECT AVG(no_of_customers) AS average_customers FROM bank;
                        ``` AVG(bank.no_of_customers) AS average_number_of_customers FROM bank;
                        ``` SELECT b.city, b.state FROM bank b WHERE b.branch_id = 757071;
                        ``` SELECT branch_id, bname, no_of_customers, city, state FROM bank WHERE bname ilike '%morningside%' ;
                        ``` SELECT bname FROM bank WHERE state = 'New York';
                        ``` SELECT bname FROM bank WHERE state = 'New York';
                        ``` SELECT customer.cust_name FROM customer ORDER BY customer.acc_bal ASC;
                        ``` SELECT customer.cust_name, customer.acc_bal FROM customer ORDER BY customer.acc_bal DESC;
                        ``` SELECT customer.state, customer.acc_type, customer.credit_score FROM customer WHERE customer.no_of_loans = 0;
                        ``` SELECT customer.state, customer.acc_type, customer.credit_score FROM customer WHERE customer.no_of_loans = 0;
                        ``` SELECT DISTINCT city FROM bank;
                        ``` SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank;
                        ``` SELECT COUNT(DISTINCT state) AS num_states FROM bank;
                        ``` SELECT COUNT(DISTINCT state) AS number_of_states FROM bank;
                        ``` SELECT COUNT(DISTINCT customer.acc_type) AS number_of_account_types FROM customer;
                        ``` SELECT COUNT(DISTINCT customer.acc_type) AS number_of_account_types FROM customer;
                        ``` SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name ilike '%a%';
                        ``` SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name ilike '%a%';
                        ``` SELECT customer.cust_name, SUM(customer.acc_bal) AS total_account_balance FROM customer WHERE customer.state IN ('Utah', 'Texas') GROUP BY customer.cust_name;
                        ``` SELECT customer.cust_name, SUM(customer.acc_bal) AS total_balance FROM customer WHERE customer.state IN ('Utah', 'Texas') GROUP BY customer.cust_name;
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type ilike '%saving%' AND customer.acc_type ilike '%checking%';
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type IN ('savings', 'checking') GROUP BY customer.cust_name HAVING COUNT(DISTINCT customer.acc_type) = 2;
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type != 'saving';
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type != 'saving' ORDER BY customer.cust_name NULLS LAST;
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type not ilike '%Mortgages%' ;
                        ``` SELECT customer.cust_name FROM customer WHERE customer.acc_type != 'Mortgage' ORDER BY customer.cust_name NULLS LAST;
                        ``` SELECT customer.cust_name FROM customer WHERE customer.credit_score < (SELECT AVG(customer.credit_score) FROM customer);
                        ``` SELECT customer.cust_name FROM customer WHERE customer.credit_score < (SELECT AVG(customer.credit_score) FROM customer);
                        ``` SELECT b.branch_name FROM bank b WHERE b.no_of_customers = (SELECT MAX(no_of_customers) FROM bank);
                        ``` SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1;
                        ``` SELECT customer.cust_name FROM customer ORDER BY customer.credit_score ASC LIMIT 1;
                        ``` SELECT customer.cust_name FROM customer ORDER BY customer.credit_score ASC NULLS LAST LIMIT 1;
                        ``` SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer WHERE customer.credit_score = (SELECT MAX(customer.credit_score) FROM customer);
                        ``` SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer WHERE customer.credit_score = (SELECT MAX(customer.credit_score) FROM customer);
                        ``` SELECT bank.state, SUM(bank.no_of_customers) AS total_customers FROM bank GROUP BY bank.state ORDER BY total_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT state, SUM(no_of_customers) AS total_customers FROM bank GROUP BY state ORDER BY total_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT customer.acc_type, AVG(customer.acc_bal) AS average_account_balance FROM customer WHERE customer.credit_score < 50 GROUP BY customer.acc_type;
                        ``` SELECT customer.acc_type, AVG(customer.acc_bal) AS average_account_balance FROM customer WHERE customer.credit_score < 50 GROUP BY customer.acc_type;
                        ``` SELECT customer.state, SUM(customer.acc_bal) AS total_account_balance FROM customer WHERE customer.credit_score > 100 GROUP BY customer.state;
                        ``` SELECT state, SUM(acc_bal) AS total_balance FROM customer WHERE credit_score > 100 GROUP BY state;
                        ``` SELECT AVG(customer.credit_score) AS average_credit_score FROM customer WHERE customer.no_of_loans > 0;
                        ``` SELECT AVG(customer.credit_score) AS average_credit_score FROM customer WHERE customer.no_of_loans > 0;
                        ``` SELECT AVG(customer.credit_score) FROM customer WHERE customer.no_of_loans IS NULL;
                        ``` SELECT AVG(customer.credit_score) AS average_credit_score FROM customer WHERE customer.no_of_loans = 0;
                        ``` SELECT COUNT(*) AS total_notes FROM Assessment_Notes;
                        ``` SELECT date_of_notes FROM Assessment_Notes;
                        ``` SELECT COUNT(*) AS number_of_addresses FROM Addresses WHERE zip_postcode = '197';
                        ``` SELECT COUNT(DISTINCT behavior_incident.incident_type_code) AS number_of_incident_type_codes FROM behavior_incident;
                        ``` SELECT DISTINCT detention_type_code FROM Detention;
                        ``` SELECT date_incident_start, date_incident_end FROM behavior_incident WHERE incident_type_code = 'NOISE' ORDER BY date_incident_start NULLS LAST;
                        ``` SELECT detention_summary FROM Detention;
                        ``` SELECT Students.first_name, Students.middle_name, Students.last_name, Students.cell_phone_number, Students.email_address FROM Students;
                        ``` SELECT Students.email_address FROM Students WHERE Students.first_name ilike '%Emma%' AND Students.last_name ilike '%Rohan%';
                        ``` SELECT COUNT(DISTINCT student_id) AS number_of_students FROM Students_in_Detention;
                        ``` SELECT Teachers.gender FROM Teachers WHERE Teachers.last_name ilike '%Medehurst%';
                        ``` SELECT Ref_Incident_Type.incident_type_description FROM Ref_Incident_Type WHERE Ref_Incident_Type.incident_type_code = 'VIOLENCE';
                        ``` SELECT MIN(monthly_rental) AS min_monthly_rental, MAX(monthly_rental) AS max_monthly_rental FROM Student_Addresses;
                        ``` SELECT Teachers.first_name FROM Teachers WHERE 'man' ilike '%Teachers.email_address%';
                        ``` SELECT Assessment_Notes.notes_id, Assessment_Notes.student_id, Assessment_Notes.teacher_id, Assessment_Notes.date_of_notes, Assessment_Notes.text_of_notes, Assessment_Notes.other_details FROM Assessment_Notes ORDER BY Assessment_Notes.date_of_notes ASC;
                        ``` SELECT DISTINCT Addresses.city FROM Addres ORDER BY Addres.city ASC;
                        ``` SELECT teachers.first_name, teachers.last_name FROM teachers ORDER BY teachers.last_name ASC;
                        ``` SELECT Student_Addresses.student_id, Student_addresses.address_id, Student_addresses.monthly_rental FROM Student_addresses ORDER BY Student_addresses.monthly_rental DESC;
                        ``` SELECT COUNT(*) AS total_students FROM students WHERE student_id NOT IN (SELECT student_id FROM behavior_incidents);
                        ``` SELECT Teachers.last_name FROM Teachers WHERE Teachers.teacher_id NOT IN (SELECT Detention.teacher_id FROM Detention);
                        ``` SELECT DISTINCT Maintenance_Engineers.last_name FROM Maintenance_Engineers;
                        ``` SELECT COUNT(DISTINCT fault_status) AS number_of_fault_status FROM fault_log_parts;
                        ``` SELECT Maintenance_Engineers.first_name, Maintenance_Engineers.last_name FROM Maintenance_Engineers WHERE Maintenance_Engineers.engineer_id NOT IN (SELECT Maintenance_Assets.engineer_id FROM Maintenance_Assets);
                        ``` SELECT a.asset_id, a.asset_details, a.asset_make, a.asset_model FROM assets AS a;
                        ``` SELECT MIN(assets.asset_acquired_date) AS earliest_acquisition_date FROM assets;
                        ``` SELECT DISTINCT Assets.asset_model FROM Assets;
                        ``` SELECT a.asset_id, a.asset_make, a.asset_model, a.asset_details FROM assets a ORDER BY a.asset_disposed_date ASC;
                        ``` SELECT parts.part_id, CAST(parts.chargeable_amount AS FLOAT) AS chargeable_amount FROM parts WHERE parts.chargeable_yn = 'Y' ORDER BY parts.chargeable_amount ASC NULLS LAST;
                        ``` SELECT Staff.gender FROM Staff GROUP BY Staff.gender HAVING COUNT(Staff.staff_id) > COUNT(CASE WHEN Staff.gender = 'female' THEN Staff.staff_id END) / 2;
                        ``` SELECT a.asset_model FROM assets a LEFT JOIN fault_logs fl ON a.asset_id = fl.asset_id WHERE fl.asset_id IS NULL;
                        ``` SELECT DISTINCT station.local_authority, array_agg(DISTINCT station.services) AS services FROM station GROUP BY hstation.local_authority;
                        ``` SELECT t.train_number, t.name FROM train t ORDER BY CAST(t.time AS TIME) ASC;
                        ``` SELECT t.train_number, CAST(t.time AS FLOAT) AS time FROM train t WHERE t.destination = 'Chennai' ORDER BY time NULLS LAST;
                        ``` SELECT COUNT(*) AS number_of_trains FROM train WHERE name ilike '%Express%';
                        ``` SELECT t.train_number, to_number(t.time, '999999999') AS time_in_minutes FROM train t WHERE t.origin = 'Chennai' AND t.destination = 'Guruvayur';
                        ``` SELECT train.origin, COUNT(*) AS total_trains FROM train GROUP BY train.origin;
                        ``` SELECT daily_weather.day_of_week, AVG(daily_weather.high_temperature) AS average_high_temperature FROM daily_weather GROUP BY daily_weather.day_of_week;
                        ``` SELECT COUNT(DISTINCT station.services) AS number_of_services FROM station;
                        ``` SELECT MIN(low_temperature) AS lowest_low_temperature, MAX(wind_speed_mph) AS highest_wind_speed_mph FROM weekly_weather;
                        ``` SELECT DISTINCT train.origin FROM train GROUP BY train.origin HAVING COUNT(train.id) > 1;
                        ``` SELECT COUNT(*) AS num_professors FROM CLASS WHERE CLASS_CODE = 'ACCT-211';
                        ``` SELECT COUNT(DISTINCT PROF_NUM) AS number_of_professors FROM CLASS WHERE CLASS_CODE = 'ACCT-211';
                        ``` SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME ILIKE '%Accounting%'
                        ``` SELECT DEPARTMENT.SCHOOL_CODE FROM DEPARTMENT WHERE DEPARTMENT.DEPT_NAME ILIKE '%Accounting%';
                        ``` SELECT COURSE.CRS_CREDIT, COURSE.CRS_DESCRIPTION FROM COURSE WHERE COURSE.CRS_CODE = 'CIS-220';
                        ``` SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'CIS-220';
                        ``` SELECT DEPARTMENT.DEPT_ADDRESS FROM DEPARTMENT WHERE DEPARTMENT.DEPT_NAME ILIKE '%History%';
                        ``` SELECT department.dept_name FROM department WHERE department.dept_name ilike '%history%';
                        ``` SELECT COUNT(DISTINCT dept_address) AS num_locations FROM department WHERE dept_code = 'BUS';
                        ``` SELECT DISTINCT DEPARTMENT.DEPT_ADDRESS FROM DEPARTMENT WHERE DEPARTMENT.DEPT_CODE = 'BUS';
                        ``` SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_ADDRESS) AS num_locations FROM DEPARTMENT GROUP BY SCHOOL_CODE;
                        ``` SELECT SCHOOL_CODE, COUNT(DEPT_ADDRESS) AS num_addresses FROM DEPARTMENT GROUP BY SCHOOL_CODE;
                        ``` SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'QM-261';
                        ``` SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'QM-261';
                        ``` SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_num FROM DEPARTMENT GROUP BY SCHOOL_CODE;
                        ``` SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_num FROM DEPARTMENT GROUP BY SCHOOL_CODE;
                        ``` SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_num FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DEPT_CODE) < 5;
                        ``` SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_count FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(APts) < 5;
                        ``` SELECT COUNT(DISTINCT class_section) AS num_sections FROM class;
                        ``` SELECT COURSE.CRN_ABBREV, COUNT(CLASS.CLASS_SECTION) AS num_sections FROM COURSE JOIN CLASS ON COURSE.CRN_ABBREV = CLASS.CRS_CODE GROUP BY COURSE.CRN_ABBREV;
                        ``` SELECT dept_code, COUNT(crs_code) AS total_courses FROM course GROUP BY dept_code;
                        ``` SELECT COUNT(CRS_CREDIT) AS total_credits FROM COURSE WHERE DEPT_CODE = 'DEPARTMENT_CODE';
                        ``` SELECT COUNT(*) AS total_classes FROM (SELECT CLASS.CLASS_CODE, COUNT(*) AS num_classes FROM CLASS GROUP BY CLASS.CLASS_CODE HAVING COUNT(*) >= 2) AS subquery;
                        ``` SELECT c.class_code, COUNT(*) AS num_classes FROM class c GROUP BY c.class_code HAVING COUNT(*) >= 2;
                        ``` SELECT COUNT(EMPLOYEE.EMP_NUM), EMPLOYEE.EMP_JOBCODE FROM EMPLOYEE GROUP BY EMPLOYEE.EMP_JOBCODE ORDER BY COUNT(EMPLOYEE.EMP_NUM) DESC LIMIT 1;
                        ``` SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1;
                        ``` SELECT dept_code, COUNT(*) AS num_professors FROM professor WHERE pro_high_degree = 'Ph.D.' GROUP BY dept_code;
                        ``` SELECT p.dept_code, CAST(COUNT(CASE WHEN phd = 'Yes' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_with_phd FROM professor p GROUP BY p.dept_code;
                        ``` SELECT dept.dept_name, COUNT(*) AS num_students FROM student s JOIN department dept ON s.dept_code = dept.dept_code GROUP BY dept.dept_name;
                        ``` SELECT dept.dept_name, COUNT(*) AS total_students FROM student AS st JOIN department AS dept ON st.dept_code = dept.dept_code GROUP BY dept.dept_name;
                        ``` SELECT dept_code, COUNT(stu_hrs) AS total_hours FROM student GROUP BY dept_code;
                        ``` SELECT dept_code, COUNT(*) AS total_hours FROM student GROUP BY dept_code;
                        ``` SELECT dept_code, MAX(stu_gpa) AS max_gpa, AVG(stu_gpa) AS avg_gpa, MIN(stu_gpa) AS min_gpa FROM student GROUP BY dept_code;
                        ``` SELECT dept_code, MAX(stu_gpa) AS max_gpa, MIN(stu_gpa) AS min_gpa, AVG(stu_gpa) AS avg_gpa FROM student GROUP BY dept_code;
                        ``` SELECT COUNT(DISTINCT SCHOOL_CODE) AS total_schools FROM DEPARTMENT;
                        ``` SELECT COUNT(DISTINCT SCHOOL_CODE) AS school_count FROM DEPARTMENT;
                        ``` SELECT COUNT(DISTINCT class_code) AS num_classes FROM class;
                        ``` SELECT COUNT(DISTINCT class_code) AS num_classes FROM class;
                        ``` SELECT COUNT(*) AS total_courses FROM CLASS;
                        ``` SELECT COUNT(DISTINCT class_code) AS num_class_codes FROM class;
                        ``` SELECT COUNT(*) AS total_departments FROM department;
                        ``` SELECT COUNT(DISTINCT dept_code) AS number_of_departments FROM department;
                        ``` SELECT COUNT(*) AS total_sections FROM class WHERE crs_code = 'ACCT-211';
                        ``` SELECT COUNT(DISTINCT CLASS_SECTION) AS num_sections FROM CLASS WHERE CRS_CODE = 'ACCT-211';
                        ``` SELECT COUNT(*) AS total_employees FROM EMPLOYEE;
                        ``` SELECT COUNT(*) AS total_employees FROM EMPLOYEE;
                        ``` SELECT COUNT(*) FROM PROFESSOR WHERE PROF_HIGH_DEGREE ilike '%Ph.D.%';
                        ``` SELECT COUNT(*) AS total_professors FROM professor WHERE phd_flag = 'Yes';
                        ``` SELECT department.dept_name FROM department ORDER BY department.dept_name NULLS LAST;
                        ``` SELECT dept_name FROM department ORDER BY dept_name ASC;
                        ``` SELECT DISTINCT class_code FROM class WHERE class_room = 'KLR209';
                        ``` SELECT DISTINCT class_code FROM class WHERE class_room = 'KLR209';
                        ``` SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE EMPLOYEE.EMP_JOBCODE = 'PROF' ORDER BY EMPLOYEE.EMP_DOB NULLS LAST;
                        ``` SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE EMPLOYEE.EMP_JOBCODE = 'Professor' ORDER BY EMPLOYEE.EMP_DOB NULLS LAST;
                        ``` SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME FROM EMPLOYEE ORDER BY EMPLOYEE.EMP_HIREDATE ASC LIMIT 1;
                        ``` SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME FROM EMPLOYEE ORDER BY EMPLOYEE.EMP_DOB ASC LIMIT 1;
                        ``` SELECT MIN(STU_GPA) AS min_gpa, MAX(STU_GPA) AS max_gpa FROM STUDENT WHERE STU_GPA > 3;
                        ``` SELECT MIN(STUDENT.STU_DOB), MAX(STUDENT.STU_LNAME), MAX(STUDENT.STU_FNAME), AVG(STUDENT.STU_GPA) FROM STUDENT WHERE STUDENT.STU_GPA > 3;
                        ``` SELECT e.emp_fname FROM employee e LEFT JOIN CLASS_EMPLOYEE ce ON e.emp_num = ce.emp_num WHERE cee.emp_num IS NULL;
                        ``` SELECT e.emp_fname FROM employee e LEFT JOIN class_employee ce ON e.emp_num = ce.emp_num WHERE ce.emp_num IS NULL;
                        ``` SELECT COUNT(*) FROM PROFESSOR WHERE (PROF_HIGH_DEGREE ilike '%Ph.D.%' OR PROF_HIGH_DEGREE ilike '%MA%');
                        ``` SELECT COUNT(*) FROM PROFESSOR WHERE (PROF_HIGH_DEGREE = 'Ph.D.' OR PROF_HIGH_DEGREE = 'Masters');
                        ``` SELECT s.stu_fname, s.stu_gpa, s.stu_phone FROM student s ORDER BY s.stu_gpa DESC NULLS LAST LIMIT 5;
                        ``` SELECT s.stu_fname, s.stu_gpa, s.stu_phone FROM student s ORDER BY s.stu_gpa DESC NULLS LAST LIMIT 5;
                        ``` SELECT s.stu_fname, AVG(s.stu_gpa) AS average_gpa FROM student s WHERE s.stu_gpa < AVG(s.stu_gpa) GROUP BY s.stu_fname;
                        ``` SELECT s.stu_fname, s.stu_gpa FROM STUDENT s WHERE s.stu_gpa < (SELECT AVG(stu_gpa) FROM STUDENT);
                        ``` SELECT COUNT(*) AS total_club FROM club;
                        ``` SELECT COUNT(*) AS total_clubbs FROM club;
                        ``` SELECT DISTINCT club.region FROM club ORDER BY club.region ASC;
                        ``` SELECT region FROM club ORDER BY region ASC;
                        ``` SELECT AVG(gold) AS average_gold FROM club_rank;
                        ``` SELECT AVG(gold) AS average_gold FROM club_rank;
                        ``` SELECT competition.competition_type, competition.country FROM competition ORDER BY competition.competition_type NULLS LAST, competition.country NULLS LAST;
                        ``` SELECT competition.competition_type, competition.country FROM competition ORDER BY competition.competition_type NULLS LAST, competition.country NULLS LAST;
                        ``` SELECT DISTINCT competition.year FROM competition WHERE competition.competition_type not ilike '%tournament%' ORDER BY competition.year NULLS LAST;
                        ``` SELECT DISTINCT competition.year FROM competition WHERE competition.competition_type != 'tournament';
                        ``` SELECT MIN(Silver) AS min_silver, MAX(Silver) AS max_silver FROM club_rank;
                        ``` SELECT MIN(silver) AS min_silver, MAX(silver) AS max_silver FROM club_rank;
                        ``` SELECT COUNT(*) FROM club_rank WHERE total < 10;
                        ``` SELECT COUNT(*) FROM club_rank WHERE total < 10;
                        ``` SELECT c.name FROM club c ORDER BY CAST(c.start_year AS integer);
                        ``` SELECT c.name FROM club c WHERE c.start_year = (SELECT MIN(start_year) FROM club);
                        ``` SELECT c.name FROM club c;
                        ``` SELECT club.name FROM club ORDER BY club.name DESC;
                        ``` SELECT p.position, AVG(p.points) AS average_points FROM player p GROUP BY p.position;
                        ``` SELECT p.position, AVG(p.points) AS average_points FROM player p GROUP BY p.position;
                        ``` SELECT p.position, AVG(p.points) AS average_points FROM player p GROUP BY p.position HAVING AVG(p.points) > 20 ORDER BY p.position NULLS LAST;
                        ``` SELECT p.position FROM player p GROUP BY p.position HAVING AVG(p.points) > 20;
                        ``` SELECT competition.competition_type, COUNT(*) AS competition_count FROM competition GROUP BY competition.competition_type;
                        ``` SELECT competition_type, COUNT(competition_id) AS competition_count FROM competition GROUP BY competition_type;
                        ``` SELECT competition.competition_type, COUNT(*) AS frequency FROM competition GROUP BY competition.competition_type ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT competition.competition_type FROM competition GROUP BY competition.competition_type ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1;
                        ``` SELECT competition.competition_type FROM competition GROUP BY competition.competition_type HAVING COUNT(competition.competition_id) > 5;
                        ``` SELECT c.competition_type, COUNT(*) AS num_competitions FROM competition c GROUP BY c.competition_type HAVING COUNT(*) > 5;
                        ``` SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.player_id IS NULL;
                        ``` SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.player_id IS NULL;
                        ``` SELECT p.position FROM player p WHERE p.points > 20 AND p.points < 10;
                        ``` SELECT p.name, p.position FROM player p WHERE p.points > 20 AND p.points < 10;
                        ``` SELECT SUM(Points) AS total_points FROM player;
                        ``` SELECT SUM(player_id.points) AS total_points FROM player;
                        ``` SELECT COUNT(DISTINCT player.position) AS num_positions FROM player;
                        ``` SELECT COUNT(DISTINCT player.position) AS number_of_positions FROM player;
                        ``` SELECT p.name FROM player p WHERE p.points > (SELECT AVG(points) FROM player);
                        ``` SELECT p.name FROM player p WHERE p.points > (SELECT AVG(points) FROM player);
                        ``` SELECT p.position, COUNT(*) AS player_count FROM player p WHERE p.points < 30 GROUP BY p.position;
                        ``` SELECT p.position, COUNT(*) AS player_count FROM player p WHERE p.points < 30 GROUP BY p.position;
                        ``` SELECT competition.country, COUNT(competition.competition_id) AS num_competitions FROM competition WHERE competition.competition_type ilike '%tournament%' GROUP BY competition.country ORDER BY num_competitions DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.country FROM competition c GROUP BY c.country ORDER BY COUNT(c.competition_id) DESC LIMIT 1;
                        ``` SELECT DISTINCT competition.country FROM competition WHERE competition.competition_type ilike '%Friendly%' AND competition.competition_type ilike '%Tournament%';
                        ``` SELECT DISTINCT competition.country FROM competition WHERE competition.competition_type ilike '%friendly%' AND competition.competition_type ilike '%tournament%';
                        ``` SELECT DISTINCT c.country FROM competition c WHERE c.competition_type not ilike '%Friendly%' ;
                        ``` SELECT DISTINCT competition.country FROM competition WHERE competition_type != 'friendly';
                        ``` SELECT SUM(furniture.num_of_component) AS total_components FROM furniture;
                        ``` SELECT furniture.name, furniture.furniture_id FROM furniture ORDER BY furniture.market_rate DESC NULLS LAST LIMIT 1;
                        ``` SELECT SUM(furniture.market_rate) AS total_market_rate FROM furniture ORDER BY furniture.market_rate DESC NULLS LAST LIMIT 2;
                        ``` SELECT furniture.name, CAST(furniture.num_of_component AS FLOAT) / NULLIF(MAX(furniture.num_of_component), 0) AS fraction FROM furniture GROUP BY furniture.name HAVING AVG(furniture.num_of_component) > 10;
                        ``` SELECT f.name, f.num_of_component FROM furniture AS f WHERE f.market_rate = (SELECT MIN(f2.market_rate) FROM furniture AS f2);
                        ``` SELECT m.name, CAST(m.num_of_shops AS FLOAT) / NULLIF(MAX(s.num_of_shops), 0) AS proportion FROM manufacturer m JOIN shop s ON m.manufacturer_id = s.manufacturer_id GROUP BY m.name, m.open_year HAVING COUNT(*) > 1;
                        ``` SELECT AVG(manufacturer.num_of_factories) AS average_number_of_factories FROM manufacturer WHERE manufacturer.num_of_shops > 20;
                        ``` SELECT m.manufacturer_id, m.name FROM manufacturer AS m ORDER BY m.open_year NULLS LAST;
                        ``` SELECT manufacturer.name, manufacturer.open_year FROM manufacturer WHERE (manufacturer.num_of_factories < 10 OR manufacturer.num_of_shops > 10);
                        ``` SELECT AVG(Num_of_Factories) AS average_factories, MAX(Num_of_Shops) AS max_shops FROM manufacturer WHERE Open_Year < 1990;
                        ``` SELECT furniture.name, SUM(furniture.market_share) AS total_market_share FROM furniture WHERE furniture.funiture_id NOT IN (SELECT component.furniture_id FROM component) GROUP BY furniture.name;
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.salary < 6000;
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.salary < 6000;
                        ``` SELECT e.first_name, d.department_number FROM employees AS e JOIN departments AS d ON e.department_id = d.department_id WHERE e.last_name ILIKE '%McEwen%';
                        ``` SELECT e.first_name, d.department_number FROM employees AS e JOIN departments AS d ON e.department_id = d.department_id WHERE e.last_name ILIKE '%McEwen%';
                        ``` SELECT first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id FROM employees WHERE department_id IS NULL;
                        ``` SELECT first_name, last_name FROM employees WHERE department_id IS NULL;
                        ``` SELECT departments.department_name FROM departments WHERE departments.department_name ilike '%Marketing%';
                        ``` SELECT departments.department_name FROM departments WHERE departments.department_name ilike '%Marketing%' ORDER BY departments.department_name NULLS LAST;
                        ``` SELECT employees.hire_date FROM employees WHERE employees.first_name not ilike '%M%' AND employees.first_name not ilike 'm%';
                        ``` SELECT employees.hire_date FROM employees WHERE employees.first_name not ilike '%M%' AND employees.first_name not ilike '%m%';
                        ``` SELECT e.first_name, e.last_name, e.hire_date, e.salary, d.department_id FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.first_name not ilike '%M%' ;
                        ``` SELECT e.first_name, e.last_name, e.hire_date, e.salary, d.department_id FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.first_name not ilike '%M%' ;
                        ``` SELECT e.first_name, e.last_name, to_char(e.hire_date,'DD-Mon-YYYY') AS hire_date, e.salary, d.department_number FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE first_name not ilike '%M%' ORDER BY d.department_number ASC;
                        ``` SELECT e.first_name, e.last_name, e.hire_date, e.salary, e.department_id FROM employees e WHERE e.first_name not ilike '%M%' ORDER BY e.department_id ASC;
                        ``` SELECT COUNT(*) AS total_employees FROM employees WHERE salary BETWEEN 8000 AND 12000;
                        ``` SELECT employees.phone_number FROM employees WHERE employees.salary BETWEEN 8000 AND 12000;
                        ``` SELECT employees.employee_id, employees.first_name, employees.last_name, employees.email, employees.phone_number, employees.hire_date, employees.job_id, employees.salary, employees.commission_pct, employees.manager_id, employees.department_id FROM employees WHERE (employees.salary BETWEEN 8000 AND 12000) AND ((employees.commission_pct IS NOT NULL) OR (employees.department_id != 40))
                        ``` SELECT employees.first_name, employees.last_name, employees.salary, employees.commission_pct, employees.department_id FROM employees WHERE (employees.salary BETWEEN 8000 AND 12000) AND ((employees.commission_pct IS NOT NULL) OR (employees.department_id != 40))
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.commission_pct IS NULL;
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.commission_pct IS NULL;
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.first_name ilike '%m';
                        ``` SELECT e.first_name, e.last_name, e.salary FROM employees e WHERE e.first_name ilike '%m';
                        ``` SELECT employees.employee_id, employees.hire_date FROM employees WHERE employees.hire_date BETWEEN '2007-11-05' AND '2009-07-05';
                        ``` SELECT e.employee_id, e.hire_date FROM employees e WHERE to_date(e.hire_date::text, 'YYYY-MM-DD') BETWEEN '2007-11-05' AND '2009-07-05';
                        ``` SELECT employees.first_name, employees.last_name FROM employees WHERE employees.department_id IN (70, 90) ORDER BY employees.first_name NULLS LAST, employees.last_name NULLS LAST;
                        ``` SELECT first_name, last_name FROM employees WHERE department_id IN (70, 90);
                        ``` SELECT e.first_name, e.last_name, m.manager_number, e.salary FROM employees AS e JOIN managers AS m ON e.manager_id = m.manager_id;
                        ``` SELECT e.first_name, e.last_name, m.salary AS manager_salary, m.manager_id AS manager_id FROM employees e JOIN employees m ON e.manager_id = m.employee_id;
                        ``` SELECT employees.first_name, employees.last_name, employees.email, employees.phone_number, employees.hire_date, employees.job_id, employees.salary, employees.commission_pct, employees.manager_id, employees.department_id FROM employees WHERE employees.hire_date < '2002-06-21' ;
                        ``` SELECT first_name, last_name FROM employees WHERE hire_date < '2002-06-21' ORDER BY first_name, last_name NULLS LAST;
                        ``` SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE (employees.first_name ilike 'D%' OR employees.first_name ilike 'S%') ORDER BY employees.salary DESC;
                        ``` SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE (employees.first_name ilike 'D%' OR employees.first_name ilike 'S%') ORDER BY employees.salary DESC;
                        ``` SELECT first_name, last_name FROM employees WHERE hire_date > '1987-09-07'
                        ``` SELECT first_name, last_name FROM employees WHERE hire_date > '1987-09-07'
                        ``` SELECT j.job_title FROM jobs j WHERE j.min_salary > 9000;
                        ``` SELECT j.job_title FROM jobs j WHERE j.min_salary > 9000;
                        ``` SELECT j.job_title, (MAX(j.max_salary) - MIN(j.min_salary)) AS salary_range FROM jobs j WHERE j.max_salary BETWEEN 12000 AND 18000 GROUP BY j.job_title;
                        ``` SELECT j.job_title, to_char(AVG(s.salary), 'FM999990D00') AS average_salary FROM salaries s JOIN jobs j ON s.job_id = j.job_id WHERE j.max_salary BETWEEN 12000 AND 18000 GROUP BY j.job_title;
                        ``` SELECT employees.email FROM employees WHERE employees.commission_pct IS NULL AND employees.salary BETWEEN 7000 AND 12000 AND employees.department_id = 50;
                        ``` SELECT employees.email FROM employees WHERE employees.commission_pct IS NULL AND employees.salary BETWEEN 7000 AND 12000 AND employees.department_id = 50;
                        ``` SELECT e.employee_id, p.position_start_date, lag(p.position_end_date) OVER (PARTITION BY e.employee_id ORDER BY p.position_start_date) AS previous_position_end_date FROM employees e JOIN position_history p ON e.employee_id = p.employee_id;
                        ``` SELECT e.employee_id, j.job_id, ph.start_date, ph.end_date FROM employees e JOIN job_history ph ON e.employee_id = ph.employee_id JOIN jobs j ON j.job_id = ph.job_id;
                        ``` SELECT e.department_id, COUNT(e.employee_id) AS employee_count FROM employees e GROUP BY e.department_id HAVING COUNT(e.employee_id) > 10 AND commission_pct IS NOT NULL;
                        ``` SELECT DISTINCT employees.department_id FROM employees WHERE employees.commission_pct IS NOT NULL GROUP BY employees.department_id HAVING COUNT(employees.employee_id) > 10;
                        ``` SELECT DISTINCT managers.department_id FROM (SELECT employees.department_id, COUNT(employees.employee_id) AS employee_count FROM employees WHERE employees.job_id = 'MANAGER' GROUP BY employees.department_id HAVING COUNT(employees.employee_id) >= 4) AS managers;
                        ``` SELECT DISTINCT department_id FROM employees WHERE COUNT(employee_id) > 3;
                        ``` SELECT departments.department_id, AVG(employees.salary) AS average_salary FROM employes JOIN departments ON employes.department_id = departments.department_id GROUP BY departments.department_id;
                        ``` SELECT AVG(employees.salary) AS average_salary FROM employees WHERE employees.commission_pct IS NOT NULL;
                        ``` SELECT c.country_id, COUNT(l.location_id) AS city_count FROM countries c JOIN locations l ON c.country_id = l.country_id GROUP BY c.country_id;
                        ``` SELECT locations.country_id, COUNT(locations.city) AS city_count FROM locations GROUP BY locations.country_id;
                        ``` SELECT r.EMPLOYEE_ID FROM (SELECT e.EMPLOYEE_ID, COUNT(j.JOB_ID) AS COUNT_JOBS FROM employee e JOIN job_history j ON e.EMPLOYEE_ID = j.EMPLOYEE_ID GROUP BY e.EMPLOYEE_ID HAVING COUNT(j.JOB_ID) > 2) r JOIN (SELECT j.EMPLOYEE_ID, (j.END_DATE - j.START_DATE)/(60*60*24*60) AS DAY FROM job_history j WHERE (j.END_DATE - j.START_DATE)/(60*60*24*60) > 300) d ON r.EMPLOYEE_ID = d.EMPLOYEE_ID;
                        ``` SELECT r.EMPLOYEE_ID FROM (SELECT e.EMPLOYEE_ID, COUNT(j.JOB_ID) AS COUNT_JOBS FROM employee e JOIN job_history j ON e.EMPLOYEE_ID = j.EMPLOYEE_ID GROUP BY e.EMPLOYEE_ID HAVING COUNT(j.JOB_ID) > 1) r JOIN (SELECT j.EMPLOYEE_ID, (j.END_DATE - j.START_DATE)/(24*60*60) AS DAY FROM job_history j WHERE (j.END_DATE - j.START_DATE)/(24*60*60)) d ON r.EMPLOYEE_ID = d.EMPLOYEE_ID WHERE d.DAYS > 300;
                        ``` SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(job_id) >= 2;
                        ``` SELECT DISTINCT r.employee_id FROM (SELECT eh.employee_id, COUNT(eh.job_history_id) AS job_count FROM employee_history eh GROUP BY eh.employee_id HAVING COUNT(eh.job_history_id) >= 2) r;
                        ``` SELECT e.first_name, e.last_name FROM employees e WHERE e.salary > (SELECT salaries.salary FROM employees salaries WHERE salaries.employee_id = 163) ;
                        ``` SELECT e.first_name, e.last_name FROM employees e WHERE e.salary > (SELECT salaries.salary FROM employees salaries WHERE salaries.employee_id = 163)
                        ``` SELECT d.department_id, MIN(e.salary) AS min_salary FROM employees e JOIN department d ON e.department_id = d.department_id GROUP BY d.department_id;
                        ``` SELECT d.department_id, MIN(e.salary) AS min_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_id;
                        ``` SELECT e.first_name, e.last_name, d.department_id FROM employees e JOIN (SELECT department_id, MIN(salary) AS min_salary FROM employees GROUP BY department_id) d ON e.salary = d.min_salary;
                        ``` SELECT e.first_name, e.last_name, d.department_id FROM employees AS e JOIN (SELECT department_id, MIN(salary) AS min_salary FROM employees GROUP BY department_id) AS d ON e.salary = d.min_salary AND e.department_id = d.department_id;
                        ``` SELECT employees.employee_id FROM employees WHERE employees.salary > (SELECT AVG(salary) FROM employees);
                        ``` SELECT e.employee_id FROM employees AS e WHERE e.salary > (SELECT AVG(salary) FROM employees);
                        ``` SELECT e.employee_id, e.salary FROM employees e WHERE first_name ilike '%Payam%';
                        ``` SELECT e.employee_id, e.salary FROM employees e WHERE e.first_name ilike '%Payam%' ORDER BY e.salary DESC NULLS LAST;
                        ``` SELECT departments.department_name FROM departments WHERE departments.department_name ilike '%Marketing%';
                        ``` SELECT departments.department_name FROM departments WHERE departments.department_name ilike '%Marketing%' ORDER BY departments.department_name NULLS LAST;
                        ``` SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(job_id) >= 2;
                        ``` SELECT DISTINCT r.EMPLOYEE_ID FROM (SELECT e.EMPLOYEE_ID, COUNT(j.JOB_ID) AS COUNT_JOBS FROM employee e JOIN job_history j ON e.EMPLOYEE_ID = j.EMPLOYEE_ID GROUP BY e.EMPLOYEE_ID HAVING COUNT(j.JOB_ID) >= 2) r;
                        ``` SELECT DISTINCT employees.department_id FROM employees WHERE (SELECT COUNT(*) FROM employees WHERE employees.manager_id = employees.employee_id) >= 4;
                        ``` SELECT DISTINCT managers.department_id FROM (SELECT employees.department_id, COUNT(employees.employee_id) AS employee_count FROM employees GROUP BY employees.department_id HAVING COUNT(employees.employee_id) >= 4) AS managers JOIN employees ON managers.department_id = employees.department_id AND managers.employee_id != employees.employee_id;
                        ``` SELECT e.EMPLOYEE_ID FROM employees e WHERE e.SALARY > 8000;
                        ``` SELECT employees.employee_id FROM employees WHERE employees.salary > 8000 GROUP BY employees.employee_id;
                        ``` SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE employees.salary >= (SELECT MIN(employees.salary) FROM employees) AND employees.salary <= 2500;
                        ``` SELECT first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id FROM employees WHERE salary > MIN(salary) AND salary < 2500;
                        ``` SELECT e.employee_id FROM employees e WHERE e.manager_id NOT BETWEEN 100 AND 200;
                        ``` SELECT e.employee_id FROM employees e JOIN department d ON e.department_id = d.department_id WHERE e.manager_id not BETWEEN 100 AND 200;
                        ``` SELECT e.first_name, e.last_name, e.hire_date FROM employees e JOIN employees c ON e.department_id = c.department_id WHERE c.first_name ilike '%Clara%' ;
                        ``` SELECT e.first_name, e.last_name, e.hire_date FROM employees e JOIN employees c ON e.department_id = c.department_id WHERE c.first_name ilike '%Clara%' ;
                        ``` SELECT e.first_name, e.last_name, e.hire_date FROM employees e WHERE e.department_id = (SELECT department_id FROM employees WHERE first_name ilike '%Clara%' AND last_name ilike '%Clara%') AND e.first_name not ilike '%Clara%' AND e.last_name not ilike '%Clara%';
                        ``` SELECT e.first_name, e.last_name, e.hire_date FROM employees e WHERE e.department_id IN (SELECT d.department_id FROM employees d WHERE d.first_name ilike '%Clara%') AND e.first_name not ilike '%Clara%'
                        ``` SELECT e.employee_id, e.first_name, e.last_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.first_name ilike '%T%' OR e.last_name ilike '%T%';
                        ``` SELECT e.employee_id, e.first_name, e.last_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE e.first_name ilike '%T%' ;
                        ``` SELECT e.employee_id, e.first_name, e.last_name, e.salary FROM employees e WHERE e.salary > (SELECT AVG(salary) FROM employees) AND EXISTS (SELECT 1 FROM employees d WHERE d.department_id = e.department_id AND d.first_name ilike '%J%')
                        ``` SELECT e.employee_id, e.first_name, e.last_name, e.salary FROM employees e WHERE e.salary > (SELECT AVG(salary) FROM employees) AND EXISTS (SELECT 1 FROM employees d WHERE d.department_id = e.department_id AND d.first_name ilike '%J%')
                        ``` SELECT e.employee_id, e.job_id FROM employees e WHERE e.salary < (SELECT MIN(e2.salary) FROM employees e2 WHERE e2.job_title ilike '%MK_MAN%')
                        ``` SELECT e.employee_id, j.job_id FROM employees e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_title = 'MK_MAN' AND e.salary < (SELECT MIN(salary) FROM employees WHERE job_id = 10);
                        ``` SELECT e.employee_id, e.first_name, e.last_name, j.job_title, e.salary FROM employees e JOIN jobs j ON e.job_id = j.job_id WHERE e.salary > (SELECT MAX(e2.salary) FROM employees e2 WHERE e2.job_title ilike '%Pu_Man%') AND j.job_title not ilike '%Pu_Man%' ORDER BY e.employee_id NULLS LAST;
                        ``` SELECT e.employee_id, e.first_name, e.last_name, j.job_title FROM employees e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_title = 'PU_MAN' AND e.salary > (SELECT MAX(salary) FROM employees);
                        ``` SELECT e.department_id, SUM(e.salary) AS total_salary FROM employees e GROUP BY e.department_id HAVING COUNT(e.employee_id) >= 2;
                        ``` SELECT departments.department_id, COUNT(employees.employee_id) AS employee_count, SUM(employees.salary) AS total_salary FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY departments.department_id HAVING COUNT(employees.employee_id) > 2;
                        ``` SELECT e.first_name, e.last_name, e.email, e.phone_number, e.hire_date, e.job_id, e.salary, e.commission_pct, e.manager_id, e.department_id FROM employees e WHERE e.employee_id NOT IN (SELECT employee_id FROM salaries) AND e.hire_date <= CURRENT_DATE;
                        ``` SELECT e.first_name, e.last_name FROM employees e WHERE e.employee_id NOT IN (SELECT m.employee_id FROM managers m);
                        ``` SELECT e.department_id, e.first_name, e.last_name, MAX(e.salary) AS max_salary FROM employees e GROUP BY e.department_id, e.first_name, e.last_name;
                        ``` SELECT e.department_id, e.first_name, e.last_name, e.salary AS MAX_SALARY FROM employees e WHERE e.salary = (SELECT MAX(e2.salary) FROM employees e2 WHERE e2.department_id = e.department_id);
                        ``` SELECT song.song_name FROM song ORDER BY song.releasedate DESC LIMIT 1;
                        ``` SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1;
                        ``` SELECT files.f_id FROM files WHERE files.duration = (SELECT MAX(files.duration) FROM files);
                        ``` SELECT files.f_id FROM files WHERE duration = (SELECT MAX(duration) FROM files);
                        ``` SELECT song.song_name FROM song WHERE song.languages ilike '%English%';
                        ``` SELECT song.song_name FROM song WHERE languages ilike '%English%' ORDER BY song.song_name NULLS LAST;
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp3%'
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp3%'
                        ``` SELECT COUNT(*) AS number_of_songs FROM files WHERE duration = '4' ;
                        ``` SELECT COUNT(*) AS total_songs FROM files WHERE duration ~ '^4$$$$$$sh$$$$$sh$$$$$sh$$$sh$$$sh$$sh$$sh$sh$sh$sh$sh'
                        ``` SELECT COUNT(*) AS number_of_artists FROM artist WHERE country = 'Bangladesh';
                        ``` SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh';
                        ``` SELECT files.formats FROM files GROUP BY files.formats ORDER BY COUNT(files.formats) DESC NULLS LAST LIMIT 1;
                        ``` SELECT formats FROM files GROUP BY formats ORDER BY COUNT(f_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english';
                        ``` SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english';
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp4%' AND CAST(file_size AS FLOAT) < 1000;
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp4%' AND CAST(file_size AS FLOAT) < 1000;
                        ``` SELECT artist.gender, COUNT(*) AS total_artists FROM artist GROUP BY artist.gender;
                        ``` SELECT gender, COUNT(*) AS COUNT FROM artist GROUP BY gender;
                        ``` SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages;
                        ``` SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages;
                        ``` SELECT files.formats, COUNT(DISTINCT files.artist_name) AS num_artists FROM files GROUP BY files.formats;
                        ``` SELECT formats AS file_format, COUNT(*) AS number_of_files FROM files GROUP BY file_format;
                        ``` SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN(song.resolution) FROM song WHERE song.languages ilike '%Englishish%') AND song.languages ilike '%Englishish%' ORDER BY song.song_name NULLS LAST;
                        ``` SELECT s.song_name FROM song s WHERE s.resolution > (SELECT AVG(song_resolution) FROM song WHERE languages ilike '%Englishish%') GROUP BY s.song_name;
                        ``` SELECT s.song_name FROM song s WHERE s.genre_is = 'blues' ORDER BY s.rating NULLS LAST;
                        ``` SELECT s.song_name FROM song AS s WHERE s.genre_is != 'blues' AND EXISTS (SELECT 1 FROM song AS s2 WHERE s2.genre_is = 'blues' AND s2.rating < s.rating);
                        ``` SELECT genre.g_name, genre.rating AS FLOAT FROM genre ORDER BY genre.g_name ASC;
                        ``` SELECT genre.g_name, genre.rating AS FLOAT FROM genre ORDER BY genre.g_name ASC;
                        ``` SELECT song.song_name FROM song ORDER BY song.resolution NULLS LAST;
                        ``` SELECT song.song_name FROM song ORDER BY song.resolution NULLS LAST;
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp4%' OR CAST(duration AS FLOAT) > 720;
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp4%' OR CAST(duration AS integer) > 720;
                        ``` SELECT languages, COUNT(*) AS frequency FROM song GROUP BY languages ORDER BY frequency DESC LIMIT 1;
                        ``` SELECT song.languages FROM song GROUP BY song.languages ORDER BY COUNT(song.languages) DESC NULLS LAST;
                        ``` SELECT languages, COUNT(*) AS frequency FROM song WHERE resolution > 500 GROUP BY languages ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT song.languages, song.artist_name FROM song WHERE song.resolution > 500 GROUP BY song.languages, song.artist_name ORDER BY COUNT(song.languages) DESC NULLS LAST;
                        ``` SELECT artist.artist_name FROM artist WHERE artist.gender = 'Male' AND artist.country = 'UK';
                        ``` SELECT artist.artist_name FROM artist WHERE gender = 'male' AND country = 'Britain';
                        ``` SELECT song.song_name FROM song WHERE (song.genre_is = 'modern' OR song.languages = 'English') ;
                        ``` SELECT song.song_name FROM song WHERE (song.languages ilike '%English%' OR song.languages IS NULL) AND (song.genre_is ilike 'Modern%' OR genre_is IS NULL);
                        ``` SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english';
                        ``` SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english';
                        ``` SELECT AVG(song.rating), AVG(song.resolution) FROM song WHERE song.country = 'Bangladesh';
                        ``` SELECT AVG(song.rating), AVG(song.resolution) FROM song WHERE genre_is = 'bangla';
                        ``` SELECT song.song_name FROM song WHERE song.languages ilike '%English%' AND song.rating < (SELECT MIN(song.rating) FROM song);
                        ``` SELECT s.song_name FROM song s WHERE s.languages ilike '%English%' AND s.rating < (SELECT MIN(song_rating) FROM song WHERE languages ilike '%English%');
                        ``` SELECT s.song_name, a.artist_name, to_char(to_timestamp(s.releasedate/1000000), 'YYYY-MM-DD') AS released_date FROM song s JOIN artist a ON s.artist_id = a.artist_id WHERE resolution > (SELECT MAX(resolution) FROM song WHERE rating < 8);
                        ``` SELECT s1.song_id FROM song AS s1 JOIN song AS s2 ON (s1.resolution > s2.resolution AND s2.rating < 8) WHERE s1.song_id != s2.song_id;
                        ``` SELECT s.song_name, AVG(s.resolution) AS average_resolution FROM song s WHERE s.genre_is = 'modern' GROUP BY s.song_name HAVING AVG(s.resolution) < s.resolution;
                        ``` SELECT s.song_id FROM song AS s WHERE s.genre_is = 'modern' AND s.resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern');
                        ``` SELECT s.song_id, s.genre_is, a.artist_name FROM song AS s JOIN artist AS a ON s.artist_fk = a.artist_id WHERE languages ILIKE '%English%' ORDER BY rating DESC NULLS LAST;
                        ``` SELECT s.f_id AS id, s.genre_is AS genre, a.artist_name FROM song s JOIN artist a ON s.artist_name = a.artist_name WHERE languages ILIKE '%English%' ORDER BY rating ASC;
                        ``` SELECT song.artist_name FROM song WHERE song.languages ilike '%English%' AND song.rating <= 8;
                        ``` SELECT DISTINCT song.artist_name FROM song WHERE song.languages ilike '%English%' AND song.rating <= 8;
                        ``` SELECT artist_name FROM artist WHERE country = 'Bangladesh' AND preferred_genre > 7;
                        ``` SELECT artist.artist_name FROM artist WHERE artist.country = 'Bangladesh' AND NOT EXISTS (SELECT 1 FROM album WHERE album.artist_id = artist.artist_id GROUP BY album.artist_id HAVING AVG(album.rating) > 7);
                        ``` SELECT date_part('year', to_date(yearid::text, '9999')) AS YEAR, COUNT(*) AS total_inductees FROM hall_of_fame GROUP BY YEAR;
                        ``` SELECT yearid, COUNT(player_id) AS player_count FROM hall_of_fame GROUP BY yearid;
                        ``` SELECT AVG(attendance) AS average_attendance FROM homer_game WHERE year = 2019;
                        ``` SELECT AVG(homer_game.attendance) AS average_attendance FROM homer_game WHERE homer_game.year = 2017;
                        ``` SELECT COUNT(*) FROM park WHERE state = 'NY';
                        ``` SELECT COUNT(park_id) AS total_parks FROM park WHERE state = 'NY';
                        ``` SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT(player_id) ASC NULLS LAST LIMIT 3;
                        ``` SELECT COUNT(player_id) AS player_count, birth_country FROM player GROUP BY birth_country ORDER BY player_count ASC NULLS LAST LIMIT 3;
                        ``` SELECT p.name_first, p.name_last FROM player p WHERE p.job_year IS NULL AND p.job_month IS NULL AND p.job_day IS NULL;
                        ``` SELECT p.name_first, p.name_last FROM player p WHERE p.job_year IS NULL;
                        ``` SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';
                        ``` SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';
                        ``` SELECT p.name_first, p.name_last FROM player p WHERE p.weight > 220 OR p.height < 75;
                        ``` SELECT p.name_first, p.name_last FROM player p WHERE p.weight > 220 OR p.height < 75;
                        ```failure
failure
 SELECT COUNT(*) FROM postseason WHERE year = 1885 AND ties = 1;
                        ``` SELECT COUNT(*) AS total_ties FROM postseason WHERE year = 1885 AND ties = 1;
                        ``` SELECT player_id, salary FROM salary WHERE year = 2001 ORDER BY salary DESC NULLS LAST LIMIT 3;
                        ``` SELECT player_id, SUM(salary) AS total_salary FROM salary WHERE year = 2001 GROUP BY player_id ORDER BY total_salary DESC NULLS LAST LIMIT 3;
                        ``` SELECT salary.year, AVG(salary.salary) AS average_salary FROM salary WHERE salary.year IN (2010, 2001) GROUP BY salary.year;
                        ``` SELECT year, salary FROM salary WHERE year IN (2010, 2001) ORDER BY year NULLS LAST;
                        ``` SELECT MIN(yearid) AS MIN_YEAR FROM hall_of_fame;
                        ``` SELECT MIN(yearid) AS earliest_year FROM hall_of_fame;
                        ``` SELECT COUNT(*) AS number_of_parks FROM park WHERE city ilike '%Atlanta%';
                        ``` SELECT COUNT(*) AS number_of_parks FROM park WHERE city ilike '%Atlanta%';
                        ``` SELECT state FROM park GROUP BY state HAVING COUNT(park_id) > 2;
                        ``` SELECT DISTINCT state FROM park GROUP BY state HAVING COUNT(park_id) > 2;
                        ``` SELECT COUNT(*) FROM team_franchise WHERE active = 'Y';
                        ``` SELECT COUNT(franchise_id) AS num_active_franchises FROM team_franchise WHERE active = 'Y';
                        ``` SELECT DISTINCT park.city FROM park GROUP BY park.city HAVING COUNT(park.park_id) BETWEEN 2 AND 4;
                        ``` SELECT DISTINCT park.city FROM park GROUP BY park.city HAVING COUNT(park.park_id) BETWEEN 2 AND 4;
                        ``` SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15;
                        ``` SELECT c.id AS camera_lens_id, c.brand, c.name, MAX(c.max_aperture) AS max_aperture FROM camera_lenses c GROUP BY c.brand, c.name ORDER BY max_aperture DESC;
                        ``` SELECT p.id, p.color, p.name FROM photos p;
                        ``` SELECT MAX(Height) AS max_height, AVG(Height) AS average_height FROM mountain;
                        ``` SELECT AVG(Prominence) FROM mountain WHERE country = 'Morocco';
                        ``` SELECT mountain.name, mountain.height, mountain.prominence FROM mountain WHERE "Aberdare" NOT ILIKE '%mountain%' ORDER BY mountain.prominence DESC NULLS LAST;
                        ``` SELECT COUNT(DISTINCT camera_lens.brand) AS number_of_brands FROM camera_lenses;
                        ``` SELECT COUNT(*) AS total_unused_lenses FROM camera_lens WHERE id NOT IN (SELECT DISTINCT lens_id FROM photos);
                        ``` SELECT mountain.name, mountain.prominence FROM mountain WHERE mountain.lens != 'Sigma' ORDER BY mountain.prominence DESC NULLS LAST;
                        ``` SELECT camera_lens.name FROM camera_lens WHERE camera_lens.name ilike '%Digital%';
                        ``` SELECT p.name FROM platform p WHERE p.owner != 'CCTV';
                        ``` SELECT p.name FROM platform p WHERE p.owner != 'CCTV';
                        ``` SELECT p.name, p.rating_in_percent FROM platformp ORDER BY p.rating_in_percent DESC;
                        ``` SELECT p.name FROM platform p ORDER BY p.rating_in_percent DESC;
                        ``` SELECT p.owner FROM platform p WHERE p.rating_in_percent = (SELECT MAX(p2.rating_in_percent) FROM platform p2);
                        ``` SELECT p.owner FROM platform p WHERE p.rating_in_percent = (SELECT MAX(p2.rating_in_percent) FROM platform p2);
                        ``` SELECT COUNT(Program_ID) AS number_of_programs FROM program;
                        ``` SELECT COUNT(*) AS total_programs FROM program;
                        ``` SELECT p.name FROM program p ORDER BY p.launch;
                        ``` SELECT p.name, to_char(p.launch, 'YYYY-MM-DD') AS launch_date FROM program p ORDER BY p.launch NULLS LAST;
                        ``` SELECT p.name, p.origin, o.owner FROM program p JOIN owner o ON p.owner = o.owner_id;
                        ``` SELECT p.name, o.origin, e.owner FROM program p JOIN owner o ON p.owner = o.owner_id JOIN employee e ON o.employee_id = e.employee_id;
                        ``` SELECT p.name FROM program p ORDER BY p.launch DESC LIMIT 1;
                        ``` SELECT p.name FROM program p ORDER BY p.launch DESC NULLS LAST LIMIT 1;
                        ``` SELECT SUM(cast(Share_in_percent AS FLOAT)) / NULLIF(SUM(cast(Rating_in_percent AS FLOAT)), 0) AS total_share_ratio FROM channel WHERE Owner = 'CCTV';
                        ``` SELECT SUM(share_in_percent) / NULLIF((SELECT SUM(share_in_percent) FROM channel WHERE owner = 'CCTV'), 0) AS total_share_in_percent FROM channel WHERE owner = 'CCTV';
                        ``` SELECT time_of_day, COUNT(program_id) AS program_count FROM broadcast GROUP BY time_of_day;
                        ``` SELECT TIME_OF_DAY, COUNT(*) AS program_count FROM BROADCAST GROUP BY TIME_OF_DAY;
                        ``` SELECT COUNT(DISTINCT program_id) AS number_of_programs FROM broadcast WHERE time_of_day = 'night';
                        ``` SELECT COUNT(DISTINCT Program_ID) AS number_of_programs FROM broadcast WHERE Time_of_day = 'Night';
                        ``` SELECT p.name FROM program p WHERE p.launch NOT IN (SELECT l.launch FROM launch l JOIN time t ON l.time_id = t.time_id WHERE t.am OR t.pm);
                        ``` SELECT p.name FROM program p WHERE p.launch NOT IN (SELECT l.launch FROM launch_time l WHERE l.day = 'Monday');
                        ``` SELECT DISTINCT program.origin FROM program ORDER BY program.origin ASC;
                        ``` SELECT DISTINCT program.origin FROM program ORDER BY program.origin ASC;
                        ``` SELECT COUNT(DISTINCT Owner) AS number_of_owners FROM platform;
                        ``` SELECT COUNT(DISTINCT owner) AS number_of_owners FROM platform;
                        ``` SELECT program.name FROM program WHERE program.origin != 'Beijing';
                        ``` SELECT p.name FROM program p WHERE p.origin != 'Beijing';
                        ``` SELECT p.name FROM platform p JOIN channel_owner co ON p.channel_id = co.channel_id WHERE co.owner IN ('CCTV', 'HBS');
                        ``` SELECT p.name FROM platform p WHERE p.owner IN ('CCTV', 'HBS');
                        ``` SELECT o.owner, SUM(r.rating_in_percent) / NULLIF(COUNT(r.rating_in_percent), 0) AS total_rating_ratio FROM rating r JOIN owner o ON r.owner = o.owner GROUP BY o.owner;
                        ``` SELECT p.owner, SUM(p.rating_in_percent) AS total_rating FROM platform p GROUP BY p.owner;
                        ``` SELECT COUNT(course_id) AS total_courses FROM Courses;
                        ``` SELECT COUNT(*) AS total_courses FROM Courses;
                        ``` SELECT Courses.course_id, Courses.course_description FROM Courses WHERE Courses.course_name ilike '%Database%' ORDER BY Courses.course_description NULLS LAST;
                        ``` SELECT Courses.course_description FROM Courses WHERE Courses.course_name ilike '%Database%' ;
                        ``` SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name ilike '%Cathrine%';
                        ``` SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name ilike '%Cathrine%';
                        ``` SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors;
                        ``` SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors;
                        ``` SELECT Course_Authors_and_Tutors.login_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors;
                        ``` SELECT Course_Authors_and_Tutors.login_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors;
                        ``` SELECT Student_Course_Enrolment.date_of_enrolment, Student_Course_Enrolment.date_of_completion FROM Student_Course_Enrolment;
                        ``` SELECT Student_Course_Enrolment.date_of_enrolment, Student_Course_Enrolment.date_of_completion FROM Student_Course_Enrolment;
                        ``` SELECT COUNT(DISTINCT student_id) AS number_of_students FROM Student_Course_Enrolment;
                        ``` SELECT COUNT(DISTINCT student_id) AS total_students FROM Student_Course_Enrolment;
                        ``` SELECT COUNT(DISTINCT course_id) AS number_of_courses FROM Student_Course_Enrolment;
                        ``` SELECT COUNT(DISTINCT course_id) AS num_courses FROM Student_Course_Enrolment;
                        ``` SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'
                        ``` SELECT Student_Tests_Taken.date_test_taken FROM Student_Tests_Taken WHERE Student_Tests_Taken.test_result ilike '%Pass%' ORDER BY Student_Tests_Taken.date_test_taken NULLS LAST;
                        ``` SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail';
                        ``` SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail';
                        ``` SELECT Students.login_name FROM Students WHERE Students.family_name ilike '%Ward%';
                        ``` SELECT Students.login_name FROM Students WHERE Students.family_name ilike '%Ward%';
                        ``` SELECT Students.date_of_latest_logon FROM Students WHERE (Students.family_name ilike '%Jaskolski%' OR students.family_name ilike '%Langosh%') ORDER BY Students.date_of_last_login DESC;
                        ``` SELECT MAX(date_of_latest_logon) AS latest_login_date FROM Students WHERE family_name IN ('Jaskolski', 'Langosh');
                        ``` SELECT COUNT(*) FROM Students WHERE personal_name ilike '%son%';
                        ``` SELECT COUNT(*) FROM Students WHERE personal_name ilike '%son%';
                        ``` SELECT Subjects.subject_name FROM Subjects;
                        ``` SELECT Subjects.subject_name FROM Subjects;
                        ``` SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.middle_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors ORDER BY Course_Authors_and_Tutors.personal_name ASC NULLS LAST;
                        ``` SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.middle_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors ORDER BY Course_Authors_and_Tutors.personal_name ASC;
                        ``` SELECT Students.personal_name, Students.family_name FROM Students ORDER BY Students.family_name ASC;
                        ``` SELECT Students.family_name, Students.personal_name FROM Students ORDER BY Students.family_name ASC;
                        ``` SELECT Student_Tests_Taken.test_result, COUNT(Student_Tests_Taken.registration_id) AS total_tests FROM Student_Tests_Taken GROUP BY Student_Tests_Taken.test_result ORDER BY total_tests DESC;
                        ``` SELECT Student_Tests_Taken.test_result, COUNT(Student_Tests_Taken.registration_id) AS student_count FROM Student_Tests_Taken GROUP BY Student_Tests_Taken.test_result;
                        ``` SELECT Students.personal_name FROM Students WHERE Students.student_id NOT IN (SELECT CourseEnrollments.student_id FROM CourseEnrollments);
                        ``` SELECT Students.personal_name FROM Students WHERE Students.student_id NOT IN (SELECT CourseEnrollments.student_id FROM CourseEnrollments);
                        ``` SELECT COUNT(*) AS total_students_without_courses FROM Students WHERE student_id NOT IN (SELECT student_id FROM Enrollments);
                        ``` SELECT COUNT(*) AS total_students FROM Students;
                        ``` SELECT Course_Authors_and_Tutors.login_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_id IN (SELECT Student_Course_Enrollments.student_id FROM Student_Course_Enrollments) OR Course_Authors_and_Tutors.author_id IN (SELECT Course_Authors_and_Tutors.author_id FROM Course_Authors_and_Tutors);
                        ``` SELECT Course_Authors_and_Tutors.login_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.login_name IN (SELECT Students.login_name FROM Students) AND Course_Authors_and_Tutors.login_name IN (SELECT Course_Authors_and_Tutors.login_name FROM Course_Authors_and_Tutors);
                        ``` SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_id IN (SELECT Student_Courses.student_id FROM Student_Courses) GROUP BY Course_Authors_and_Tutors.personal_name HAVING COUNT(DISTINCT Course_Authors_and_Tutors.author_id) > 1;
                        ``` SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name IN (SELECT Students.personal_name FROM Students) AND Course_Authors_and_Tutors.personal_name IN (SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors);
                        ``` SELECT Payment_Method_Code, Date_payment_made, Amount_payment FROM Payments ORDER BY Date_payment_made ASC;
                        ``` SELECT Payment_Method_Code, Date_payment_made, Amount_payment FROM Payments ORDER BY Date_payment_made ASC;
                        ``` SELECT c.claim_id, MAX(c.amount_claimed) AS max_amount_claimed, MAX(c.amount_settled) AS max_amount_settled FROM claims c GROUP BY c.claim_id;
                        ``` SELECT c.claim_id, c.amount_claimed, s.amount_settled FROM claims AS c JOIN settlements AS s ON c.claim_id = s.claim_id ORDER BY c.amount_claimed DESC LIMIT 1;
                        ``` SELECT c.claim_id, MIN(c.amount_settled) AS min_settlement_amt, MAX(c.amount_claimed) AS max_claim_amt FROM claims c GROUP BY c.claim_id;
                        ``` SELECT c.claim_id, c.amount_claimed, MIN(s.amount_settled) AS min_settled_amount FROM claims c JOIN settlements s ON c.claim_id = s.claim_id GROUP BY c.claim_id, c.amount_claimed;
                        ``` SELECT c.claim_id, c.date_claim_made, c.date_claim_settled, to_char(AVG(c.amount_claimed), 'FM999990D00') AS average_amount_claimed FROM claims c GROUP BY c.claim_id, c.date_claim_made, c.date_claim_settled HAVING to_number(to_char(c.amount_claimed), 'FM999990D00') > to_number(to_char(avg(c.amount_claimed), 'FM999990D00'), 'FM999990D00');
                        ``` SELECT c.claim_id, c.policy_id, c.date_claim_made, c.date_claim_settled FROM claims c WHERE c.amount_claimed > (SELECT AVG(amount_claimed) FROM claims);
                        ``` SELECT c.date_claim_made FROM Claims c WHERE c.amount_claimed <= AVG(c.amount_claimed)
                        ``` SELECT c.date_claim_made FROM claims c WHERE c.amount_claimed <= (SELECT AVG(amount_claimed) FROM claims);
                        ``` SELECT MIN(Claims.Date_Claim_Made) AS earliest_claim_date FROM Claims;
                        ``` SELECT MIN(Date_Claim_Made) AS earliest_claim_date FROM Claims;
                        ``` SELECT SUM(Settlements.Amount_Settled) AS total_amount_settled FROM Settlements;
                        ``` SELECT SUM(Amount_Settled) AS total_amount_settled FROM Settlements;
                        ``` SELECT Settlements.date_claim_made AS claim_date, Settlements.date_claim_settled AS settlement_date FROM Settlements;
                        ``` SELECT s.settlement_id, to_char(s.date_claim_made, 'YYYY-MM-DD') AS claim_date, to_char(s.date_claim_settled, 'YYYY-MM-DD') AS settlement_date FROM settlements s;
                        ``` SELECT p.payment_method_code, COUNT(*) AS COUNT FROM payments p GROUP BY p.payment_method_code ORDER BY COUNT DESC NULLS LAST LIMIT 1;
                        ``` SELECT p.payment_method_code, COUNT(*)::FLOAT / (SELECT COUNT(*) FROM payments) AS proportion FROM payments p GROUP BY p.payment_method_code ORDER BY proportion DESC NULLS LAST LIMIT 1;
                        ``` SELECT Payments.payment_method_code, COUNT(Payments.payment_id) AS COUNT FROM Payments GROUP BY Payments.payment_method_code ORDER BY COUNT ASC NULLS LAST LIMIT 1;
                        ``` SELECT Payments.Paymentment_method_code, COUNT(Payments.payment_id) AS COUNT FROM Payments GROUP BY Payments.payment_method_code ORDER BY COUNT ASC NULLS LAST LIMIT 1;
                        ``` SELECT SUM(Payments.Amount_payment) AS total_amount_paid FROM Payments;
                        ``` SELECT SUM(Payments.Amount_payment) AS total_amount_paid FROM Payments;
                        ``` SELECT Customers.customer_details FROM Customers;
                        ``` SELECT Customers.customer_details FROM Customers;
                        ``` SELECT p.policy_type_code, COUNT(*) AS number_of_customers FROM customer_policies c JOIN policies p ON c.policy_id = p.policy_id GROUP BY p.policy_type_code ORDER BY number_of_customers DESC LIMIT 1;
                        ``` SELECT policy_type_code, COUNT(*) AS number_of_customers FROM customer_policies GROUP BY policy_type_code ORDER BY number_of_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_settlements FROM Settlements;
                        ``` SELECT COUNT(*) AS total_settlements FROM Settlements;
                        ``` SELECT p.payment_id, p.date_payment_made, p.amount_payment FROM payments p WHERE payment_method_code = 'Visa';
                        ``` SELECT p.payment_id, to_char(p.date_payment_made, 'DD-MMM-YYYY') AS payment_date, CAST(p.amount_payment AS FLOAT) AS amount FROM payments p WHERE payment_method_code = 'Visa';
                        ``` SELECT Customers.customer_details FROM Customers WHERE Customers.customer_id NOT IN (SELECT policyholders.customer_id FROM policyholders);
                        ``` SELECT c.customer_details FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
                        ``` SELECT SUM(Amount_Claimed) AS total_claimed_amount FROM Claims;
                        ``` SELECT SUM(Claims.Amount_Claimed) AS total_amount_claimed FROM Claims;
                        ``` SELECT Department.Name, COUNT(Employee.EmployeeID) AS Employee_Count FROM Department JOIN Employee ON Department.DepartmentID = Employee.Head DEPARTMENT GROUP BY Department.Name ORDER BY Employee_Count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Department.Name FROM Department WHERE Department.Head IN (SELECT Employee.Department FROM Employee GROUP BY Employee.department ORDER BY COUNT(Employee.department) DESC NULLS LAST LIMIT 1);
                        ``` SELECT Department.Head FROM Department WHERE Department.Name IN (SELECT MIN(Employee.Department) FROM Employee GROUP BY Employee.department);
                        ``` SELECT Department.Head FROM Department ORDER BY COUNT(Employee.EmployeeID) ASC LIMIT 1;
                        ``` SELECT Appointment.AppointmentID FROM Appointment ORDER BY Start DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(Appointment.appointmentID) AS latest_appointment_id FROM Appointment;
                        ``` SELECT p.name FROM physician p LEFT JOIN appointment a ON p.employeeid = a.physician_id WHERE a.physician_id IS NULL;
                        ``` SELECT p.name FROM physician p LEFT JOIN appointment a ON p.employeeid = a.physicianid WHERE a.physicianid IS NULL;
                        ``` SELECT COUNT(*) AS total_stays FROM Stay WHERE Room = 112;
                        ``` SELECT COUNT(DISTINCT Patient) AS patient_count FROM Stay WHERE Room = 112;
                        ``` SELECT p.name FROM Patient p JOIN Stay s ON p.patientid = s.patientid WHERE s.room = 111 ORDER BY s.stayend DESC LIMIT 1;
                        ``` SELECT s.patient FROM Stay s WHERE s.room = 111 ORDER BY s.stayend DESC LIMIT 1;
                        ``` SELECT DISTINCT Room.BlockCode FROM Room WHERE Room.Unavailable = FALSE;
                        ``` SELECT DISTINCT Room.BlockCode FROM Room WHERE Room.Unavailable = FALSE;
                        ``` SELECT COUNT(DISTINCT Room.RoomType) AS number_of_room_types FROM Room;
                        ``` SELECT COUNT(DISTINCT Room.RoomType) AS number_of_room_types FROM Room WHERE Room.Unavailable = FALSE;
                        ``` SELECT Physician.name FROM Physician WHERE physician.position ilike '%senior%';
                        ``` SELECT Physician.name FROM Physician WHERE "Position" ILIKE '%senior%';
                        ``` SELECT p.name AS patient_name, phy.name AS physician_name, pr.procedure_name, to_char(u.dateundergoes, 'DD-MM-YYYY') AS procedure_date FROM procedures pr JOIN undergoes u ON pr.procedure_id = u.procedure_id JOIN physicians phy ON u.physician_id = phy.physician_id JOIN patients p ON p.patient_id = u.patient_id;
                        ``` SELECT p.name AS patient_name, phy.name AS physician_name, pr.procedure_date, row_number() OVER (PARTITION BY p.patient_id ORDER BY pr.procedure_date DESC) AS recent_treatment_rank FROM patients p JOIN procedures pr ON p.patient_id = pr.patient_id JOIN physicians phy ON pr.physician_id = phy.physician_id;
                        ``` SELECT Nurse.Name FROM Nurse ORDER BY Nurse.Name ASC;
                        ``` SELECT Nurse.name FROM Nurse ORDER BY Nurse.name ASC;
                        ``` SELECT DISTINCT medication.name FROM medication ORDER BY medication.name ASC;
                        ``` SELECT medication.name FROM medication ORDER BY medication.name ASC;
                        ``` SELECT physician_id, department_id FROM affiliated_with WHERE primary_affiliation = TRUE;
                        ``` SELECT a.physician, a.department FROM Affiliated_With AS a WHERE a.primary_affiliation = TRUE;
                        ``` SELECT n.name FROM nurses n JOIN on_call oc ON n.nurse = oc.nurse WHERE oc.blockfloor = 1 AND oc.blockcode = 1;
                        ``` SELECT nurse FROM On_Call WHERE BlockFloor = 1 AND BlockCode = 1;
                        ``` SELECT MAX(Cost) AS highest_cost, MIN(Cost) AS lowest_cost, AVG(Cost) AS average_cost FROM Procedures;
                        ``` SELECT MAX(Cost) AS highest_cost, MIN(Cost) AS lowest_cost, AVG(Cost) AS average_cost FROM Procedures;
                        ``` SELECT Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC;
                        ``` SELECT Procedures.name, Procedures.cost FROM Procedures ORDER BY Procedures.cost DESC;
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST LIMIT 3;
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST LIMIT 3;
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures WHERE (Procedures.Cost > 1000 OR 'John' ILIKE '%Wen%') ;
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures WHERE (Procedures.Cost > 1000 OR Procedures.Name ilike '%John%Wen%') ;
                        ``` SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND Procedures.Code NOT IN (SELECT Training.Procedure_Code FROM Training JOIN Physicians ON Training.Physician_id = Physicians.id WHERE Physicians.name ILIKE '%John%Wen%')
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures WHERE Procedures.Cost > 1000 AND Procedures.Code NOT IN (SELECT SpecializedIn.Code FROM Physicians AS Specialist WHERE Specialist.Last_name = 'Wen' AND Specialist.First_name = 'John') ORDER BY Procedures.Cost DESC NULLS LAST;
                        ``` SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost < 5000 AND Procedures.Code::text ilike '%John%Wen%';
                        ``` SELECT Procedures.Code, Procedures.Name, Procedures.Cost FROM Procedures WHERE Procedures.Cost < 5000 AND Procedures.Name ILIKE '%John%Wen%' ;
                        ``` SELECT p.name FROM patient p WHERE p.insurance_id != (SELECT insurance_id FROM provider WHERE name ilike '%Procrastin-X%');
                        ``` SELECT p.name FROM patient p WHERE p.insurance_id != 123456789;
                        ``` SELECT COUNT(*) FROM Patient WHERE insurance_id != 757071735;
                        ``` SELECT COUNT(*) AS number_of_patients FROM patient WHERE insurance_plan != 'Procrastin-X';
                        ``` SELECT COUNT(*) AS number_of_appointments FROM Appointment;
                        ``` SELECT COUNT(*) AS total_appointments FROM Appointment;
                        ``` SELECT COUNT(*) AS total_ships FROM ship;
                        ``` SELECT COUNT(*) AS total_ships FROM ship;
                        ``` SELECT ship.name FROM ship ORDER BY ship.tonnage ASC;
                        ``` SELECT ship.name FROM ship ORDER BY ship.tonnage ASC;
                        ``` SELECT ship.type, ship.nationality FROM ship;
                        ``` SELECT s.ship_id, s.type, s.nationality FROM ship AS s;
                        ``` SELECT ship.name FROM ship WHERE ship.nationality != 'United States';
                        ``` SELECT ship.name FROM ship WHERE ship.nationality != 'United States';
                        ``` SELECT ship.name FROM ship WHERE ship.nationality IN ('United States', 'United Kingdom');
                        ``` SELECT ship.name FROM ship WHERE ship.nationality IN ('US', 'UK');
                        ``` SELECT s.name FROM ship s WHERE s.tonnage = (SELECT MAX(s2.tonnage) FROM ship s2);
                        ``` SELECT MAX(ship.tonnage) AS max_tonnage, ship.name FROM ship GROUP BY ship.name ORDER BY max_tonnage DESC LIMIT 1;
                        ``` SELECT ship.type, COUNT(*) AS total_ships FROM ship GROUP BY ship.type;
                        ``` SELECT ship.type, COUNT(*) AS total_ships FROM ship GROUP BY ship.type;
                        ``` SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(ship.type) DESC NULLS LAST LIMIT 1;
                        ``` SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(ship.type) DESC NULLS LAST LIMIT 1;
                        ``` SELECT nationality FROM ship GROUP BY nationality HAVING COUNT(ship_id) > 2;
                        ``` SELECT nationality FROM ship GROUP BY nationality HAVING COUNT(ship_id) > 2;
                        ``` SELECT ship.type, AVG(cast(ship.tonnage AS FLOAT)) AS average_tonnage FROM ship GROUP BY ship.type;
                        ``` SELECT ship.type, AVG(cast(ship.tonnage AS FLOAT)) AS average_tonnage FROM ship GROUP BY ship.type;
                        ``` SELECT s.name FROM ship s LEFT JOIN mission_ship ms ON s.ship_id = ms.ship_id WHERE ms.ship_id IS NULL;
                        ``` SELECT s.name FROM ship AS s LEFT JOIN mission_ship AS ms ON s.ship_id = ms.ship_id WHERE ms.ship_id IS NULL;
                        ``` SELECT DISTINCT s.type FROM ship s WHERE s.tonnage > 6000 AND EXISTS (SELECT 1 FROM ship s2 WHERE s2.ship_id != s.ship_id AND s2.tonnage < 4000);
                        ``` SELECT DISTINCT ship.type FROM ship WHERE (ship.tonnage > 6000 OR ship.tonnage < 4000) GROUP BY ship.type HAVING COUNT(*) = 2;
                        ``` SELECT COUNT(*) AS total_students FROM list;
                        ``` SELECT COUNT(*) AS total_students FROM list;
                        ``` SELECT list.last_name FROM list WHERE list.classroom = 111;
                        ``` SELECT list.last_name FROM list WHERE list.classroom = 111;
                        ``` SELECT list.First_name FROM list WHERE list.classroom = 108;
                        ``` SELECT list.First_name FROM list WHERE list.classroom = 108;
                        ``` SELECT list.First_name FROM list WHERE list.classroom = 107;
                        ``` SELECT list.First_name FROM list WHERE list.classroom = 107;
                        ``` SELECT list.classroom_number, list.grade FROM list;
                        ``` SELECT list.grade AS "Grade", list.classroom_number AS "Classroom Number" FROM list;
                        ``` SELECT list.grade FROM list WHERE list.classroom = 103;
                        ``` SELECT list.grade FROM list WHERE list.classroom = 103;
                        ``` SELECT list.grade FROM list WHERE list.classroom = 105;
                        ``` SELECT list.grade FROM list WHERE list.classroom = 105;
                        ``` SELECT list.classroom FROM list WHERE list.grade = 4;
                        ``` SELECT classroom FROM list WHERE grade = 4;
                        ``` SELECT list.classroom FROM list WHERE list.grade = 5;
                        ``` SELECT list.last_name, list.first_name FROM list WHERE list.grade = 5;
                        ``` SELECT teachers.first_name FROM teachers WHERE teachers.classroom = 110;
                        ``` SELECT teachers.first_name FROM teachers WHERE teachers.classroom = 110;
                        ``` SELECT teachers.last_name FROM teachers WHERE teachers.classroom = 109;
                        ``` SELECT teachers.last_name FROM teachers WHERE teachers.classroom = 109;
                        ``` SELECT teachers.first_name, teachers.last_name FROM teachers;
                        ``` SELECT teachers.first_name, teachers.last_name FROM teachers;
                        ``` SELECT list.first_name, list.last_name FROM list;
                        ``` SELECT list.first_name, list.last_name FROM list;
                        ``` SELECT list.grade, COUNT(DISTINCT list.classroom) AS classroom_count, COUNT(list.firstname) AS student_count FROM list GROUP BY list.grade;
                        ``` SELECT list.grade, COUNT(DISTINCT list.classroom) AS classroom_count, COUNT(list.firstname) AS student_count FROM list GROUP BY list.grade;
                        ``` SELECT list.classroom_number, COUNT(list.grade) AS grade_count FROM list GROUP BY list.classroom_number;
                        ``` SELECT list.classroom_number, COUNT(DISTINCT list.grade) AS grade_count FROM list GROUP BY list.classroom_number;
                        ``` SELECT list.classroom, COUNT(list.firstname) AS number_of_students FROM list GROUP BY list.classroom ORDER BY number_of_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT list.classroom FROM list GROUP BY list.classroom ORDER BY COUNT(list.classroom) DESC LIMIT 1;
                        ``` SELECT list.classroom, COUNT(*) AS student_count FROM list GROUP BY list.classroom ORDER BY student_count DESC NULLS LAST;
                        ``` SELECT list.classroom_number, COUNT(list.firstname) AS student_count FROM list GROUP BY list.classroom_number;
                        ``` SELECT list.grade, COUNT(list.firstname) AS total_students FROM list WHERE list.classroom = 0 GROUP BY list.grade;
                        ``` SELECT list.classroom_number, COUNT(list.firstname) AS student_count FROM list WHERE list.grade = 0 GROUP BY list.classroom_number;
                        ``` SELECT list.classroom, COUNT(*) AS total_students FROM list WHERE grade = 4 GROUP BY list.classroom;
                        ``` SELECT list.classroom_number, COUNT(list.last_name) AS total_students FROM list WHERE grade = 4 GROUP BY list.classroom_number;
                        ``` SELECT COUNT(*) AS total_students FROM list WHERE classroom = 1;
                        ``` SELECT CAST(COUNT(list.id) AS FLOAT) / NULLIF(MAX(list.classroom), 0) AS student_to_classroom_ratio FROM list;
                        ``` SELECT COUNT(*) FROM company WHERE headquarters ilike '%US%';
                        ``` SELECT company.name FROM company ORDER BY company.sales_in_billion ASC;
                        ``` SELECT c.name AS company_name, h.headquarters, i.industry FROM company c JOIN headquarters h ON c.headquarters = h.headquarters_id JOIN industry i ON c.industry = i.industry_id;
                        ``` SELECT c.name FROM company c WHERE c.industry IN ('banking', 'retailing');
                        ``` SELECT MAX(market_value_in_billion) AS max_market_value, MIN(market_value_in_billion) AS min_market_value FROM company;
                        ``` SELECT c.name, c.headquarters FROM company c WHERE c.sales_in_billion = (SELECT MAX(sales_in_billion) FROM company);
                        ``` SELECT headquarters, COUNT(*) AS company_count FROM company GROUP BY headquarters ORDER BY company_count DESC NULLS LAST;
                        ``` SELECT company.headquarters, COUNT(*) AS frequency FROM company GROUP BY company.headquarters ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT company.headquarters FROM company GROUP BY company.headquarters HAVING COUNT(company.company_id) >= 2;
                        ``` SELECT DISTINCT company.headquarters FROM company WHERE company.industry ilike '%banking%' AND company.industry ilike '%oil and gas%';
                        ``` SELECT p.name FROM people p LEFT JOIN employment e ON p.people_id = e.people_id WHERE e.people_id IS NULL;
                        ``` SELECT c.name FROM company c WHERE c.sales_in_billion > 200 ORDER BY c.sales_in_billion DESC, c.profits_in_billion DESC;
                        ``` SELECT COUNT(*) AS total_films FROM film;
                        ``` SELECT COUNT(*) AS total_films FROM film;
                        ``` SELECT DISTINCT film.director FROM film;
                        ``` SELECT DISTINCT director FROM film;
                        ``` SELECT AVG(gross_in_dollar) AS average_gross_in_dollars FROM film;
                        ``` SELECT AVG(gross_in_dollar) AS average_gross_in_dollars FROM film;
                        ``` SELECT market_id, MIN(low_estimate) AS min_low_estimate, MAX(high_estimate) AS max_high_estimate FROM film_market_estimation GROUP BY market_id;
                        ``` SELECT market_id, MIN(low_estimate) AS min_low_estimate, MAX(high_estimate) AS max_high_estimate FROM film_market_estimation GROUP BY market_id;
                        ``` SELECT DISTINCT film_market_estimation.type FROM film_market_estimation WHERE film_market_estimation.year = 1995;
                        ``` SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995;
                        ``` SELECT MAX(market.number_cities) AS max_cities, MIN(market.number_cities) AS min_cities FROM market AS market;
                        ``` SELECT MAX(market.number_cities) AS max_cities, MIN(market.number_cities) AS min_cities FROM market AS market;
                        ``` SELECT COUNT(*) FROM market WHERE number_cities < 300;
                        ``` SELECT COUNT(*) FROM market WHERE number_cities < 300;
                        ``` SELECT market.country FROM market ORDER BY market.country ASC;
                        ``` SELECT m.market_id, m.country AS market_country, row_number() OVER (PARTITION BY m.country ORDER BY c.city_name) AS city_rank FROM market m JOIN city c ON m.market_id = c.market_id;
                        ``` SELECT market.country FROM market ORDER BY market.number_cities DESC;
                        ``` SELECT m.market_id, m.country, COUNT(c.city_id) AS number_of_cities FROM market m JOIN city c ON m.country = c.country GROUP BY m.market_id, m.country ORDER BY number_of_cities DESC;
                        ``` SELECT film.studio, COUNT(film.film_id) AS total_films, SUM(cast(gross_in_dollar AS FLOAT)) AS total_budget FROM film GROUP BY film.studio;
                        ``` SELECT film.studio, COUNT(film.title)::FLOAT / total_studios.total_films AS proportion FROM film JOIN (SELECT studio, COUNT(film_id) AS total_films FROM film GROUP BY studio) AS total_studios ON film.studio = total_studios.studio GROUP BY film.studio ORDER BY proportion DESC NULLS LAST;
                        ``` SELECT studio FROM film GROUP BY studio ORDER BY COUNT(film_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT film.studio, COUNT(film.title) AS number_of_films FROM film GROUP BY film.studio ORDER BY number_of_films DESC LIMIT 1;
                        ``` SELECT DISTINCT studio FROM film GROUP BY studio HAVING COUNT(film_id) >= 2;
                        ``` SELECT DISTINCT studio FROM film GROUP BY studio HAVING COUNT(film_id) >= 2;
                        ``` SELECT film.title FROM film WHERE film.gross_in_dollar IS NULL;
                        ``` SELECT film.title FROM film WHERE film.gross_in_dollar IS NULL;
                        ``` SELECT DISTINCT studio FROM film WHERE director ilike '%Nicholas%Meyer%' AND director ilike '%Walter%Hill%';
                        ``` SELECT DISTINCT film.director FROM film WHERE film.director ilike '%Nicholas%Meyer%' AND film.director ilike '%Walter%Hill%';
                        ``` SELECT COUNT(*) AS total_films, SUM(gross_in_dollar) AS total_budget FROM film WHERE studio ilike '%universal%';
                        ``` SELECT COUNT(*) AS total_films FROM film WHERE studio ilike '%universal%';
                        ``` SELECT studio FROM film WHERE director != 'Walter Hill' GROUP BY studio HAVING COUNT(film_id) = 0;
                        ``` SELECT studio FROM film WHERE "director" not ilike '%Walter%Hill%'
                        ``` SELECT film.title FROM film WHERE film.gross_in_dollar > 4500000;
                        ``` SELECT studio FROM film WHERE gross_in_dollar > 4500000;
                        ``` SELECT film.title, film.director FROM film WHERE film.studio not ilike '%china%' ORDER BY film.title NULLS LAST;
                        ``` SELECT film.title, film.director FROM film WHERE film.studio not ilike '%China%' ORDER BY film.title NULLS LAST;
                        ``` SELECT COUNT(*) AS total_items FROM Ref_Calendar;
                        ``` SELECT COUNT(*) AS total_items FROM Ref_Calendar;
                        ``` SELECT Ref_Calendar.Calender_Date, Ref_Calendar.Day_Number FROM Ref_Calendar;
                        ``` SELECT Ref_Calendar.Calendar_Date, Ref_Calendar.Day_Number FROM Ref_Calendar;
                        ``` SELECT COUNT(Document_Type_Code) AS total_document_types FROM Ref_Document_Types;
                        ``` SELECT COUNT(*) AS number_of_document_types FROM Ref_Document_Types;
                        ``` SELECT Ref_Document_Types.Document_Type_Code, Ref_Document_Types.Document_Type_Name FROM Ref_Document_Types;
                        ``` SELECT Ref_Document_Types.Document_Type_Code, Ref_Document_Types.Document_Type_Name FROM Ref_Document_Types;
                        ``` SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Code = 'RV';
                        ``` SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Code = 'RV';
                        ``` SELECT Ref_Document_Types.Document_Type_Code FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ilike '%Paper%' ;
                        ``` SELECT Ref_Document_Types.Document_Type_Code FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ilike '%Paper%'
                        ``` SELECT COUNT(*) FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')
                        ``` SELECT COUNT(*) FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')
                        ``` SELECT All_Documents.Date_Stored FROMAll_Documents WHEREAll_Documents.Document_Name ilike '%Marry%CV%' ;
                        ``` SELECT All_Documents.Date_Stored FROMAll_Documents WHEREAll_Documents.Document_Name ilike '%Marry%CV%' ;
                        ``` SELECT COUNT(*) FROM Ref_locations;
                        ``` SELECT COUNT(*) AS number_of_locations FROM Ref_Locations;
                        ``` SELECT Ref_locations.location_code, Ref_locations.location_name FROM Ref_locations;
                        ``` SELECT Ref_locations.location_code, Ref_locations.location_name FROM Ref_locations;
                        ``` SELECT Ref_locations.location_name, Ref_locations.location_description FROM ref_locations WHERE ref_locations.location_code = 'x';
                        ``` SELECT Ref_locations.location_name, Ref_locations.location_description FROM Ref_locations WHERE Ref_locations.location_code = 'x';
                        ``` SELECT Ref_locations.location_code FROM Ref_locations WHERE Ref_locations.location_name ilike '%Canada%';
                        ``` SELECT Ref_locations.location_code FROM Ref_locations WHERE "Country" ILIKE '%canada%';
                        ``` SELECT COUNT(Role.role_code) AS total_roles FROM roles;
                        ``` SELECT COUNT(Role.role_code) AS total_roles FROM roles;
                        ``` SELECT roles_code, role_name,role_description FROM roles;
                        ``` SELECT r.role_code, r.role_name, r.role_description FROM roles r;
                        ``` SELECT Roles.Role_name, Roles.role_description FROM Roles WHERE Roles.role_code = 'MG';
                        ``` SELECT r.role_name, r.role_description FROM roles r WHERE r.role_code = 'MG';
                        ``` SELECT Role_Description FROM Roles WHERE Role_Name ilike '%Proof%Reader%'
                        ``` SELECT Roles.role_description FROM roles WHERE roles.role_name ilike '%proof%reader%' ;
                        ``` SELECT COUNT(Employee_ID) AS total_employees FROM Employees;
                        ``` SELECT COUNT(Employee_ID) AS total_employees FROM Employees;
                        ``` SELECT Employees.Employee_Name, Employees.Role_Code, Employees.date_of_birth FROM Employees WHERE Employees.employee_name ilike '%Armoni%' ;
                        ``` SELECT Employees.Employee_Name, Employees.Role_Code, Employees.Date_of_Birth FROM Employees WHERE Employees.Employee_Name ILIKE '%Armoni%';
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_Name ILIKE '%ebba%';
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_Name ILIKE '%Ebba%' ;
                        ``` SELECT Employees.Employee_Name FROM Employees WHERE Employees.Role_Code ilike '%HR%';
                        ``` SELECT Employees.Employee_Name FROM Employees WHERE Employees.Role_Code ilike '%HR%';
                        ``` SELECT Employees.role_code, COUNT(Employees.employee_id) AS employee_count FROM Employees GROUP BY Employees.role_code;
                        ``` SELECT Role_Code, COUNT(Employee_ID) AS Employee_Count FROM Employees GROUP BY Role_Code;
                        ``` SELECT Employees.Role_code, COUNT(Employees.employee_id) AS employee_count FROM Employees GROUP BY Employees.role_code ORDER BY employee_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Employees.role_code, COUNT(Employees.employee_id) AS employee_count FROM Employees GROUP BY Employees.role_code ORDER BY employee_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3;
                        ``` SELECT DISTINCT Employees.role_code FROM Employees GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) >= 3;
                        ``` SELECT Employees.role_code, COUNT(Employees.employee_id) AS employee_count FROM Employees GROUP BY Employees.role_code ORDER BY employee_count ASC NULLS LAST LIMIT 1;
                        ``` SELECT Employees.role_code FROM Employees GROUP BY Employees.role_code ORDER BY COUNT(Employees.employee_id) ASC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT Document_locations.location_code FROM document_locations;
                        ``` SELECT DISTINCT Document_Locations.location_code FROM Document_locations;
                        ``` SELECT Document_locations.location_code, MIN(document_locations.date_in_location_from) AS min_date_in_location_from, MAX(document_locations.date_in_location_to) AS max_date_in_location_to FROM document_locations GROUP BY document_locations.location_code;
                        ``` SELECT Document_locations.location_code, MIN(document_locations.date_in_location_from) AS min_date_in_location_from, MAX(document_locations.date_in_location_to) AS max_date_in_location_to FROM document_locations GROUP BY document_locations.location_code;
                        ``` SELECT Document_locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_locations GROUP BY Document_locations.location_code;
                        ``` SELECT Document_Locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_locations GROUP BY Document_locations.location_code;
                        ``` SELECT Document_Locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_locations GROUP BY Document_locations.location_code ORDER BY document_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Document_Locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_locations GROUP BY Document_locations.location_code ORDER BY document_count DESC LIMIT 1;
                        ``` SELECT Document_locations.location_code FROM document_locations GROUP BY document_locations.location_code HAVING COUNT(document_locations.document_id) >= 3;
                        ``` SELECT DISTINCT Document_Locations.location_code FROM Document_locations GROUP BY Document_locations.location_code HAVING COUNT(Document_locations.document_id) >= 3;
                        ``` SELECT e.employee_id, COUNT(dd.document_id) AS total_documents_destroyed FROM employees e JOIN documents_to_be_destroyed dd ON e.employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.employee_id;
                        ``` SELECT e.employee_id, COUNT(dd.document_id) AS total_documents_destroyed FROM Employees e JOIN Documents_to_be_Destroyed dd ON e.employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.employee_id;
                        ``` SELECT e.employee_id, COUNT(dd.document_id) AS document_count FROM employees e JOIN documents_to_be_destroyed dd ON e.employee_id = dd.destruction_authorised_by_employee_id OR e.employee_id = dd.destroyed_by_employee_id GROUP BY e.employee_id;
                        ``` SELECT e.employee_id, COUNT(dd.document_id) AS total_documents_destroyed FROM employees e JOIN documents_to_be_destroyed dd ON e.employee_id = dd.destruction_authorised_by_employee_id OR e.employee_id = dd.destroyed_by_employee_id GROUP BY e.employee_id;
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Role_Code not ilike '%destruction%';
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_ID NOT IN (SELECT Authorized_Destruction_Employees.Employee_ID FROM Authorized_Destruction_Employees);
                        ``` SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed;
                        ``` SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed;
                        ``` SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed;
                        ``` SELECT e.employee_id FROM Employees e JOIN Documents_to_be_Destroyed d ON e.employee_id = d.destruction_authorised_by_employee_id;
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_ID NOT IN (SELECT Destroyed_By.Employee_ID FROM Documents_Destroyed_By);
                        ``` SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_ID NOT IN (SELECT Destroyed_By_Employee.Employee_ID FROM Destroyed_By_Employee);
                        ``` SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID, Documents_to_be_Destroyed.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed;
                        ``` SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID, Documents_to_be_Destroyed.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed;
                        ``` SELECT COUNT(*) AS club_count FROM Club;
                        ``` SELECT COUNT(ClubID) AS total_clubbs FROM Club;
                        ``` SELECT c.club_name FROM club c;
                        ``` SELECT c.club_name FROM club c;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT Student.Fname FROM Student;
                        ``` SELECT Student.Fname FROM Student;
                        ``` SELECT Club.ClubDescription FROM Club WHERE Club.ClubName = 'Tennis Club';
                        ``` SELECT Club.ClubDesc FROM Club WHERE Club.ClubName ilike '%Tennis%Club%' ;
                        ``` SELECT Club.ClubDesc FROM Club WHERE Club.ClubName ilike '%Pen%and%Paper%Gaming%' ;
                        ``` SELECT Club.ClubDesc FROM Club WHERE Club.ClubName ilike '%Pen%and%Paper%Gaming%' ORDER BY Club.ClubName NULLS LAST;
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ilike '%Tennis%Club%' ORDER BY Club.ClubLocation NULLS LAST;
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ilike '%Tennis%Club%' ;
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ilike '%Pen%and%Paper%Gaming%';
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ilike '%Pen%and%Paper%Gaming%' ;
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Hopkins%Student%Enterprises%' ;
                        ``` SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Hopkins%Student%Enterprises%' ;
                        ``` SELECT c.club_name FROM club c WHERE c.club_location ilike '%akw%';
                        ``` SELECT c.clubname FROM club c WHERE c.clublocation ilike '%akw%' ;
                        ``` SELECT COUNT(*) AS club_count FROM Club WHERE ClubLocation ilike '%HHH%';
                        ``` SELECT COUNT(*) FROM Club WHERE ClubLocation ilike '%HHH%';
                        ``` SELECT MIN(project_staff.date_from) AS earliest_start_date, MAX(project_staff.date_to) AS latest_end_date FROM project_staff WHERE project_staff.project_id IN (SELECT project_id FROM project_staff GROUP BY project_id HAVING COUNT(staff_id) > ALL_PROJECTS);
                        ``` SELECT MIN(project_staff.date_from) AS earliest_start_date, MAX(project_staff.date_to) AS latest_end_date FROM project_staff WHERE project_staff.role_code = 'leader' GROUP BY project_staff.project_id HAVING COUNT(project_staff.staff_id) > (SELECT COUNT(staff_id) FROM project_staff WHERE role_code != 'leader');
                        ``` SELECT p.project_id, p.organisation_id, p.project_details FROM Projects p LEFT JOIN Researchers r ON p.project_id = r.project_id WHERE r.project_id IS NULL;
                        ``` SELECT p.project_id, p.project_details FROM Projects p LEFT JOIN Staff s ON p.project_id = s.project_id AND s.role_id = 3 WHERE s.project_id IS NULL;
                        ``` SELECT p.staff_id, to_char(p.date_from, 'DD-MM-YYYY') AS date_from, to_char(p.date_to, 'DD-MM-YYYY') AS date_to FROM Project_Staff p WHERE p.role_code = 'Researcher';
                        ``` SELECT p.project_id, to_char(p.date_from, 'YYYY-MM-DD') AS project_start_date, to_char(p.date_to, 'YYYY-MM-DD') AS project_end_date, COUNT(s.staff_id) OVER (PARTITION BY p.project_id ORDER BY s.date_from ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS staff_count FROM Project_Staff p JOIN Staff_Assignment s ON p.project_id = s.project_id;
                        ``` SELECT COUNT(DISTINCT project_staff.role_code) AS number_of_roles FROM project_staff;
                        ``` SELECT COUNT(DISTINCT Project_Staff.role_code) AS number_of_roles FROM Project_Staff;
                        ``` SELECT g.organisation_id, SUM(g.grant_amount) AS total_grant_amount FROM Grants g GROUP BY g.organisation_id;
                        ``` SELECT g.grant_id, SUM(g.grant_amount) AS total_grant_amount FROM Grants g GROUP BY g.grant_id;
                        ``` SELECT s.staff_id, r.researcher_description FROM staff AS s JOIN staff_roles AS r ON s.staff_role = r.role_code;
                        ``` SELECT sr.role_description FROM Staff_Roles sr WHERE sr.role_code = 'RESEARCHER';
                        ``` SELECT MIN(date_from) AS earliest_start_date FROM Project_Staff;
                        ``` SELECT MIN(date_from) AS earliest_start_date FROM Project_Staff;
                        ``` SELECT Projects.project_id, Projects.organisation_id, Projects.project_details FROM Projects WHERE Projects.project_id IS NULL;
                        ``` SELECT Projects.project_id, Projects.organisation_id, Projects.project_details FROM Projects WHERE Projects.project_id NOT IN (SELECT Outcomes.project_id FROM Comes) ;
                        ``` SELECT Document_Types.document_type_code FROM Document_Types WHERE Document_Types.document_description ilike 'Initial%';
                        ``` SELECT Document_Types.document_type_code FROM Document_Types WHERE Document_Types.document_description ilike 'Initial%';
                        ``` SELECT MAX(grant_id), COUNT(document_id) AS document_count FROM Documents;
                        ``` SELECT g.grant_id, COUNT(d.document_id) AS total_documents, MAX(row_number) AS max_rows FROM grants g JOIN documents d ON g.grant_id = d.grant_id GROUP BY g.grant_id;
                        ``` SELECT COUNT(*) AS total_outcomes FROM Project_Outcomes WHERE outcome_code ilike '%Patent%';
                        ``` SELECT COUNT(*) AS total_outcomes FROM Project_Outcomes;
                        ``` SELECT COUNT(DISTINCT staff_id) AS number_of_staff FROM Project_Staff WHERE date_from < '1989-04-24 23:51:54' AND (role_code = 'Leader' OR role_code IS NOT NULL);
                        ``` SELECT COUNT(DISTINCT staff_id) AS total_staff FROM Project_Staff WHERE date_from < '1989-04-24 23:51:54';
                        ``` SELECT MAX(date_to) AS latest_exit_date FROM Project_Staff;
                        ``` SELECT MAX(date_to) AS latest_exit_date FROM Project_Staff;
                        ``` SELECT Projects.project_id, Projects.organisation_id, Projects.project_details FROM Projects WHERE Projects.organisation_id = 757071;
                        ``` SELECT p.project_details FROM Projects p JOIN Organisations o ON p.organisation_id = o.organisation_id WHERE o.org_name = 'John Doe' ORDER BY COUNT(p.project_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Research_Staff.staff_details FROM Research_Staff ORDER BY Research_Staff.staff_details ASC;
                        ``` SELECT Research_Staff.staff_details FROM Research_Staff ORDER BY Research_Staff.staff_details ASC;
                        ``` SELECT COUNT(*) AS total_tasks FROM Tasks;
                        ``` SELECT COUNT(*) AS total_tasks FROM Tasks;
                        ``` SELECT ps.staff_id, ps.project_id, ps.other_details FROM Project_Staff ps WHERE ps.role_code = 'Manager';
                        ``` SELECT ps.staff_id, ps.project_id, ps.role_code FROM Project_Staff ps WHERE ps.date_from >= to_timestamp('2003-04-19 15:06:20', 'YYYY-MM-DD HH24:MI:SS') AND ps.date_to <= to_timestamp('2016-03-15 00:33:18', 'YYYY-MM-DD HH24:MI:SS');
                        ``` SELECT ps.staff_id, ps.project_id, MAX(length(ps.role_code)) AS max_role_length FROM Project_Staff ps GROUP BY ps.staff_id, ps.project_id HAVING COUNT(DISTINCT ps.project_id) > 1;
                        ``` SELECT ps.staff_id, ps.project_id, MAX(length(ps.role_code)) AS max_role_length FROM project_staff ps GROUP BY ps.staff_id, ps.project_id HAVING COUNT(ps.project_id) > 1;
                        ``` SELECT COUNT(*) FROM Person WHERE gender = 'female';
                        ``` SELECT COUNT(*) FROM Person WHERE gender = 'female';
                        ``` SELECT AVG(age) AS average_age FROM Person;
                        ``` SELECT AVG(age) FROM Person;
                        ``` SELECT COUNT(DISTINCT person.city) AS number_of_cities FROM person;
                        ``` SELECT COUNT(DISTINCT city) AS number_of_cities FROM Person;
                        ``` SELECT COUNT(DISTINCT Person.job) AS number_of_jobs FROM Person;
                        ``` SELECT COUNT(DISTINCT Person.job) AS number_of_jobs FROM Person;
                        ``` SELECT MAX(Person.age) AS max_age, MIN(person.name) AS oldest_person FROM person.person;
                        ``` SELECT p.name FROM Person p WHERE p.age = (SELECT MIN(age) FROM Person);
                        ``` SELECT MAX(p.age) AS oldest_person_with_student_job FROM Person p WHERE p.profession = 'student';
                        ``` SELECT Person.name FROM Person ORDER BY Person.age DESC LIMIT 1;
                        ``` SELECT MIN(Person.age) AS min_age FROM Person WHERE Person.gender = 'male';
                        ``` SELECT Person.name FROM Person WHERE Person.gender = 'male' ORDER BY Person.age ASC LIMIT 1;
                        ``` SELECT CAST(Person.age AS FLOAT) AS age FROM Person WHERE person.name ILIKE '%Zach%' AND person.occupation ILIKE '%doctor%';
                        ``` SELECT CAST(Person.age AS FLOAT) AS age FROM person WHERE person.name ILIKE '%Zach%';
                        ``` SELECT Person.name FROM Person WHERE "age" < '30' ;
                        ``` SELECT Person.name FROM Person WHERE "age" < '30';
                        ``` SELECT COUNT(*) FROM Person WHERE age > 30 AND role ilike '%engineer%';
                        ``` SELECT COUNT(*) AS number_of_engineers FROM Person WHERE age > 30 AND role = 'Engineer';
                        ``` SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender;
                        ``` SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender;
                        ``` SELECT Person.profession, AVG(Person.age) AS average_age FROM Person GROUP BY Person.profession;
                        ``` SELECT Person.profession, AVG(Person.age) AS average_age FROM Person GROUP BY Person.profession;
                        ``` SELECT Person.profession, AVG(Person.age) AS average_age FROM Person WHERE Person.gender = 'male' GROUP BY Person.profession;
                        ``` SELECT Person.occupation, AVG(Person.age) AS average_age FROM Person WHERE person.gender = 'male' GROUP BY Person.occupation;
                        ``` SELECT Person.name, MIN(Person.age) AS min_age FROM Person GROUP BY Person.occupation;
                        ``` SELECT p.name, p.age, pr.profession FROM Person p JOIN Profession pr ON p.profession = pr.name ORDER BY p.age ASC;
                        ``` SELECT Person.gender, COUNT(*) AS total_people FROM Person WHERE age < 40 GROUP BY Person.gender;
                        ``` SELECT Person.gender, COUNT(*) AS total_people FROM Person WHERE age < 40 GROUP BY Person.gender;
                        ``` SELECT p.name FROM Person p WHERE p.age > (SELECT AVG(e.age) FROM Engineer e);
                        ``` SELECT p.name FROM Person p JOIN Engineer e ON p.id = e.person_id ORDER BY p.age NULLS LAST;
                        ``` SELECT COUNT(*) AS total_people FROM Person WHERE age > (SELECT AVG(age) FROM Engineer);
                        ``` SELECT p.name AS person_name, ph.age AS person_age, e.name AS employee_name, e.age AS employee_age FROM Person p JOIN Employee e ON p.id = e.id WHERE p.age > e.age;
                        ``` SELECT p.name, p.title FROM Person AS p ORDER BY p.name;
                        ``` SELECT p.name, p.salary FROM Person p ORDER BY p.name ASC;
                        ``` SELECT Person.name FROM Person ORDER BY Person.age DESC;
                        ``` SELECT Person.name FROM Person ORDER BY Person.age DESC;
                        ``` SELECT p.name, p.age FROM Person p WHERE gender = 'Male' ORDER BY p.age NULLS LAST;
                        ``` SELECT p.name, p.age FROM Person p WHERE gender = 'M';
                        ``` SELECT p.name FROM Person p LEFT JOIN Student_Friends sf ON p.id = sf.student_id WHERE sf.friend_id IS NULL;
                        ``` SELECT p1.name FROM Person AS p1 LEFT JOIN Person AS p2 ON (p1.name = p2.name AND p2.age BETWEEN 18 AND 25) WHERE p2.name IS NULL;
                        ``` SELECT PersonFriend.name FROM PersonFriend GROUP BY PersonFriend.name HAVING COUNT(PersonFriend.friend) = 1;
                        ``` SELECT pf.name FROM PersonFriend pf WHERE pf.friend IS NOT NULL GROUP BY pf.name HAVING COUNT(pf.friend) = 1;
                        ``` SELECT PersonFriend.name FROM PersonFriend WHERE "friend" ILIKE '%Zach%' ORDER BY PersonFriend.year DESC LIMIT 1;
                        ``` SELECT PersonFriend.name FROM PersonFriend WHERE "friend" ILIKE '%Zach%' ORDER BY (SELECT COUNT(*) FROM PersonFriend WHERE "friend" = PersonFriend.name) DESC LIMIT 1;
                        ``` SELECT PersonFriend.name FROM PersonFriend WHERE "friend" ILIKE '%Alice%' ORDER BY year ASC NULLS LAST LIMIT 1;
                        ``` SELECT pf.name FROM PersonFriend pf WHERE pf.friend = 'Alice' ORDER BY pf.year ASC;
                        ``` SELECT p1.name FROM Person AS p1 LEFT JOIN Person AS p2 ON (p1.name != p2.name) AND (p1.city = p2.city) WHERE p2.name IS NULL;
                        ``` SELECT p.name FROM Person p LEFT JOIN Friend f ON p.id = f.friend_id WHERE f.friend_id IS NULL;
                        ``` SELECT COUNT(*) AS total_people_without_austin_friend FROM PersonFriend WHERE 'Austin' NOT IN (SELECT city FROM Address);
                        ``` SELECT COUNT(*) AS total_people_without_friends_in_austin FROM PersonFriend WHERE year IS NULL;
                        ``` SELECT COUNT(*) AS total_members FROM member;
                        ``` SELECT member.name FROM member ORDER BY member.name ASC;
                        ``` SELECT member.name, member.country FROM member;
                        ``` SELECT member.name FROM member WHERE member.country IN ('United States', 'Canada');
                        ``` SELECT member.country, COUNT(member.member_id) AS member_count FROM member GROUP BY member.country ORDER BY member_count DESC NULLS LAST;
                        ``` SELECT member.country, COUNT(member.member_id) AS total_members FROM member GROUP BY member.country ORDER BY total_members DESC NULLS LAST LIMIT 1;
                        ``` SELECT member.country FROM member GROUP BY member.country HAVING COUNT(member.member_id) > 2;
                        ``` SELECT college.leader_name, college.college_location FROM college;
                        ``` SELECT member.name FROM member WHERE member.member_id NOT IN (SELECT round_member.member_id FROM round_member);
                        ``` SELECT Documents.document_name, Documents.access_count FROM Documents ORDER BY Documents.document_name ASC;
                        ``` SELECT Documents.document_name, Documents.access_count FROM Documents ORDER BY Documents.document_name ASC;
                        ``` WITH document_access_count AS (SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1) SELECT document_name, access_count FROM document_access_count;
                        ``` WITH ranked_documents AS (SELECT document_name, access_count FROM documents ORDER BY access_count DESC NULLS LAST LIMIT 1) SELECT document_name, access_count FROM ranked_documents;
                        ``` SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_name) > 4;
                        ``` SELECT Documents.document_code FROM Documents GROUP BY Documents.document_code HAVING COUNT(Documents.access_count) >= 5;
                        ``` SELECT SUM(documents.access_count) AS total_access_count FROM documents WHERE documents.document_type_code = (SELECT MAX(documents.document_type_code) FROM documents);
                        ``` SELECT SUM(documents.access_count) AS total_access_count FROM documents GROUP BY documents.document_type_code ORDER BY total_access_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(access_count) AS average_access_count FROM Documents;
                        ``` SELECT AVG(access_count) AS average_access_count FROM Documents;
                        ``` SELECT Documents.document_type_code FROM Documents WHERE Documents.document_name ilike '%David%CV%'
                        ``` SELECT Documents.document_type_code FROM Documents WHERE Documents.document_name ilike '%David%CV%' ;
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.access_count IN (SELECT MAX(Documents.access_count) FROM Documents GROUP BY Documents.document_type_code) AND Documents.document_type_code IN (SELECT MAX(Documents.document_type_code) FROM Documents GROUP BY Documents.document_structure_code);
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_type_code IN (SELECT type_code FROM (SELECT type_code, COUNT(*) AS count FROM Documents GROUP BY type_code ORDER BY count DESC NULLS LAST LIMIT 3) AS subquery) AND Documents.document_structure_code IN (SELECT structure_code FROM (SELECT structure_code, COUNT(*) AS count FROM Documents GROUP BY structure_code ORDER BY count DESC NULLS LAST LIMIT 3) AS subquery2);
                        ``` SELECT documents.document_type_code FROM documents WHERE documents.access_count > 10000 GROUP BY documents.document_type_code;
                        ``` SELECT Documents.document_type_code FROM Documents WHERE Documents.access_count <= 10000 ORDER BY Documents.document_type_code NULLS LAST;
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_name not ilike '%Section%';
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_name NOT IN (SELECT Sections.section_name FROM Sections);
                        ``` SELECT u.user_login, u.password FROM users u WHERE row_number() OVER (PARTITION BY u.user_id ORDER BY length(u.role_code) DESC NULLS LAST) = 1;
                        ``` SELECT Users.user_name, Users.password FROM Users WHERE Users.role_code = (SELECT MAX(Users.role_code) FROM Users);
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_name not ilike '%image%';
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_name not ilike '%image%' ;
                        ``` SELECT documents.document_name FROM documents WHERE documents.document_name ilike '%CV%';
                        ``` SELECT Documents.document_name FROM Documents WHERE Documents.document_name ilike '%CV%';
                        ``` SELECT COUNT(*) AS total_users FROM Users WHERE user_login IS NOT NULL;
                        ``` SELECT COUNT(*) AS total_logged_in_users FROM Users WHERE user_login IS NOT NULL;
                        ``` SELECT r.role_description FROM roles r WHERE r.role_id IN (SELECT u.role_id FROM users u JOIN sessions s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.session_id) > 0);
                        ``` SELECT roles_description FROM roles ORDER BY COUNT(*) DESC LIMIT 1;
                        ``` SELECT AVG(access_count) AS average_access_count FROM Documents WHERE document_name = (SELECT MIN(document_name) FROM Documents);
                        ``` SELECT AVG(documents.access_count) AS average_access_count FROM documents GROUP BY documents.document_name ORDER BY average_access_count NULLS LAST;
                        ``` SELECT Images.fimage_name, Images.fimage_url FROM Images ORDER BY Images.fimage_name NULLS LAST;
                        ``` SELECT Images.gallery_name, Images.gallery_url FROM Images ORDER BY Images.gallery_name ASC;
                        ``` SELECT Users.role_code, COUNT(*) AS user_count FROM Users GROUP BY Users.role_code;
                        ``` SELECT Users.role_code, COUNT(*) AS user_count FROM Users GROUP BY Users.role_code;
                        ``` SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_code) > 2;
                        ``` SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_code) > 2;
                        ``` SELECT COUNT(*) FROM Companies;
                        ``` SELECT COUNT(*) FROM Companies;
                        ``` SELECT Companies.name FROM Companies ORDER BY Companies.Market_Value_billion DESC;
                        ``` SELECT Companies.name FROM Companies ORDER BY Companies.Market_Value_billion DESC;
                        ``` SELECT Companies.name FROM Companies WHERE "Headquarters" != 'USA';
                        ``` SELECT Companies.name FROM Companies WHERE "Headquarters" != 'USA';
                        ``` SELECT Companies.name, Companies.Assets_billion FROM Companies ORDER BY Companies.name ASC;
                        ``` SELECT c.name, CAST(c.assets_billion AS FLOAT) AS assets FROM companies c ORDER BY c.name ASC;
                        ``` SELECT AVG(Profits_billion) AS average_profit FROM Companies;
                        ``` SELECT AVG(Profits_billion) AS average_profit FROM Companies;
                        ``` SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry != 'Banking';
                        ``` SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry != 'Banking';
                        ``` SELECT COUNT(DISTINCT Companies.Industry) AS number_of_industries FROM Companies;
                        ``` SELECT COUNT(DISTINCT Companies.Industry) AS num_industries FROM Companies;
                        ``` SELECT b.name FROM buildings AS b ORDER BY b.height DESC;
                        ``` SELECT b.name FROM buildings AS b ORDER BY b.height DESC;
                        ``` SELECT MAX(buildings.stories) AS max_stories FROM buildings;
                        ``` SELECT MAX(buildings.stories) AS max_stories FROM buildings;
                        ``` SELECT b.name FROM buildings AS b WHERE b.status = 'on-hold' ORDER BY b.stories ASC;
                        ``` SELECT b.name FROM buildings b WHERE b.status = 'on-hold' ORDER BY b.stories ASC;
                        ``` SELECT Companies.Industry, COUNT(*) AS num_companies FROM Companies GROUP BY Companies.industry;
                        ``` SELECT Companies.Industry, COUNT(Companies.id) AS company_count FROM Companies GROUP BY Companies.industry;
                        ``` SELECT Companies.Industry, COUNT(Companies.id) AS company_count FROM Companies GROUP BY Companies.industry ORDER BY company_count DESC;
                        ``` SELECT c.industry, COUNT(*) AS num_companies FROM Companies c GROUP BY c.industry ORDER BY num_companies DESC;
                        ``` SELECT Companies.Industry FROM Companies GROUP BY Companies.industry ORDER BY COUNT(Companies.id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Companies.Industry, COUNT(*) AS company_count FROM Companies GROUP BY Companies.industry ORDER BY company_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT b.name FROM buildings AS b LEFT JOIN offices AS o ON b.id = o.building_id WHERE o.building_id IS NULL;
                        ``` SELECT b.name FROM buildings AS b LEFT JOIN offices AS o ON b.id = o.building_id WHERE o.building_id IS NULL;
                        ``` SELECT Companies.Industry FROM Companies WHERE Companies.Headquarters IN ('USA', 'China') GROUP BY Companies.industry;
                        ``` SELECT DISTINCT Companies.Industry FROM Companies WHERE (Comanies.headquarters ilike '%usa%' AND companies.headquarters ilike '%china%') GROUP BY companies.industry;
                        ``` SELECT COUNT(*) FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')
                        ``` SELECT COUNT(*) FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')
                        ``` SELECT Companies.Headquarters FROM Companies GROUP BY Companies.Headquarters HAVING COUNT(Companies.id) > 2;
                        ``` SELECT Companies.Headquarters FROM Companies GROUP BY Companies.Headquarters HAVING COUNT(Companies.id) > 2;
                        ``` SELECT COUNT(Product_ID) AS total_products FROM Products;
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC;
                        ``` SELECT Products.Product_Name, Products.Product_Type_Code FROM Products;
                        ``` SELECT Products.Product_Name, Products.Product_Price FROM Products WHERE Products.Product_Name ilike '%Dining%' OR Products.Product_Name ilike '%Trading Policy%';
                        ``` SELECT AVG(Products.Product_Cost) AS average_product_cost FROM Products;
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC NULLS LAST LIMIT 1;
                        ``` SELECT Products.Product_Type_Code, COUNT(*) AS product_count FROM Products GROUP BY Products.Product_Type_Code;
                        ``` SELECT Products.Product_Type_Code, COUNT(*) AS frequency FROM Products GROUP BY Products.Product_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT Products.Product_Type_Code FROM Products GROUP BY Products.Product_Type_Code HAVING COUNT(Products.Product_ID) >= 2;
                        ``` SELECT DISTINCT Products.Product_Type_Code FROM Products WHERE Products.Product_ID IN (SELECT Product_ID FROM Products WHERE Product_Price > 4500) AND Products.Product_ID IN (SELECT Product_ID FROM Products WHERE Product_Typed < 3000);
                        ``` SELECT p.product_name FROM products p LEFT JOIN event_products ep ON p.product_id = ep.product_id WHERE ep.product_id IS NULL;
                        ``` SELECT COUNT(*) AS total_artworks FROM artwork;
                        ``` SELECT artwork.name FROM artwork ORDER BY artwork.name ASC;
                        ``` SELECT artwork.name FROM artwork WHERE artwork.type != 'Program Talent Show';
                        ``` SELECT festival_detail.festival_name, festival_detail.location FROM festival_detail;
                        ``` SELECT festival_detail.chair_name FROM festival_detail ORDER BY festival_detail.year ASC;
                        ``` SELECT festival_detail.location FROM festival_detail WHERE festival_detail.num_of_audience = (SELECT MAX(festival_detail.num_of_audience) FROM festival_detail);
                        ``` SELECT festival_detail.festival_name FROM festival_detail WHERE festival_detail.year = 2007;
                        ``` SELECT AVG(festival_detail.num_of_audience) AS average_audience FROM festival_detail;
                        ``` SELECT festival_detail.festival_name FROM festival_detail ORDER BY festival_detail.year DESC NULLS LAST LIMIT 3;
                        ``` SELECT artwork.type, COUNT(*) AS total_artworks FROM artwork GROUP BY artwork.type;
                        ``` SELECT artwork.type, COUNT(artwork.type) AS frequency FROM artwork GROUP BY artwork.type ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT festival_detail.year FROM festival_detail GROUP BY festival_detail.year HAVING COUNT(festival_detail.festival_id) > 1;
                        ``` SELECT artwork.name FROM artwork WHERE artwork.artwork_id NOT IN (SELECT nominee.nominated_artwork_id FROM nominated);
                        ``` SELECT SUM(festival_detail.num_of_audience) AS total_audience FROM festival_detail WHERE festival_detail.year IN (2008, 2010);
                        ``` SELECT SUM(festival_detail.num_of_audience) AS total_audience FROM festival_detail;
                        ``` SELECT festival_detail.year FROM festival_detail WHERE festival_detail.location ilike '%United%States%' AND festival_detail.location not ilike '%United%States%';
                        ``` SELECT COUNT(*) AS total_premises FROM Premises;
                        ``` SELECT Premises.premise_type FROM Premises GROUP BY Premises.premise_type;
                        ``` SELECT Premises.premise_type, Premises.premise_details FROM Premises ORDER BY Premises.premise_type;
                        ``` SELECT Premises.premise_type, COUNT(Premises.premise_id) AS total_premises FROM Premises GROUP BY Premises.premise_type;
                        ``` SELECT Mailshot_campaigns.product_category, COUNT(*) AS total_mailshots FROM Mailshot_campaigns GROUP BY Mailshot_campaigns.product_category;
                        ``` SELECT customers.customer_name, customers.customer_phone FROM customers WHERE customers.customer_email IS NULL;
                        ``` SELECT Mailshot_Customers.outcome_code, COUNT(*) AS total_mailshots FROM Mailshot_customers GROUP BY Mailshot_customers.outcome_code;
                        ``` SELECT DISTINCT address_type_code FROM customers_addresses;
                        ``` SELECT customer_id, order_shipping_charges FROM customer_orders WHERE order_status_code IN ('Cancelled', 'Paid') ORDER BY customer_id NULLS LAST;
                        ``` SELECT COUNT(CID) AS total_courses FROM Course;
                        ``` SELECT COUNT(CID) AS total_courses FROM Course;
                        ``` SELECT COUNT(*) FROM Course WHERE Credits > 2;
                        ``` SELECT COUNT(*) FROM Course WHERE Credits > 2;
                        ``` SELECT Course.CName FROM Course WHERE Course.Credits = '1' ;
                        ``` SELECT Course.CName FROM Course WHERE Course.Credits = '1' ;
                        ``` SELECT Course.CName FROM Course WHERE Course.Days ilike '%MTW%' ORDER BY Course.CName NULLS LAST;
                        ``` SELECT Course.CName FROM Course WHERE Course.Days ilike '%MTW%' ORDER BY Course.CName NULLS LAST;
                        ``` SELECT COUNT(*) AS department_count FROM Department WHERE Division ilike '%AS%';
                        ``` SELECT COUNT(*) FROM Department WHERE Division ilike '%AS%';
                        ``` SELECT Department.DPhone FROM Department WHERE "Room" ILIKE '%268%';
                        ``` SELECT Department.DPhone FROM Department WHERE "Room" ILIKE '%268%';
                        ``` SELECT COUNT(DISTINCT Enrolled_in.StuID) AS num_students FROM Enrolled_in WHERE Enrolled_in.Grade ilike '%B%';
                        ``` SELECT COUNT(DISTINCT Enrolled_in.StuID) AS number_of_students FROM Enrolled_in WHERE Enrolled_in.Grade = 'B';
                        ``` SELECT MAX(gradepoint) AS max_grade_point, MIN(gradepoint) AS min_grade_point FROM Gradeconversion;
                        ``` SELECT MAX(gradeconversion.gradepoint) AS max_grade_points, MIN(gradeconversion.gradepoint) AS min_grade_points FROM gradeconversion;
                        ``` SELECT Student.Fname FROM Student WHERE Student.Fname ilike '%a%';
                        ``` SELECT Student.Fname FROM Student WHERE Student.Fname ilike '%a%';
                        ``` SELECT faculty.fname, faculty.lname FROM faculty WHERE faculty.building = 'NEB' AND faculty.sex = 'M';
                        ``` SELECT faculty.lname || ',' || faculty.fname AS full_name FROM faculty WHERE faculty.sex = 'M' AND faculty.building ilike '%NEB%';
                        ``` SELECT faculty.room FROM faculty WHERE faculty.rank = 'Professor' AND faculty.building = 'NEB';
                        ``` SELECT faculty.room FROM faculty WHERE faculty.rank = 'Professor' AND faculty.building = 'NEB';
                        ``` SELECT Department.DName FROM Department WHERE "Building" ILIKE '%Mergenthaler%' ;
                        ``` SELECT Department.DName FROM Department WHERE "Building" ILIKE '%Mergenthaler%' ;
                        ``` SELECT Course.CID, Course.CName, Course.Credits FROM Course ORDER BY Course.Credits ASC;
                        ``` SELECT Course.CID, Course.CName, Course.Credit FROM Course ORDER BY Course.Credit ASC;
                        ``` SELECT Course.CName FROM Course ORDER BY Course.Credits DESC;
                        ``` SELECT Course.CName FROM Course ORDER BY Course.Credits DESC;
                        ``` SELECT Student.Fname FROM Student ORDER BY Student.Age DESC;
                        ``` SELECT s.fname, s.age FROM student AS s ORDER BY s.age DESC;
                        ``` SELECT Student.LName FROM Student WHERE Student.Sex = 'F' ORDER BY Student.Age DESC;
                        ``` SELECT s.lname FROM student s WHERE sex = 'F' ORDER BY age DESC;
                        ``` SELECT faculty.lname FROM faculty WHERE faculty.building = 'Barton' ORDER BY faculty.lname ASC;
                        ``` SELECT f.lname FROM faculty f WHERE f.building = 'Barton';
                        ``` SELECT faculty.fname FROM faculty WHERE faculty.rank = 'Professor' ORDER BY faculty.fname ASC;
                        ``` SELECT f.fname FROM faculty f WHERE rank = 'Professor' ORDER BY f.fname;
                        ``` SELECT Department.DName FROM Department WHERE Department.DNo NOT IN (SELECT Student.DNo FROM Student);
                        ``` SELECT Department.DName FROM Department WHERE Department.DNo NOT IN (SELECT Student.DNo FROM Student);
                        ``` SELECT faculty.lname, faculty.fname, COUNT(class.faculty_id) AS class_count FROM faculty JOIN class ON faculty.faculty_id = class.faculty_id GROUP BY faculty.lname, faculty.fname ORDER BY class_count ASC NULLS LAST LIMIT 1;
                        ``` SELECT MIN(faculty.rank) AS least_common_rank FROM faculty GROUP BY faculty.rank;
                        ``` SELECT CName FROM Course WHERE (Credit = '3' OR Credit = '1') AND Hours = '4';
                        ``` SELECT Course.CName FROM Course WHERE (Course.Credit = 3 OR (Course.Credit = 1 AND Course.Hours = 4))
                        ``` SELECT DName FROM Department WHERE "Division" IN ('AS', 'EN') AND "Building" = 'NEB' ORDER BY DName NULLS LAST;
                        ``` SELECT DName FROM Department WHERE "Division" IN ('AS', 'EN') AND "Building" = 'NEB' ORDER BY DName NULLS LAST;
                        ``` SELECT s.fname FROM student s LEFT JOIN enrollment e ON s.stuid = e.student_id WHERE e.student_id IS NULL;
                        ``` SELECT s.fname FROM Student AS s LEFT JOIN Enrollment AS e ON s.stuid = e.student_id WHERE e.student_id IS NULL;
                        ``` SELECT ps.product_id, rank() OVER (ORDER BY total_value_purchased DESC) AS rank FROM Product_Suppliers ps WHERE total_value_purchased IS NOT NULL AND total_amount_purchased IS NOT NULL;
                        ``` SELECT ps.product_id FROM Product_Suppliers ps GROUP BY ps.product_id ORDER BY COUNT(ps.product_id) DESC NULLS LAST LIMIT 3;
                        ``` SELECT products.product_id, products.product_type_code FROM products WHERE products.product_price = (SELECT MIN(products.product_price) FROM products);
                        ``` SELECT p.product_id, pt.product_type_code FROM Products p JOIN Product_Type pt ON p.product_type_code = pt.product_type_code ORDER BY p.product_price ASC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products;
                        ``` SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products;
                        ``` SELECT payment_method_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY payment_method_code;
                        ``` SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code;
                        ``` SELECT Order_Items.product_id FROM Order_Items GROUP BY Order_Items.product_id ORDER BY COUNT(Order_Items.product_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Order_Items.product_id FROM Order_Items GROUP BY Order_Items.product_id ORDER BY COUNT(Order_Items.order_item_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
                        ``` SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
                        ``` SELECT d.dept_store_chain_id, COUNT(s.dept_store_id) AS total_stores FROM Department_Stores d JOIN Store_Locations s ON d.dept_store_id = s.dept_store_id GROUP BY d.dept_store_chain_id ORDER BY total_stores DESC NULLS LAST LIMIT 2;
                        ``` SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id HAVING COUNT(dept_store_id) > (SELECT COUNT(dept_store_id) FROM Department_Stores WHERE dept_store_chain_id = 2) AND COUNT(dept_store_id) > (SELECT COUNT(dept_store_id) FROM Department_Stores WHERE dept_store_chain_id = 3);
                        ``` SELECT MIN(department_id) AS min_staff_department_id FROM Staff_Department_Assignments;
                        ``` SELECT MIN(department_id) AS min_staff_department_id FROM Staff_Department_Assignments;
                        ``` SELECT product_type_code, MIN(product_price) AS min_price, MAX(product_price) AS max_price FROM products GROUP BY product_type_code;
                        ``` SELECT product_type_code, MIN(product_price) AS min_product_price, MAX(product_price) AS max_product_price FROM Products GROUP BY product_type_code;
                        ``` SELECT p.product_type_code FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
                        ``` SELECT p.product_type_code FROM Products p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM Products p2);
                        ``` SELECT p.product_id, p.product_name FROM Products p WHERE p.product_price BETWEEN 600 AND 700;
                        ``` SELECT p.product_id, p.product_name FROM Products p WHERE p.product_price BETWEEN 600 AND 700;
                        ``` SELECT DISTINCT a.customer_id FROM customer_orders a JOIN (SELECT order_id FROM customer_orders WHERE order_status_code = 'Cancelled') b ON a.order_id > b.order_id;
                        ``` SELECT DISTINCT a.customer_id FROM customer_orders a JOIN customer_orders b ON a.order_id > b.order_id AND b.order_status_code = 'Cancelled' WHERE a.order_status_code != 'Cancelled';
                        ``` SELECT sda.staff_id FROM Staff_Department_Assignments sda JOIN (SELECT sd.staff_id, MIN(sd.date_assigned_from) AS min_date FROM Staff_department_assignments sd WHERE sd.military_title_code = 'Clerical' GROUP BY sd.staff_id) sdg ON sda.staff_id = sdg.staff_id WHERE sda.date_assigned_from < sdg.min_date;
                        ``` SELECT s.staff_id FROM Staff_Department_assignments s JOIN (SELECT staff_id, MIN(date_assigned_from) AS min_date FROM Staff_department_assignments WHERE department_title_code = 'Clerical' GROUP BY staff_id) c ON s.staff_id = c.staff_id AND s.date_assigned_from < c.min_date;
                        ``` SELECT Customers.customer_id, Customers.customer_name FROM Customers WHERE Customers.customer_address ilike '%TN%';
                        ``` SELECT Customers.customer_name, Customers.customer_id FROM Customers WHERE 'TN' ilike '%customers.customer_address%';
                        ``` SELECT customers.customer_phone FROM customers UNION SELECT suppliers.supplier_phone FROM suppliers;
                        ``` SELECT Customers.customer_phone FROM Customers;
                        ``` SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3 OR SUM(product_id) > 80000;
                        ``` SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3) OR product_id IN (SELECT product_id, SUM(order_item_id) AS total_order_items FROM Order_Items GROUP BY product_id HAVING SUM(order_item_id) > 80000);
                        ``` SELECT product_id, product_name FROM Products WHERE product_price < 600 OR product_price > 900;
                        ``` SELECT p.product_id, p.product_name FROM Products p WHERE p.product_price < 600 OR p.product_price > 900;
                        ``` SELECT supplier_id FROM Product_Suppliers WHERE total_value_purchased::FLOAT > 50000 OR total_value_purchased::FLOAT < 30000;
                        ``` SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_value_purchased) > 50000 OR AVG(total_value_purchased) < 30000;
                        ``` SELECT AVG(total_amount_purchased) AS average_amount_purchased, AVG(total_value_purchased) AS average_value_purchased FROM Product_Suppliers WHERE total_amount_purchased IS NOT NULL AND total_value_purchased IS NOT NULL;
                        ``` SELECT AVG(total_amount_purchased) AS average_total_amount_purchased, AVG(total_value_purchased) AS average_total_value_purchased FROM Product_Suppliers GROUP BY supplier_id HAVING COUNT(product_id) = (SELECT MAX(COUNT(product_id)) FROM Product_Suppliers);
                        ``` SELECT MAX(customer_code) AS max_customer_code, MIN(customer_code) AS min_customer_code FROM customers;
                        ``` SELECT MAX(customer_code) AS max_customer_code, MIN(customer_code) AS min_customer_code FROM customers;
                        ``` SELECT product_type_code, MIN(product_price) AS min_price, MAX(product_price) AS max_price FROM Products GROUP BY product_type_code ORDER BY product_type_code ASC;
                        ``` SELECT product_type_code, MIN(product_price) AS min_product_price, MAX(product_price) AS max_product_price FROM Products GROUP BY product_type_code ORDER BY product_type_code NULLS LAST;
                        ``` SELECT o.order_id, o.customer_id FROM orders o WHERE o.order_status_code = 'Cancelled' ORDER BY o.order_date;
                        ``` SELECT o.order_id, c.customer_id FROM cancelled_orders o JOIN customers c ON o.customer_id = c.customer_id;
                        ``` SELECT customer_id, customer_name FROM Customers WHERE customer_address ilike '%WY%' AND payment_method_code != 'credit card';
                        ``` SELECT c.customer_id, c.customer_name FROM Customers c WHERE c.payment_method_code != 'credit card' AND c.customer_address ilike '%WY%';
                        ``` SELECT AVG(product_price) AS average_price FROM products WHERE product_type_code = 'clothes';
                        ``` SELECT AVG(Products.product_price) AS average_price FROM Products WHERE product_type_code = 'clothes';
                        ``` SELECT Products.product_name FROM Products WHERE Products.product_type_code = 'hardware' ORDER BY Products.product_price DESC NULLS LAST LIMIT 1;
                        ``` SELECT Products.product_name FROM Products WHERE Products.product_type_code = 'hardware' ORDER BY Products.product_price DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_aircraft FROM aircraft;
                        ``` SELECT COUNT(*) AS total_aircraft FROM aircraft;
                        ``` SELECT aircraft.description FROM aircraft;
                        ``` SELECT a.aircraft_id, a.description FROM aircraft AS a;
                        ``` SELECT AVG(International_passengers) AS average_international_passengers FROM airport;
                        ``` SELECT AVG(International_passengers) AS average_international_passengers FROM airport;
                        ``` SELECT CAST(International_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_international_passengers, CAST(domestic_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_domestic_passengers FROM airport WHERE airport_name ILIKE '%London%Heathrow%'
                        ``` SELECT CAST(International_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_international_passengers, CAST(domestic_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_domestic_passengers FROM airport WHERE airport_name ILIKE '%London%Heathrow%'
                        ``` SELECT SUM(airport.domestic_passengers) AS total_domestic_passengers FROM airport WHERE airport.aircraft_name ilike '%London%';
                        ``` SELECT SUM(airport.domestic_passengers) AS total_domestic_passengers FROM airport WHERE airport.airport_name ilike '%London%';
                        ``` SELECT MAX(Transit_Passengers) AS max_transit_passengers, MIN(Transit_Passengers) AS min_transit_passengers FROM airport;
                        ``` SELECT MAX(Transit_Passengers) AS max_transit_passengers, MIN(Transit_Passengers) AS min_transit_passengers FROM airport;
                        ``` SELECT pilot.name FROM pilot WHERE pilot.age >= 25 AND pilot.age <= 30;
                        ``` SELECT p.name FROM pilot p WHERE p.age >= 25;
                        ``` SELECT pilot.name FROM pilot ORDER BY pilot.name ASC;
                        ``` SELECT pilot.name FROM pilot ORDER BY pilot.name ASC;
                        ``` SELECT pilot.name FROM pilot WHERE pilot.age >= 30 ORDER BY pilot.name DESC;
                        ``` SELECT pilot.name FROM pilot WHERE pilot.age >= 30 ORDER BY pilot.name DESC;
                        ``` SELECT p.name FROM pilot p ORDER BY p.age DESC;
                        ``` SELECT pilot.name FROM pilot ORDER BY pilot.age DESC;
                        ``` SELECT a.aircraft_id, a.aircraft FROM aircraft a WHERE a.aircraft_id NOT IN (SELECT m.aircraft_id FROM matches m) ORDER BY a.aircraft NULLS LAST;
                        ``` SELECT aircraft.aircraft FROM aircraft WHERE aircraft.aircraft_id NOT IN (SELECT match.aircraft_id FROM match);
                        ``` SELECT a.airport_name, to_char(a.total_passengers, '999999999') AS total_passengers FROM airport a WHERE a.international_passengers = (SELECT MAX(b.international_passengers) FROM airport b);
                        ``` SELECT a.airport_name, CAST(a.international_passengers AS FLOAT) / NULLIF(b.total_passengers, 0) AS ratio FROM airport a JOIN (SELECT airport_id, SUM(total_passengers) AS total_passengers FROM passengers GROUP BY airport_id) b ON a.airport_id = b.airport_id ORDER BY ratio DESC NULLS LAST LIMIT 1;
                        ``` SELECT p.name FROM pilot p JOIN race r ON p.pilot_id = r.pilot_id WHERE r.country != 'Australia' AND p.name IS NOT NULL;
                        ``` SELECT p.name FROM pilot p WHERE p.pilot_id NOT IN (SELECT w.pilot_id FROM win w JOIN race r ON w.race_id = r.race_id WHERE r.country_code = 'AUS');
                        ``` SELECT COUNT(DISTINCT Status_of_Thing_Code) AS number_of_status_codes FROM meded_Status_of_Things;
                        ``` SELECT organizations.organization_id FROM organizations WHERE organizations.parent_organizaton_id IS NULL;
                        ``` SELECT MAX(date_moved_in) AS last_move_in_date FROM residents;
                        ``` SELECT Residents.resident_id, Residents.property_id, Residents.date_moved_in, Residents.date_moved_out, Residents.other_details FROM Residents WHERE Residents.other_details ilike '%Miss%';
                        ``` SELECT customer_events.customer_event_id, customer_events.date_moved_in, customer_events.property_id FROM customer_events;
                        ``` SELECT COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customers LEFT JOIN Events ON Customers.customer_id = Events.customer_id WHERE Events.customer_id IS NULL;
                        ``` SELECT date_moved_in AS move_in_date FROM Residents GROUP BY date_moved_in;
                        ``` SELECT COUNT(*) AS total_schools FROM school;
                        ``` SELECT COUNT(*) FROM school;
                        ``` SELECT school.location FROM school ORDER BY school.enrollment ASC;
                        ``` SELECT school.location FROM school ORDER BY school.enrollment ASC;
                        ``` SELECT school.location FROM school ORDER BY school.founded DESC;
                        ``` SELECT school.location FROM school ORDER BY school.founded DESC;
                        ``` SELECT school.enrollment FROM school WHERE school.denomination != 'Catholic';
                        ``` SELECT school.school_id, school.enrollment FROM school WHERE school.denomination != 'Catholic';
                        ``` SELECT AVG(Enrollment) AS average_enrollment FROM school;
                        ``` SELECT AVG(Enrollment) AS average_enrollment FROM school;
                        ``` SELECT player.team FROM player ORDER BY player.team ASC;
                        ``` SELECT p.player_id, p.team FROM player p ORDER BY p.team ASC;
                        ``` SELECT COUNT(DISTINCT player.position) AS number_of_positions FROM player;
                        ``` SELECT COUNT(DISTINCT Player.position) AS total_positions FROM player;
                        ``` SELECT MAX(player.age) AS max_age, player.team FROM player GROUP BY player.team;
                        ``` SELECT MAX(player.age) AS oldest_player_age, player.team FROM player GROUP BY player.team ORDER BY oldest_player_age DESC NULLS LAST;
                        ``` SELECT p.team, MAX(p.age) AS max_age FROM player p GROUP BY p.team ORDER BY max_age DESC NULLS LAST LIMIT 5;
                        ``` SELECT player.team FROM player GROUP BY player.team HAVING AVG(player.age) OVER (PARTITION BY player.team) > (SELECT MAX(avg_age) FROM (SELECT AVG(age) AS avg_age FROM player GROUP BY team) AS subquery)
                        ``` SELECT school.denomination, COUNT(school.school_id) AS number_of_schools FROM school GROUP BY school.denomination ORDER BY number_of_schools DESC NULLS LAST;
                        ``` SELECT school.denomination, COUNT(*) AS number_of_schools FROM school GROUP BY school.denomination;
                        ``` SELECT school.denomination, COUNT(school.school_id) AS total_schools FROM school GROUP BY school.denomination ORDER BY total_schools DESC;
                        ``` SELECT school.denomination, COUNT(school.school_id) AS number_of_schools FROM school GROUP BY school.denominations ORDER BY number_of_schools DESC;
                        ``` SELECT school.school_colors FROM school WHERE school.enrollment = (SELECT MAX(school.enrollment) FROM school);
                        ``` SELECT school.school_colors FROM school WHERE school.enrollment = (SELECT MAX(enrollment) FROM school);
                        ``` SELECT school.location FROM school WHERE school.school_id NOT IN (SELECT team.school_id FROM team);
                        ``` SELECT s.location FROM school AS s LEFT JOIN players_schools AS ps ON s.school_id = ps.school_id WHERE ps.school_id IS NULL;
                        ``` SELECT school.denomination FROM school WHERE (school.founded < 1890 OR school.founded > 1900) GROUP BY school.denomination;
                        ``` SELECT s.denomination FROM school s WHERE (s.founded < 1890 AND s.founded > 1900) OR (s.founded > 1890 AND s.founded < 1900);
                        ``` SELECT school_details.nickname FROM school_details WHERE school_details.division != '1';
                        ``` SELECT school_details.nickname FROM school_details WHERE school_details.division != '1';
                        ``` SELECT s.denomination FROM school s GROUP BY s.denominations HAVING COUNT(s.school_id) > 1;
                        ``` SELECT school.denomination FROM school GROUP BY school.denomination HAVING COUNT(school.school_id) > 1;
                        ``` SELECT district.district_name FROM district ORDER BY district.city_area DESC;
                        ``` SELECT d.district_name FROM district d ORDER BY d.city_area DESC;
                        ``` SELECT DISTINCT product.max_page_size FROM product WHERE product.product_id IN (SELECT product_id FROM product GROUP BY product_id HAVING COUNT(product_id) > 3);
                        ``` SELECT product.max_page_size FROM product WHERE product.product_id IN (SELECT product_id FROM product GROUP BY product_id HAVING COUNT(product_id) > 3);
                        ``` SELECT d.district_name, to_char(to_number(d.city_population::text,'9999'),'FM99999D99') AS city_population FROM district d WHERE to_number(d.city_population::text,'9999') BETWEEN 200000 AND 2000000;
                        ``` SELECT d.district_name, c.city_population FROM district d JOIN city c ON d.headquartered_city = c.city_name WHERE d.city_area BETWEEN 200000 AND 2000000;
                        ``` SELECT district.district_name FROM district WHERE district.city_area > 10 OR district.city_population > 100000;
                        ``` SELECT district.district_name FROM district WHERE district.city_area > 10 OR district.city_population > 100000;
                        ``` SELECT d.district_name, COUNT(c.city_population) AS total_population FROM district d JOIN city c ON d.district_id = c.district_id GROUP BY d.district_name ORDER BY total_population DESC NULLS LAST LIMIT 1;
                        ``` SELECT d.district_name, d.city_population FROM district d WHERE d.city_population = (SELECT MAX(city_population) FROM district);
                        ``` SELECT district.district_name, district.city_population, district.city_area FROM district ORDER BY district.city_area ASC NULLS LAST LIMIT 1;
                        ``` SELECT district.district_name FROM district ORDER BY district.city_area ASC LIMIT 1;
                        ``` SELECT district.district_name, SUM(population) AS total_population FROM district GROUP BY district.district_name ORDER BY total_population DESC NULLS LAST LIMIT 3;
                        ``` SELECT district.district_name, SUM(population) AS total_population FROM (SELECT district.district_name, district.city_population, rank() OVER (ORDER BY district.city_area DESC) AS rank FROM district ORDER BY rank ASC LIMIT 3) AS subquery GROUP BY district.district_name;
                        ``` SELECT store.type, COUNT(*) AS total_stores FROM store GROUP BY store.type;
                        ``` SELECT store.type, COUNT(*) AS number_of_stores FROM store GROUP BY store.type;
                        ``` SELECT AVG(product.pages_per_minute_color) AS average_pages_per_minute_color FROM product;
                        ``` SELECT AVG(product.pages_per_minute_color) AS average_pages_per_minute_color FROM product;
                        ``` SELECT product_id, product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5;
                        ``` SELECT product_id, product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5;
                        ``` SELECT product_id, product FROM product WHERE (max_page_size = 'A4' OR pages_per_minute_color < 5)
                        ``` SELECT product_id, product FROM product WHERE (max_page_size = 'A4' OR pages_per_minute_color < 5)
                        ``` SELECT product FROM product WHERE product ilike '%Scanner%';
                        ``` SELECT product FROM product WHERE product ilike '%Scanner%';
                        ``` SELECT MAX(product.max_page_size) AS most_prominent_max_page_size FROM product;
                        ``` SELECT product.max_page_size, COUNT(*) AS frequency FROM product GROUP BY product.max_page_size ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT product.product FROM product WHERE product.max_page_size != (SELECT MAX(product.max_page_size) FROM product);
                        ``` SELECT product.product FROM product WHERE product.max_page_size != (SELECT MAX(product.max_page_size) FROM product);
                        ``` SELECT SUM(district.city_population) AS total_population FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district);
                        ``` SELECT SUM(district.city_population) AS total_population FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district);
                        ``` SELECT SUM(college.enr) AS total_enrollment FROM college;
                        ``` SELECT CAST(enr AS FLOAT) / NULLIF((SELECT SUM(enr) FROM college), 0) AS proportion_of_students_in_college FROM college;
                        ``` SELECT AVG(college.enr) AS average_enrollment FROM college;
                        ``` SELECT AVG(enrollment) AS average_enrollment FROM college;
                        ``` SELECT COUNT(*) AS total_colleges FROM college;
                        ``` SELECT COUNT(DISTINCT cName) AS num_colleges FROM college;
                        ``` SELECT COUNT(*) FROM Player WHERE HS > 1000;
                        ``` SELECT COUNT(DISTINCT p.pID) AS num_play FROM Player p JOIN Training t ON p.pID = t.pID WHERE t.hours > 1000;
                        ``` SELECT COUNT(*) FROM college WHERE enr > 15000;
                        ``` SELECT COUNT(*) FROM college WHERE enrollment > 15000;
                        ``` SELECT AVG(training_hours) AS average_training_hours FROM Player;
                        ``` SELECT AVG(hours) AS average_hours FROM (SELECT p.pID, COUNT(t.tid) * 2 AS hours FROM Player p JOIN Training t ON p.pID = t.pID GROUP BY p.pID) subquery;
                        ``` SELECT Player.pName, Player.HS FROM Player WHERE Player.HS < 1500;
                        ``` SELECT p.pName, SUM(t.hours) AS total_hours FROM Player p JOIN Training t ON p.pID = t.pID WHERE t.hours < 1500 GROUP BY p.pName;
                        ``` SELECT COUNT(DISTINCT cName) AS number_of_colleges FROM Tryout;
                        ``` SELECT COUNT(DISTINCT cName) AS number_of_colleges FROM Tryout;
                        ``` SELECT DISTINCT Tryout.pPos FROM Tryout;
                        ``` SELECT Tryout.pPos FROM Tryout GROUP BY Tryout.pPos;
                        ``` SELECT COUNT(*) AS number_of_students_accepted FROM Tryout WHERE decision = 'Accepted';
                        ``` SELECT COUNT(*) AS total_students FROM Tryout WHERE decision = 'yes';
                        ``` SELECT COUNT(*) AS total_students FROM tryout WHERE pPos ilike '%goalie%';
                        ``` SELECT CAST(COUNT(DISTINCT(t.pID)) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM student), 0) AS ratio_of_students_playing_tryout FROM tryout t;
                        ``` SELECT MAX(training_hours) AS max_training_hours, AVG(training_hours) AS average_training_hours, MIN(training_hours) AS min_training_hours FROM Player;
                        ``` SELECT AVG(hours_spent) AS average_hours_spent, MAX(hours_spent) AS max_hours_spent, MIN(hours_spent) AS min_hours_spent FROM Player;
                        ``` SELECT AVG(college.enr) AS average_enrollment FROM college WHERE college.state = 'FL';
                        ``` SELECT AVG(college.enr) AS average_students FROM college WHERE state = 'Florida';
                        ``` SELECT Player.pName FROM Player WHERE Player.HS BETWEEN 500 AND 1500;
                        ``` SELECT Player.pName FROM Player WHERE (Player.HS/60) BETWEEN 500 AND 1500;
                        ``` SELECT pID, pName FROM Player WHERE pName ilike '%a%';
                        ``` SELECT Player.pName FROM Player WHERE Player.pName ilike '%a%';
                        ``` SELECT cName, enr FROM college WHERE state = 'LA' AND enr > 10000;
                        ``` SELECT college.cName, college.enr FROM college WHERE college.state = 'Louisiana' AND college.enr > 10000;
                        ``` SELECT cName, state, enr FROM college ORDER BY enr ASC;
                        ``` SELECT college.cName, college.state, college.enr FROM college ORDER BY college.enr ASC;
                        ``` SELECT cName FROM college WHERE enr > 18000 ORDER BY cName NULLS LAST;
                        ``` SELECT cName FROM college WHERE enr > 18000 ORDER BY cName ASC;
                        ``` SELECT Player.pName FROM Player WHERE Player.yCard = 'yes' ORDER BY Player.HS DESC;
                        ``` SELECT p.pName FROM Player p WHERE p.yCard IS NOT NULL ORDER BY p.HS DESC;
                        ``` SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC;
                        ``` SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC;
                        ``` SELECT pPos, COUNT(*) AS total_players FROM Tryout GROUP BY pPos ORDER BY total_players DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(pPos) AS max_position FROM Tryout;
                        ``` SELECT cName, COUNT(pID) AS total_participants FROM Tryout GROUP BY cName ORDER BY total_participants DESC;
                        ``` SELECT cName, COUNT(pID) AS total_students FROM Tryout GROUP BY cName;
                        ``` SELECT college.cname FROM college ORDER BY enr DESC NULLS LAST LIMIT 3;
                        ``` SELECT college.cName FROM college WHERE enr IN (SELECT MAX(enr) FROM college GROUP BY cName ORDER BY MAX(enr) DESC NULLS LAST LIMIT 3);
                        ``` SELECT cName, state FROM college ORDER BY state, enr ASC;
                        ``` SELECT cName, state FROM college ORDER BY enr ASC;
                        ``` SELECT t.cName FROM Tryout t JOIN College c ON t.pID = c.college_id WHERE t.decision = 'yes' AND c.goal = 'yes';
                        ``` SELECT t.pID AS player_id, t.cName AS club_name, CAST(COUNT(g.goal) AS FLOAT)/NULLIF(COUNT(t.pID),0) AS goals_per_player FROM tryout t JOIN goal g ON t.pID = g.pid GROUP BY t.pID, t.cName HAVING COUNT(g.goal) > 0;
                        ``` SELECT college.cName FROM college WHERE (college.state = 'AZ' AND college.enr < 13000) OR (college.state != 'AZ' AND college.enr > 15000);
                        ``` SELECT college.cName FROM college WHERE (college.state = 'CA' AND college.enr > 13000) OR (college.state = 'LA' AND college.enr > 15000);
                        ``` SELECT DISTINCT t.cName FROM Tryout t WHERE t.pPos IN ('goalie', 'mid');
                        ``` SELECT t.cName FROM Tryout t WHERE t.pPos = 'goal' AND t.decision = 'mid';
                        ```failure
failure
 SELECT DISTINCT t.cName FROM Tryout t WHERE t.pPos = 'Midfielder' AND t.pPos != 'Goalkeeper';
                        ``` SELECT t.cName FROM Tryout t WHERE t.pPos = 'Midfield' AND NOT EXISTS (SELECT 1 FROM Goalier g WHERE g.pID = t.pID);
                        ```failure
failure
 SELECT college.state FROM college WHERE college.enr < (SELECT MAX(college.enr) FROM college) GROUP BY college.state;
                        ``` SELECT c.state FROM college c WHERE c.enr < (SELECT MIN(c2.enr) FROM college c2);
                        ``` SELECT c.cName FROM college c WHERE c.state = 'FL' AND c.enr > (SELECT MIN(d.enr) FROM college d WHERE d.state = 'FL');
                        ``` SELECT cName FROM college WHERE state != 'Florida' AND enr > (SELECT MIN(enr) FROM college WHERE state = 'Florida');
                        ``` SELECT college.cName FROM college WHERE college.state != 'FL' AND college.enr > (SELECT MAX(college.enr) FROM college WHERE college.state = 'FL');
                        ``` SELECT cName FROM college WHERE state != 'Florida' AND enr > (SELECT MAX(enr) FROM college WHERE state = 'Florida');
                        ``` SELECT SUM(college.enr) AS total_enrollments FROM college WHERE college.cname ilike '%goalie%' ;
                        ``` SELECT SUM(college.enr) AS total_students FROM college WHERE college.state IS NULL;
                        ``` SELECT state FROM college GROUP BY state HAVING AVG(enr) < (SELECT enr FROM college WHERE cName = 'College Name')
                        ``` SELECT state FROM college GROUP BY state HAVING COUNT(enr) > (SELECT AVG(enr) FROM college);
                        ``` SELECT college.state FROM college GROUP BY college.state HAVING AVG(college.enr) > college.enr;
                        ``` SELECT college.state FROM college GROUP BY college.state HAVING AVG(college.enr) > college.enr;
                        ``` SELECT COUNT(Device_ID) AS total_devices FROM device;
                        ``` SELECT COUNT(Device_ID) AS total_devices FROM device;
                        ``` SELECT device.carrier FROM device ORDER BY device.carrier ASC;
                        ``` SELECT DISTINCT device.carrier FROM device ORDER BY device.carrier ASC;
                        ``` SELECT DISTINCT device.carrier FROM device WHERE device.software_platform != 'Android';
                        ``` SELECT DISTINCT device.carrier FROM device WHERE device.software_platform != 'Android';
                        ``` SELECT shop.shop_name FROM shop ORDER BY shop.open_year ASC;
                        ``` SELECT shop.shop_name FROM shop ORDER BY shop.open_year ASC;
                        ``` SELECT AVG(quantity) AS average_quantity FROM stock;
                        ``` SELECT AVG(Quantity) AS average_quantity FROM stock;
                        ``` SELECT shop.shop_name, shop.location FROM shop ORDER BY shop.shop_name ASC;
                        ``` SELECT shop.shop_name, shop.location FROM shop ORDER BY shop.shop_name ASC;
                        ``` SELECT COUNT(DISTINCT Software_Platform) AS number_of_software_platforms FROM device;
                        ``` SELECT COUNT(DISTINCT Software_Platform) FROM device;
                        ``` SELECT shop.open_date FROM shop WHERE shop.shop_name ilike '%apple%' ORDER BY shop.open_year NULLS LAST;
                        ``` SELECT CAST(open_year AS text) || ' - ' || open_date AS open_info FROM shop WHERE shop_name ilike '%Apple%' ORDER BY open_info NULLS LAST;
                        ``` SELECT s.shop_name FROM shop s ORDER BY s.open_year DESC LIMIT 1;
                        ``` SELECT shop.shop_name FROM shop WHERE shop.open_year = (SELECT MAX(open_year) FROM shop);
                        ``` SELECT device.software_platform, COUNT(*) AS total_devices FROM device GROUP BY device.software_platform;
                        ``` SELECT device.software_platform, COUNT(device.device_id) AS number_of_devices FROM device GROUP BY device.software_platform;
                        ``` SELECT device.software_platform, COUNT(device.device_id) AS COUNT FROM device GROUP BY device.software_platform ORDER BY COUNT DESC;
                        ``` SELECT device.software_platform, COUNT(*) AS frequency FROM device GROUP BY device.software_platform ORDER BY frequency DESC;
                        ``` SELECT device.software_platform FROM device GROUP BY device.software_platform ORDER BY COUNT(device.device_id) DESC LIMIT 1;
                        ``` SELECT device.software_platform FROM device GROUP BY device.software_platform ORDER BY COUNT(device.software_platform) DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.shop_name FROM shop AS s LEFT JOIN device AS d ON s.shop_id = d.shop_id WHERE d.shop_id IS NULL;
                        ``` SELECT s.shop_name FROM shop AS s LEFT JOIN device_stock AS ds ON s.shop_id = ds.shop_id WHERE ds.device_id IS NULL;
                        ``` SELECT DISTINCT shop.location FROM shop WHERE (shop.open_year > 2012 AND shop.open_year < 2008) ORDER BY shop.location NULLS LAST;
                        ``` SELECT DISTINCT shop.location FROM shop WHERE (shop.open_year > 2012 AND shop.open_year < 2008) OR (shop.open_year < 2008 AND shop.open_year > 2012);
                        ``` SELECT device.carrier FROM device WHERE device.device_id NOT IN (SELECT device_id FROM stock);
                        ``` SELECT device.carrier FROM device WHERE device.device_id NOT IN (SELECT stock.device_id FROM stock);
                        ``` SELECT COUNT(*) AS total_bookings FROM Bookings;
                        ``` SELECT COUNT(*) AS total_bookings FROM Bookings;
                        ``` SELECT Booking_ID, Order_Date FROM Bookings;
                        ``` SELECT Bookings.Booking_ID, CAST(Bookings.Order_Date AS DATE) AS Order_Date FROM Bookings;
                        ``` SELECT Bookings.Planned_Delivery_Date, Bookings.Actual_delivery_date FROM Bookings;
                        ``` SELECT bookings.booking_id, bookings.planned_delivery_date, bookings.actual_delivery_date FROM bookings;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name ilike '%Harold%';
                        ``` SELECT Customers.personal_phone, Customers.personal_email FROM Customers WHERE customers.customer_name ilike '%Harold%' ;
                        ``` SELECT Drama_Workshop_Groups.Store_Name FROM Drama_Workshop_Groups;
                        ``` SELECT Drama_Workshop_Groups.Store_Name FROM Drama_Workshop_Groups;
                        ``` SELECT MIN(order_quantity), AVG(order_quantity), MAX(order_quantity) FROM invoices;
                        ``` SELECT MIN(cast(order_quantity AS FLOAT)) AS min_quantity, AVG(cast(order_quantity AS FLOAT)) AS avg_quantity, MAX(cast(order_quantity AS FLOAT)) AS max_quantity FROM invoices;
                        ``` SELECT DISTINCT Invoices.payment_method_code FROM Invoices;
                        ``` SELECT DISTINCT Invoices.payment_method_code FROM Invoices;
                        ``` SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Code = 'China'
                        ``` SELECT Marketing_Regions.Marketing_Region_Description FROM Marketing_regions WHERE Marketing_regions.Marketing_Region_Code = 'CHN' ;
                        ``` SELECT DISTINCT Products.Product_Name FROM Products WHERE Products.Product_Price > (SELECT AVG(Products.Product_Cost) FROM Products);
                        ``` SELECT DISTINCT Products.Product_Name FROM Products WHERE Products.Product_Cost > (SELECT AVG(Product_Cost) FROM Products);
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC LIMIT 1;
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC LIMIT 1;
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC;
                        ``` SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC;
                        ``` SELECT Performers.performer_phone FROM Performers WHERE Performers.performer_name ilike '%Ashley%' ;
                        ``` SELECT Performers.personal_phone FROM Performers WHERE Performers.performer_name ilike '%Ashley%' ;
                        ``` SELECT invoices.payment_method_code, COUNT(invoices.order_id) AS order_count FROM invoices GROUP BY invoices.payment_method_code;
                        ``` SELECT invoices.payment_method_code, COUNT(invoices.order_id) AS order_count FROM invoices GROUP BY invoices.payment_method_code;
                        ``` SELECT invoices.payment_method_code, COUNT(*) AS order_count FROM invoices GROUP BY invoices.payment_method_code ORDER BY order_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT invoices.payment_method_code, COUNT(*) AS frequency FROM invoices GROUP BY invoices.payment_method_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Products.Product_Name, AVG(Products.Product_Price) AS average_price FROM Products GROUP BY Products.Product_Name;
                        ``` SELECT Products.Product_Name, AVG(Products.Product_Price) AS average_price FROM Products GROUP BY Products.Product_Name;
                        ``` SELECT Products.Product_Name FROM Products WHERE Products.Product_Price < 1000000;
                        ``` SELECT Products.Product_Name FROM Products WHERE Products.Product_Price < 1000000;
                        ``` SELECT COUNT(DISTINCT Drama_Workshop_Groups.Currency_Code) AS number_of_currencies FROM Drama_Workshop_Groups;
                        ``` SELECT COUNT(DISTINCT Currency_Code) AS number_of_currency_codes FROM Drama_Workshop_Groups;
                        ``` SELECT Drama_Workshop_Groups.Marketing_Region_Code, COUNT(Drama_Workshop_Groups.Workshop_Group_ID) AS number_of_workshops FROM Drama_Workshop_Groups GROUP BY Drama_Workshop_Groups.Marketing_Region_Code ORDER BY number_of_workshops DESC NULLS LAST LIMIT 1;
                        ``` SELECT Drama_Workshop_Groups.Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Drama_Workshop_Groups.Marketing_Region_Code ORDER BY COUNT(Drama_Workshop_Groups.Workshop_Group_ID) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Status_Code, COUNT(*) AS frequency FROM Bookings GROUP BY Status_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Bookings.Status_Code, COUNT(*) AS frequency FROM Bookings GROUP BY Bookings.Status_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.client_name FROM clients c WHERE c.client_id NOT IN (SELECT b.client_id FROM bookings b);
                        ``` SELECT c.client_name FROM clients c LEFT JOIN bookings b ON c.client_id = b.client_id WHERE b.client_id IS NULL;
                        ``` SELECT AVG(cast(order_quantity AS FLOAT)) AS average_order_quantity FROM invoices WHERE payment_method_code = 'MasterCard';
                        ``` SELECT AVG(cast(order_quantity AS FLOAT)) AS average_order_quantity FROM invoices WHERE payment_method_code ilike '%MasterCard%';
                        ``` SELECT Invoices.Product_ID FROM Invoices GROUP BY Invoices.Product_ID ORDER BY COUNT(Invoices.Order_ID) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Invoices.Product_ID FROM Invoices GROUP BY Invoices.Product_ID ORDER BY COUNT(Invoices.Product_ID) DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_bands FROM Band;
                        ``` SELECT COUNT(*) AS total_bands FROM Band;
                        ``` SELECT DISTINCT Albums.label FROM Albums;
                        ``` SELECT DISTINCT Albums.label FROM Albums;
                        ``` SELECT Albums.Aid, Albums.Title FROM Albums WHERE Albums.Year = 2012;
                        ``` SELECT a.aid, a.title FROM albums a WHERE a.year = 2012;
                        ``` SELECT COUNT(SongId) AS number_of_songs FROM Songs;
                        ``` SELECT COUNT(SongId) AS total_songs FROM Songs;
                        ``` SELECT COUNT(DISTINCT label) AS number_of_labels FROM Albums;
                        ``` SELECT DISTINCT Albums.label FROM Albums;
                        ``` SELECT a.label, COUNT(a.aid) AS number_of_albums FROM albums a GROUP BY a.label ORDER BY number_of_albums DESC NULLS LAST LIMIT 1;
                        ``` SELECT a.label, COUNT(a.aid) AS number_of_albums FROM albums a GROUP BY a.label ORDER BY number_of_albums DESC NULLS LAST LIMIT 1;
                        ``` SELECT Songs.Title FROM Songs WHERE Songs.Title ilike '%the%';
                        ``` SELECT Songs.Title FROM Songs WHERE Songs.Title ilike '%the%' ORDER BY Songs.Title NULLS LAST;
                        ``` SELECT instruments.instrument FROM instruments;
                        ``` SELECT DISTINCT Instruments.Instrument FROM Instruments;
                        ``` SELECT instruments.instrument FROM instruments GROUP BY instruments.instrument ORDER BY COUNT(instruments.instrument) DESC NULLS LAST LIMIT 1;
                        ``` SELECT instruments.instrument FROM instruments GROUP BY instruments.instrument ORDER BY COUNT(instruments.instrument) DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS number_of_songs FROM Instruments WHERE Instrument ilike '%drums%';
                        ``` SELECT COUNT(*) AS number_of_songs FROM Instruments WHERE Instrument = 'drums';
                        ``` SELECT Vocals.type, COUNT(Vocals.songid) AS frequency FROM Vocals GROUP BY Vocals.type ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Vocals.type, COUNT(Vocals.songid) AS frequency FROM Vocals GROUP BY Vocals.type ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT Vocals.type FROM Vocals;
                        ``` SELECT Vocals.type FROM Vocals GROUP BY Vocals.type;
                        ``` SELECT Albums.Title FROM Albums WHERE Albums.Year = 2010;
                        ``` SELECT COUNT(*) AS total_albums FROM Albums WHERE Year = 2010;
                        ``` SELECT Manufacturers.Founder FROM Manufacturers WHERE "Name" ILIKE '%Sony%';
                        ``` SELECT Manufacturers.Founder FROM Manufacturers WHERE "Name" ILIKE '%Sony%';
                        ``` SELECT Manufacturers.Headquarter FROM Manufacturers WHERE "Founder" ILIKE '%james%';
                        ``` SELECT Manufacturers.Headquarter FROM Manufacturers WHERE "Founder" ILIKE '%james%';
                        ``` SELECT Manufacturers.name, Manufacturers.headquarter FROM Manufacturers ORDER BY Manufacturers.revenue DESC;
                        ``` SELECT m.name, m.headquarter FROM Manufacturers m ORDER BY m.revenue DESC;
                        ``` SELECT AVG(Revenue) AS average_revenue, MAX(Revenue) AS max_revenue, SUM(Revenue) AS total_revenue FROM Manufacturers;
                        ``` SELECT AVG(Revenue), MAX(Revenue), SUM(Revenue) FROM Manufacturers;
                        ``` SELECT COUNT(*) AS total_companies FROM Manufacturers WHERE Founder ilike '%Andy%';
                        ``` SELECT COUNT(*) AS num_companies FROM Manufacturers WHERE Founder ilike '%Andy%';
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ilike '%Austin%';
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ilike '%Austin%';
                        ``` SELECT Manufacturers.Headquarter FROM Manufacturers GROUP BY Manufacturers.Headquarter;
                        ``` SELECT DISTINCT Manufacturers.Headquarter FROM Manufacturers;
                        ``` SELECT COUNT(*) FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing');
                        ``` SELECT COUNT(*) FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing');
                        ``` SELECT Manufacturers.founder FROM Manufacturers WHERE Manufacturers.name ilike 'S%';
                        ``` SELECT Manufacturers.Founder FROM Manufacturers WHERE Manufacturers.Name ilike 'S%';
                        ``` SELECT Manufacturers.Name FROM Manufacturers WHERE (Manufacturers.Revenuee >= 100 AND Manufacturers.Revenuee <= 150);
                        ``` SELECT Manufacturers.Name FROM Manufacturers WHERE Manufacturers.Revenue BETWEEN 100 AND 150;
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ilike '%Tokyo%' OR Manufacturers.headquarter ilike '%Taiwan%';
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ilike '%Tokyo%' OR Manufacturers.headquarter ilike '%Taiwan%';
                        ``` SELECT m.name, m.headquarter, m.founder FROM manufacturers AS m WHERE m.revenue = (SELECT MAX(revenue) FROM manufacturers);
                        ``` SELECT m.name, m.headquarter, m.founder FROM manufacturers AS m WHERE m.revenue = (SELECT MAX(revenue) FROM manufacturers);
                        ``` SELECT m.name, m.headquarter, to_char(to_timestamp(m.revenue), 'FM9999999D00') AS revenue FROM Manufacturers m ORDER BY to_number(to_char(to_timestamp(m.revenue), 'FM9999999D00'), 'FM9999999D00') DESC;
                        ``` SELECT m.name, m.headquarter, CAST(m.revenue AS FLOAT) AS revenue FROM Manufacturers m ORDER BY revenue DESC;
                        ``` SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.revenue > (SELECT AVG(Manufacturers.revenue) FROM Manufacturers);
                        ``` SELECT Manufacturers.Name FROM Manufacturers WHERE Manufacturers.Revenue > (SELECT AVG(Manufacturers.Revenue) FROM Manufacturers);
                        ``` SELECT m.name FROM manufacturers AS m WHERE m.revenue < (SELECT AVG(revenue) FROM manufacturers WHERE headquarter = 'Austin');
                        ``` SELECT Manufacturers.Name FROM Manufacturers WHERE Manufacturers.Headquarter = 'Austin' ORDER BY Manufacturers.Revenue ASC NULLS LAST;
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ilike '%Austin%' AND Manufacturers.revenue > (SELECT AVG(revenue) FROM Manufacturers WHERE headquarter ilike '%Austin%');
                        ``` SELECT SUM(Companies.revenue) AS total_revenue FROM Companies WHERE headquarter = 'Austin' AND revenue > (SELECT MIN(revenue) FROM Manufacturers);
                        ``` SELECT m.founder, SUM(m.revenue) AS total_revenue FROM manufacturers m GROUP BY m.founder;
                        ``` SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.founder IS NOT NULL;
                        ``` SELECT m.name, m.revenue FROM manufacturers AS m JOIN (SELECT headquarter, MAX(revenue) AS max_revenue FROM manufacturers GROUP BY headquarter) AS sub ON m.headquarter = sub.headquarter;
                        ``` SELECT m.name, m.revenue FROM Manufacturers m JOIN (SELECT headquarter, MAX(revenue) AS max_revenue FROM Manufacturers GROUP BY headquarter) AS sub ON m.headquarter = sub.headquarter AND m.revenue = sub.max_revenue;
                        ``` SELECT m.name, SUM(p.price) AS total_revenue FROM products p JOIN manufacturers m ON p.manufacturer = m.code GROUP BY m.name;
                        ``` SELECT Manufacturers.Code, SUM(Manufacturers.Revenue) AS Total_Revenue FROM Manufacturers GROUP BY Manufacturers.Code;
                        ``` SELECT COUNT(*) AS product_count FROM Products WHERE Manufacturer != 757001;
                        ``` SELECT COUNT(*) AS total_products FROM Products WHERE Manufacturer != 1;
                        ``` SELECT Manufacturers.Name FROM Manufacturers WHERE Manufacturers.Code NOT IN (SELECT DriveManufacturer.Code FROM Drivemanufacturer);
                        ``` SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.code NOT IN (SELECT DriveManufacturer.manufacturer_code FROM Drivemanufacturer);
                        ``` SELECT Products.Name FROM Products;
                        ``` SELECT Products.Name FROM Products;
                        ``` SELECT p.name, to_char(to_timestamp(p.code::text), 'DD-MM-YYYY') AS code_date, to_char(to_timestamp(p.price::text), 'DD-MM-YYYY') AS price_date FROM products p;
                        ``` SELECT p.name, p.price FROM Products AS p;
                        ``` SELECT Products.Name FROM Products WHERE Products.Price <= 200;
                        ``` SELECT Products.Name FROM Products WHERE Products.Price <= 200;
                        ``` SELECT Products.Code, Products.Name, Products.Price FROM Products WHERE Products.Price BETWEEN 60 AND 120;
                        ``` SELECT Products.Code, Products.Name, Products.Price FROM Products WHERE (Products.Price >= 60 AND Products.Price <= 120)
                        ``` SELECT AVG(Price) AS average_price FROM Products;
                        ``` SELECT AVG(Price) AS average_price FROM Products;
                        ``` SELECT AVG(Price) AS average_price FROM Products WHERE Manufacturer = 2;
                        ``` SELECT AVG(Price) AS average_price FROM Products WHERE Manufacturer = 2;
                        ``` SELECT COUNT(*) FROM Products WHERE Price >= 180;
                        ``` SELECT COUNT(*) AS product_count FROM Products WHERE Price >= 180;
                        ``` SELECT p.name, p.price FROM Products p WHERE p.price >= 180 ORDER BY p.price DESC, p.name ASC;
                        ``` SELECT Products.Name, Products.Price FROM Products WHERE Products.Price >= 180 ORDER BY Products.Price DESC, Products.Name ASC;
                        ``` SELECT m.code, AVG(p.price) AS average_price FROM Products p JOIN Manufacturers m ON p.manufacturer = m.id GROUP BY m.code;
                        ``` SELECT Products.Manufacturer, AVG(Products.Price) AS average_price FROM Products GROUP BY Products.Manufacturer;
                        ``` SELECT Products.Name, Products.Price FROM Products ORDER BY Products.Price ASC LIMIT 1;
                        ``` SELECT Products.Name, Products.Price FROM Products ORDER BY Products.Price ASC LIMIT 1;
                        ``` SELECT p.code, c.name AS category_name FROM Products p JOIN ProductCategories c ON p.manufacturer = c.id ORDER BY p.price NULLS LAST;
                        ``` SELECT Products.Code, Products.Name, MIN(Products.Price) AS min_price FROM Products GROUP BY Products.Category;
                        ``` SELECT MAX(problem_log_id) AS latest_problem_log_id FROM Problem_Log;
                        ``` SELECT MAX(problem_log.log_entry_date) AS latest_log_entry_date, MIN(problem_log.problem_log_id) AS earliest_problem_log_id FROM problem_log;
                        ``` SELECT Problem_Log.problem_id, MIN(Problem_Log.problem_log_id) AS min_problem_log_id FROM Problem_Log GROUP BY Problem_Log.problem_id;
                        ``` SELECT Problem_Log.problem_id, MIN(Problem_Log.problem_log_id) AS min_problem_log_id FROM Problem_Log GROUP BY Problem_Log.problem_id;
                        ``` SELECT Problem_Log.problem_log_id, Problem_Log.log_entry_date FROM Problem_Log WHERE Problem_Log.problem_id = 10;
                        ``` SELECT p.problem_id, to_char(p.log_entry_date, 'YYYY-MM-DD') AS log_entry_date FROM Problem_Log p WHERE p.problem_id = 10;
                        ``` SELECT problem_log_id, log_entry_description FROM Problem_Log;
                        ``` SELECT p.problem_id, to_char(p.log_entry_date, 'YYYY-MM-DD') AS log_entry_date, pl.log_entry_description FROM Problem_Log pl;
                        ``` SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'
                        ``` SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'
                        ``` SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26' ORDER BY problem_id NULLS LAST;
                        ``` SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26'
                        ``` SELECT Product.product_name FROM Product ORDER BY Product.product_name ASC;
                        ``` SELECT Product.product_name FROM Product ORDER BY Product.product_name ASC;
                        ``` SELECT Product.product_id, Product.product_name FROM Product ORDER BY Product.product_id NULLS LAST;
                        ``` SELECT Product.product_id, Product.product_name FROM Product ORDER BY Product.product_id NULLS LAST;
                        ``` SELECT COUNT(*) FROM branch WHERE CAST(membership_amount AS FLOAT) > (SELECT AVG(cast(membership_amount AS FLOAT)) FROM branch);
                        ``` SELECT COUNT(*) FROM branch WHERE CAST(membership_amount AS FLOAT) > (SELECT AVG(cast(membership_amount AS FLOAT)) FROM branch);
                        ``` SELECT branch.name, branch.address_road, branch.city FROM branch ORDER BY branch.open_year;
                        ``` SELECT branch.name, branch.address_road, branch.city FROM branch ORDER BY branch.open_year;
                        ``` SELECT branch.name, COUNT(member.member_id) AS member_count FROM branch JOIN member ON branch.branch_id = member.branch_id GROUP BY branch.name ORDER BY member_count DESC NULLS LAST LIMIT 3;
                        ``` SELECT b.name FROM branch b WHERE CAST(b.membership_amount AS FLOAT) IN (SELECT MAX(CAST(a.membership_amount AS FLOAT)) FROM branch a GROUP BY a.branch_id) GROUP BY b.name HAVING COUNT(*) >= 3 ORDER BY COUNT(*) DESC NULLS LAST LIMIT 3;
                        ``` SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) >= 100;
                        ``` SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100;
                        ``` SELECT DISTINCT branch.open_year FROM branch WHERE branch.branch_id IN (SELECT branch_id FROM branch GROUP BY branch_id HAVING COUNT(branch_id) >= 2);
                        ``` SELECT DISTINCT branch.open_year FROM branch GROUP BY branch.open_year HAVING COUNT(branch.branch_id) >= 2;
                        ``` SELECT MIN(cast(membership_amount AS FLOAT)) AS min_membership, MAX(cast(membership_amount AS FLOAT)) AS max_membership FROM branch WHERE open_year = '2011' AND address_road ilike '%London%';
                        ``` SELECT MIN(cast(membership_amount AS FLOAT)), MAX(cast(membership_amount AS FLOAT)) FROM branch WHERE open_year = '2011' OR city = 'London';
                        ``` SELECT branch.city, COUNT(*) AS total_branches FROM branch WHERE CAST(branch.open_year AS integer) < 2010 GROUP BY branch.city;
                        ``` SELECT branch.city, COUNT(*) AS number_of_branches FROM branch WHERE CAST(branch.open_year AS integer) < 2010 GROUP BY branch.city;
                        ``` SELECT COUNT(DISTINCT level) AS num_levels FROM member;
                        ``` SELECT level FROM member GROUP BY level;
                        ``` SELECT member.card_number, member.name, member.homeown FROM member ORDER BY member.level DESC;
                        ``` SELECT member.card_number, member.name, member.hometown FROM member ORDER BY member.level DESC;
                        ``` SELECT member.level FROM member GROUP BY member.level ORDER BY COUNT(member.member_id) DESC LIMIT 1;
                        ``` SELECT member.level, COUNT(member.member_id) AS total_members FROM member GROUP BY member.level ORDER BY total_members DESC NULLS LAST LIMIT 1;
                        ``` SELECT member.name FROM member WHERE member.card_number IS NULL;
                        ``` SELECT member.name FROM member WHERE member.member_id NOT IN (SELECT branch.member_id FROM branch);
                        ``` SELECT b.name, b.city FROM branch b WHERE b.branch_id NOT IN (SELECT member_branch FROM member);
                        ``` SELECT branch.name, branch.city FROM branch WHERE branch.branch_id NOT IN (SELECT member.branch_id FROM member);
                        ``` SELECT DISTINCT branch.city FROM branch WHERE branch.open_year = '2001' AND CAST(branch.membership_amount AS FLOAT) > 100;
                        ``` SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.open_year AS integer) = 2001 AND CAST(branch.membership_amount AS FLOAT) > 100;
                        ``` SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100;
                        ``` SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100;
                        ``` SELECT member.card_number FROM member WHERE member.hometown ilike '%Kentucky%';
                        ``` SELECT member.card_number FROM member WHERE member.hometown = 'Kentucky';
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT COUNT(*) AS total_voting_records FROM Voting_record;
                        ``` SELECT COUNT(*) AS total_voting_records FROM vowing_record;
                        ``` SELECT COUNT(DISTINCT President_Vote) AS total_president_votes FROM Voting_record;
                        ``` SELECT COUNT(DISTINCT President_Vote) AS total_president_votes FROM Voting_record;
                        ``` SELECT MAX(Student.Age) AS max_age FROM Student;
                        ``` SELECT MAX(Student.Age) AS oldest_age FROM Student;
                        ``` SELECT Student.LName FROM Student WHERE Student.Major = 50;
                        ``` SELECT Student.LName FROM Student WHERE Student.Major = 50;
                        ``` SELECT Student.Fname FROM Student WHERE Student.Age > 22;
                        ``` SELECT Student.Fname FROM Student WHERE Student.Age > 22;
                        ``` SELECT Student.Major FROM Student WHERE Student.Sex = 'M';
                        ``` SELECT s.lname, s.fname, m.major FROM student AS s JOIN major AS m ON s.major = m.major WHERE sex = 'M';
                        ``` SELECT AVG(Age) FROM Student WHERE Sex = 'F';
                        ``` SELECT AVG(Student.Age) FROM Student WHERE Student.Sex = 'Female';
                        ``` SELECT MAX(s.age) AS max_age, MIN(s.age) AS min_age FROM student s WHERE s.major = 600;
                        ``` SELECT MIN(Student.Age) AS min_age, MAX(Student.Age) AS max_age FROM Student WHERE Student.Major = 600;
                        ``` SELECT s.lname, s.fname FROM student AS s JOIN advisor AS a ON s.advisor = a.id WHERE s.city_code = 'BAL';
                        ``` SELECT Student.Advisor FROM Student WHERE Student.city_code = 'BAL';
                        ``` SELECT COUNT(DISTINCT Secretary_Vote) AS total_secretary_votes FROM Voting_record WHERE Election_Cycle = 'Fall';
                        ``` SELECT Secretary_Vote FROM Voting_record WHERE "Election Cycle" ILIKE '%fall%' GROUP BY Secretary_Vote;
                        ``` SELECT COUNT(DISTINCT President_Vote) AS total_votes FROM Voting_record WHERE "Registration_Date" ILIKE '%08/30/2015%'
                        ``` SELECT COUNT(President_Vote) AS total_votes FROM Voting_record WHERE Registration_Date = '08/30/2015'
                        ``` SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record;
                        ``` SELECT Registration_Date, Election_Cycle FROM Voting_record GROUP BY Registration_Date,Election_Cycle;
                        ``` SELECT President_Vote, Vice_President_Vote FROM Voting_record GROUP BY President_Vote, Vice_President_Vote;
                        ``` SELECT President_Vote AS 'President Votes', Vice_President_Vote AS 'Vice President Votes' FROM Voting_record;
                        ``` SELECT a.name AS advisor_name, COUNT(s.stuID) AS total_students FROM advisor a JOIN student s ON a.advisor_id = s.advisor WHERE a.status = 'active' GROUP BY a.name;
                        ``` SELECT s.advisor, COUNT(*) AS num_students FROM student s GROUP BY s.advisor;
                        ``` SELECT Student.Advisor FROM Student GROUP BY Student.Advisor HAVING COUNT(Student.Advisor) > 2;
                        ``` SELECT Student.Advisor FROM Student GROUP BY Student.Advisor HAVING COUNT(Student.StuID) > 2;
                        ``` SELECT Student.Major FROM Student GROUP BY Student.Major HAVING COUNT(Student.StuID) < 3;
                        ``` SELECT Student.Major FROM Student GROUP BY Student.Major HAVING COUNT(Student.StuID) < 3;
                        ``` SELECT v.election_cycle, COUNT(*) AS total_voting_records FROM vowing_record v GROUP BY v.election_cycle;
                        ``` SELECT Voting_record.Election_Cycle, COUNT(Voting_record.StuID) AS total_votes FROM Voting_record GROUP BY Voting_record.Election_Cycle;
                        ``` SELECT m.major_name, COUNT(s.stuid) AS student_count FROM student s JOIN major m ON s.major = m.major_id GROUP BY m.major_name ORDER BY student_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.major, COUNT(*) AS num_students FROM student s GROUP BY s.major ORDER BY num_students DESC LIMIT 1;
                        ``` SELECT Student.Major FROM Student WHERE Student.Sex = 'F' GROUP BY Student.Major ORDER BY COUNT(Student.Major) DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.major, COUNT(*) AS total_female_students FROM student s WHERE sex = 'F' GROUP BY s.major ORDER BY total_female_students DESC LIMIT 1;
                        ``` SELECT Student.city_code, COUNT(Student.StuID) AS student_count FROM Student GROUP BY Student.city_code ORDER BY student_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Student.city_code FROM Student GROUP BY Student.city_code ORDER BY COUNT(Student.StuID) DESC LIMIT 1;
                        ``` SELECT DISTINCT Student.Advisor FROM Student GROUP BY Student.Advisor HAVING COUNT(Student.StuID) > 2;
                        ``` SELECT s.advisor FROM student s GROUP BY s.advisor HAVING COUNT(s.stuid) > 2;
                        ``` SELECT COUNT(*) AS total_products FROM Products;
                        ``` SELECT COUNT(*) AS total_products FROM Products;
                        ``` SELECT COUNT(DISTINCT ref_colors.color_code) AS number_of_colors FROM ref_colors;
                        ``` SELECT COUNT(DISTINCT ref_colors.color_code) AS number_of_colors FROM ref_colors;
                        ``` SELECT COUNT(*) AS total_characteristics FROM Characteristics;
                        ``` SELECT COUNT(*) AS total_characteristics FROM Characteristics;
                        ``` SELECT p.product_name, CAST(p.typical_buying_price AS FLOAT) AS typical_buying_price FROM Products p;
                        ``` SELECT p.product_name, CAST(p.typical_buying_price AS FLOAT) AS typical_buying_price FROM products p;
                        ``` SELECT Ref_Colors.color_description FROM Ref_Colors;
                        ``` SELECT Ref_Colors.color_code, Ref_Colors.color_description FROM Ref_Colors;
                        ``` SELECT Characteristics.characteristic_name FROM Characteristics;
                        ``` SELECT Characteristics.characteristic_name FROM Characteristics GROUP BY Characteristics.characteristic_name;
                        ``` SELECT product_name FROM Products WHERE product_category_code = 'Spices';
                        ``` SELECT product_name FROM Products WHERE product_category_code = 'Spices';
                        ``` SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code ilike '%Seeds%';
                        ``` SELECT COUNT(*) AS product_count FROM products WHERE product_category_code ilike '%seeds%';
                        ``` SELECT COUNT(*) FROM Products WHERE product_category_code = 'Spices' AND CAST(typical_selling_price AS FLOAT) > 1000;
                        ``` SELECT COUNT(*) FROM Products WHERE product_category_code = 'Spices' AND CAST(typical_buying_price AS FLOAT) > 1000;
                        ``` SELECT Products.product_category_code, CAST(Products.typical_buying_price AS FLOAT) AS typical_buying_price FROM Products WHERE Products.product_name ILIKE '%cumin%' ;
                        ``` SELECT product_category_code, CAST(typical_buying_price AS FLOAT) AS typical_buying_price FROM products WHERE product_name ILIKE '%cumin%'
                        ``` SELECT Products.product_category_code FROM Products WHERE Products.product_name ilike '%flax%';
                        ``` SELECT Products.product_category_code FROM Products WHERE Products.product_name ilike '%flax%';
                        ``` SELECT Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code ilike '%Hersheys%' ;
                        ``` SELECT Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_description ilike '%herb%';
                        ``` SELECT Ref_Product_Categories.product_category_description FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code = 'Spices';
                        ``` SELECT Ref_Product_Categories.product_category_description FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code = 'Spices';
                        ``` SELECT Ref_Product_Categories.product_category_description, Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code ilike '%Hersers%' ;
                        ``` SELECT Ref_Product_Categories.product_category_description, Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE product_category_code ilike '%Hers%';
                        ``` SELECT Characteristics.characteristic_name, Characteristics.other_characteristic_details, Characteristics.characteristic_data_type FROM Characteristics WHERE Characteristics.characteristic_id NOT IN (SELECT ProductCharacteristics.characteristic_id FROM ProductCharacteristics) ORDER BY Characteristics.characteristic_name NULLS LAST;
                        ``` SELECT Characteristics.characteristic_name, Characteristics.other_characteristic_details, Characteristics.characteristic_data_type FROM Characteristics WHERE Characteristics.characteristic_id NOT IN (SELECT ProductCharacteristics.product_characteristic_id FROM ProductCharacteristics);
                        ```0
                        ``` SELECT COUNT(DISTINCT ref_colors.color_code) AS total_colors FROM ref_colors LEFT JOIN product_colors ON ref_colors.color_code = product_colors.color_code WHERE product_colors.color_code IS NULL;
                        ``` SELECT COUNT(*) AS total_events FROM event;
                        ``` SELECT event.name, event.year FROM event ORDER BY event.year DESC;
                        ``` SELECT event.name FROM event WHERE event.year = (SELECT MAX(event.year) FROM event);
                        ``` SELECT COUNT(*) AS total_stadium FROM stadium;
                        ``` SELECT s.name FROM stadium AS s WHERE s.capacity = (SELECT MAX(s2.capacity) FROM stadium AS s2);
                        ``` SELECT s.name FROM stadium s WHERE s.capacity < (SELECT AVG(capacity) FROM stadium);
                        ``` SELECT c.name AS Country_name, COUNT(*) AS total_stadium FROM stadium s JOIN city c ON s.city = c.name GROUP BY c.name ORDER BY total_stadium DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.name AS Country_name, COUNT(g.id) AS number_of_stadium FROM country c JOIN stadium g ON c.code = g.country GROUP BY c.name HAVING COUNT(g.id) >= 3 ORDER BY number_of_stadium DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNTRY.name FROM COUNTRY WHERE COUNTRY.ID IN (SELECT COUNTRY.id FROM STADIUM WHERE CAPacity > 60000) AND COUNTRY.ID IN (SELECT COUNTRY.id FROM STADIUM WHERE CAPacity < 50000);
                        ``` SELECT DISTINCT(stadium.city) FROM stadium WHERE stadium.opening_year < 2006;
                        ``` SELECT c.country, COUNT(*) AS total_stadium FROM stadium s JOIN city c ON s.city = c.name GROUP BY c.country;
                        ``` SELECT c.name AS country_name FROM country c JOIN stadium s ON c.code = s.country WHERE s.opening_year <= 2006;
                        ``` SELECT COUNT(*) FROM stadium WHERE country != 'Russia';
                        ``` SELECT swimmer.name FROM swimmer ORDER BY swimmer.meter_100 ASC;
                        ``` SELECT COUNT(DISTINCT swimmer.nationality) AS number_of_countries FROM swimmer;
                        ``` SELECT COUNT(DISTINCT s.nationality) AS num_countries, c.name FROM swimmer s JOIN country c ON s.nationality = c.code GROUP BY c.name HAVING COUNT(DISTINCT s.nationality) > 1;
                        ``` SELECT swimmer.meter_200, swimmer.meter_300 FROM swimmer WHERE swimmer.nationality ILIKE '%Australia%' AND (swimmer.meter_200::FLOAT > 200 OR swimmer.meter_300::FLOAT > 300);
                        ``` SELECT s.name FROM stadium s LEFT JOIN event e ON s.id = e.stadium_id WHERE e.stadium_id IS NULL;
                        ``` SELECT swimmer.name FROM swimmer WHERE swimmer.id IS NULL;
                        ``` SELECT s.id AS swimmer_id, s.name AS swimmer_name, n.nationality AS nationality, m.meter_100 AS meter_100, m.meter_200 AS meter_200, m.meter_300 AS meter_300, m.meter_400 AS meter_400, m.meter_500 AS meter_500, m.meter_600 AS meter_600, m.meter_700 AS meter_700, to_number(s.time,'99999999')/60 AS time_in_seconds FROM swimmer s JOIN nationality n ON s.nationality = n.id JOIN meter m ON s.id = m.id;
                        ``` SELECT AVG(capacity) AS average_capacity FROM stadium WHERE opening_year = 2005;
                        ``` SELECT COUNT(Railway_ID) AS number_of_railways FROM railway;
                        ``` SELECT railway.builder FROM railway ORDER BY railway.builder ASC;
                        ``` SELECT railway.wheels, railway.location FROM railway;
                        ``` SELECT MAX(manager.level) AS highest_level FROM manager WHERE manager.country != 'Australia';
                        ``` SELECT AVG(manager.age) AS average_age FROM manager;
                        ``` SELECT manager.name FROM manager ORDER BY manager.level ASC;
                        ``` SELECT t.name, to_char(t.arrival, 'HH24:MI') AS arrival_time FROM train t;
                        ``` SELECT manager.name FROM manager ORDER BY manager.age ASC LIMIT 1;
                        ``` SELECT railway.builder, COUNT(railway_id) AS COUNT FROM railway GROUP BY railway.builder ORDER BY COUNT DESC NULLS LAST;
                        ``` SELECT railway.builder FROM railway GROUP BY railway.builder ORDER BY COUNT(railway.builder) DESC NULLS LAST LIMIT 1;
                        ``` SELECT railway.location, COUNT(railway.railway_id) AS COUNT FROM railway GROUP BY railway.location ORDER BY COUNT DESC NULLS LAST;
                        ``` SELECT railway.location FROM railway GROUP BY railway.location HAVING COUNT(railway.railway_id) > 1;
                        ``` SELECT COUNT(railway_id) AS object_number FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train);
                        ``` SELECT DISTINCT manager.country FROM manager WHERE (manager.age > 50 AND manager.age < 46) GROUP BY manager.country;
                        ``` SELECT DISTINCT manager.country FROM manager;
                        ``` SELECT manager.manager_id, manager.name, COUNT(manager.working_year_starts) AS working_years FROM manager GROUP BY manager.manager_id, manager.name ORDER BY manager.level DESC;
                        ``` SELECT manager.country FROM manager WHERE manager.age > 50 OR manager.age < 46;
                        ``` SELECT COUNT(*) AS number_of_addresses FROM Addresses WHERE country = 'USA';
                        ``` SELECT DISTINCT Addresses.city FROM Addresses;
                        ``` SELECT Addresses.state_province_county, COUNT(Addresses.address_id) AS address_count FROM Addres GROUP BY Addres.state_province_county;
                        ``` SELECT customers.customer_name, customers.customer_phone FROM customers WHERE customers.customer_address IS NULL;
                        ``` SELECT DISTINCT Products.product_type_code FROM Products GROUP BY Products.product_type_code HAVING COUNT(Products.product_id) >= 2;
                        ``` SELECT Customers.customer_name, Customers.customer_phone, Customers.payment_method_code FROM Customers ORDER BY Customers.customer_id DESC;
                        ``` SELECT MIN(product_price) AS min_price, MAX(product_price) AS max_price, AVG(product_price) AS avg_price FROM Products;
                        ``` SELECT COUNT(*) AS num_products_with_high_price FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
                        ``` SELECT p.product_type_code, p.product_name FROM Products p WHERE p.product_price > 1000 OR p.product_price < 500;
                        ``` SELECT dorm_name FROM Dorm WHERE gender = 'F';
                        ``` SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender = 'F';
                        ``` SELECT dorm_name FROM Dorm WHERE student_capacity > 300;
                        ``` SELECT dorm_name FROM Dorm WHERE student_capacity > 300;
                        ``` SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < 25;
                        ``` SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < 25;
                        ``` SELECT Student.Fname FROM Student WHERE Student.Age < 20;
                        ``` SELECT s.fname FROM student s WHERE age > 20;
                        ``` SELECT Student.Fname FROM Student WHERE "city_code" ILIKE '%PHL%' AND Age BETWEEN 20 AND 25;
                        ``` SELECT Student.Fname FROM Student WHERE (Student.Age >= 20 AND Student.Age <= 25) AND (Student.city_code = 'PHL');
                        ``` SELECT COUNT(dormid) AS number_of_dorms FROM Dorm;
                        ``` SELECT COUNT(dormid) AS number_of_dorms FROM Dorm;
                        ``` SELECT COUNT(DISTINCT dorm_amenity.amenity_name) AS num_amenities FROM dorm_amenity;
                        ``` SELECT COUNT(DISTINCT Dorm_amenity.amenity_name) AS number_of_dorm_amenities FROM Dorm_amenity;
                        ``` SELECT SUM(dorm.student_capacity) AS total_capacity FROM dorm;
                        ``` SELECT SUM(dorm.student_capacity) AS total_capacity FROM dorm;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT COUNT(*) AS total_students FROM Student;
                        ``` SELECT Student.city_code, AVG(Student.Age) AS average_age FROM Student GROUP BY Student.city_code;
                        ``` SELECT Student.city_code, AVG(Student.Age) AS average_age FROM Student GROUP BY Student.city_code ORDER BY average_age DESC NULLS LAST;
                        ``` SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X';
                        ``` SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X';
                        ``` SELECT COUNT(*) AS total_dorms FROM Has_amenity;
                        ``` SELECT COUNT(*) AS total_dorms_with_amenities FROM Has_Amenity;
                        ``` SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.dormid NOT IN (SELECT Amenity.dormid FROM Amenity);
                        ``` SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.dormid NOT IN (SELECT Dorm_Amenity.dormid FROM Dorm_Amenity);
                        ``` SELECT DISTINCT dorm.gender FROM dorm;
                        ``` SELECT COUNT(DISTINCT gender) AS number_of_genders FROM Dorm;
                        ``` SELECT Dorm.student_capacity, Dorm.gender FROM Dorm WHERE Dorm.dorm_name ilike '%Donor%';
                        ``` SELECT Dorm.student_capacity, Dorm.gender FROM Dorm WHERE Dorm.dorm_name ilike '%Donor%in%it%'
                        ``` SELECT dorm_name, gender FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100;
                        ``` SELECT dorm.dorm_name, CASE WHEN dorm.student_capacity > 300 THEN 'Large' ELSE 'Small' END AS dorm_type FROM dorm WHERE dorm.student_capacity > 300 OR dorm.student_capacity < 100;
                        ``` SELECT Student.major AS major, Student.city_code AS city FROM Student GROUP BY Student.major, Student.city_code;
                        ``` SELECT Student.StuID, COUNT(DISTINCT Student.Major) AS major_count, COUNT(DISTINCT Student.city_code) AS city_code_count FROM Student GROUP BY Student.StuID;
                        ``` SELECT Student.LName FROM Student WHERE (Student.Sex = 'F' AND Student.city_code = 'BAL') OR (Student.Sex = 'M' AND Student.Age < 20) ;
                        ``` SELECT Student.LName FROM Student WHERE (Student.Sex = 'Female' OR Student.city_code = 'BAL') AND Student.Age < 20;
                        ``` SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC LIMIT 1;
                        ``` SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC NULLS LAST LIMIT 1;
                        ``` SELECT Dorm_amenity.amenity_name FROM Dorm_amenity GROUP BY Dorm_amenity.amenity_name ORDER BY Dorm_amenity.amenity_name NULLS LAST;
                        ``` SELECT Dorm_amenity.amenity_name FROM Dorm_amenity ORDER BY Dorm_amenity.amenity_name ASC;
                        ``` SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code ORDER BY total_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code ORDER BY total_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.fname, s.lname FROM student s WHERE s.age < (SELECT AVG(age) FROM student);
                        ``` SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age < (SELECT AVG(Student.Age) FROM Student);
                        ``` SELECT Student.LName, Student.Fname, Student.Age FROM Student WHERE "city_code" != 'HKG' ORDER BY Student.Age NULLS LAST;
                        ``` SELECT Student.LName, Student.Fname FROM Student WHERE "city_code" != 'HKG' ORDER BY Student.Age NULLS LAST;
                        ``` SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;
                        ``` SELECT Dorm.gender, COUNT(Dorm.dormid) AS number_of_dorms, SUM(Dorm.student_capacity) AS total_capacity FROM Dorm GROUP BY Dorm.gender;
                        ``` SELECT s.sex, AVG(s.age) AS average_age, MIN(s.age) AS min_age FROM student s GROUP BY s.sex;
                        ``` SELECT Student.Sex, AVG(Student.Age) AS average_age, MIN(Student.Age) AS min_age FROM Student GROUP BY Student.Sex;
                        ``` SELECT Student.Major AS Major, COUNT(*) AS total_students FROM Student GROUP BY Student.Major;
                        ``` SELECT Student.Major, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.Major;
                        ``` SELECT s.city_code, COUNT(*) AS total_students, AVG(age) AS average_age FROM student s GROUP BY s.city_code;
                        ``` SELECT s.city_code, COUNT(*) AS total_students, AVG(s.age) AS average_age FROM student s GROUP BY s.city_code;
                        ``` SELECT Student.city_code, AVG(Student.Age) AS average_age, COUNT(*) filter (WHERE Student.Sex = 'M') AS male_students_count FROM Student GROUP BY Student.city_code;
                        ``` SELECT Student.city_code, AVG(Student.Age) AS average_age, COUNT(CASE WHEN Student.Sex = 'M' THEN 1 END) AS male_students_count FROM Student GROUP BY Student.city_code;
                        ``` SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code HAVING COUNT(Student.StuID) > 1;
                        ``` SELECT s.city_code, COUNT(*) AS total_students FROM student s GROUP BY s.city_code HAVING COUNT(*) > 1;
                        ``` SELECT s.fname, s.lname FROM student s WHERE NOT EXISTS (SELECT 1 FROM student s2 WHERE s.major < s2.major);
                        ``` SELECT s.lname, s.fname FROM student s WHERE NOT EXISTS (SELECT 1 FROM student s2 WHERE s2.major > s.major);
                        ``` SELECT Student.Sex, AVG(Student.Age) AS average_age, COUNT(*) filter (WHERE Student.Age < AVG(Student.Age)) AS under_average_count FROM Student GROUP BY Student.Sex;
                        ``` SELECT Student.Sex, AVG(Student.Age) AS average_age, COUNT(*) filter (WHERE Student.Age > AVG(Student.Age)) AS above_average_count FROM Student GROUP BY Student.Sex;
                        ``` SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.dormid NOT IN (SELECT DormTVLounge.dormid FROM DormTVLounge);
                        ``` SELECT dorm_name FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM TVLounge);
                        ``` SELECT COUNT(customer_id) AS total_customers FROM customers;
                        ``` SELECT COUNT(*) FROM Customers;
                        ``` SELECT Customers.email_address, Customers.phone_number FROM Customers ORDER BY Customers.email_address ASC, Customers.phone_number ASC;
                        ``` SELECT Customers.email_address, Customers.phone_number FROM Customers ORDER BY Customers.email_address ASC, Customers.phone_number ASC;
                        ``` SELECT c.town_city, COUNT(*) AS customer_count FROM customers c WHERE c.customer_type_code = 'good credit rating' GROUP BY c.town_city ORDER BY customer_count ASC NULLS LAST LIMIT 1;
                        ``` SELECT Customers.town_city FROM Customers WHERE Customers.customer_type_code = 'good credit rating' ORDER BY COUNT(Customers.customer_id) ASC NULLS LAST LIMIT 1;
                        ``` SELECT Customers.email_address, Customers.phone_number FROM Customers WHERE Customers.customer_id NOT IN (SELECT customer_id FROM Complaints);
                        ``` SELECT customers.email_address, customers.phone_number FROM customers WHERE customers.customer_id NOT IN (SELECT customer_id FROM complaints);
                        ``` SELECT customers.phone_number FROM customers UNION SELECT staff.phone_number FROM staff;
                        ``` SELECT Customers.phone_number FROM Customers UNION ALL SELECT Staff.phone_number FROM Staff;
                        ``` SELECT Products.product_description FROM Products WHERE Products.product_name ilike '%Chocolate%' ;
                        ``` SELECT Products.product_description FROM Products WHERE Products.product_name ilike '%Chocolate%';
                        ``` SELECT p.product_name, c.category_description FROM Products p JOIN Product_Categories c ON p.product_category_code = c.category_code ORDER BY p.product_price DESC NULLS LAST LIMIT 1;
                        ``` SELECT p.product_name, pc.product_category_code FROM Products p JOIN Product_Category pc ON p.product_category_code = pc.product_category_code ORDER BY p.product_price DESC LIMIT 1;
                        ``` SELECT Products.product_id, Products.product_price FROM Products WHERE Products.product_id NOT IN (SELECT Complaints.product_id FROM Complaints);
                        ``` SELECT Products.product_id, Products.product_price FROM Products WHERE Products.product_id NOT IN (SELECT Complaints.product_id FROM Complaints);
                        ``` SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code;
                        ``` SELECT Products.product_category_code, AVG(Products.product_price) AS average_price FROM Products GROUP BY Products.product_category_code;
                        ``` SELECT complaints.complaint_status_code FROM complaints WHERE complaints.product_id IN (SELECT product_id FROM files) GROUP BY complaints.complaint_status_code HAVING COUNT(complaints.product_id) > 3;
                        ``` SELECT complaints.complaint_status_code FROM complaints GROUP BY complaints.complaint_status_code HAVING COUNT(complaints.complaint_id) > 3;
                        ``` SELECT Staff.last_name FROM Staff WHERE Staff.email_address ilike '%wrau%';
                        ``` SELECT Staff.last_name FROM Staff WHERE Staff.email_address ilike '%wrau%';
                        ``` SELECT COUNT(*) AS total_customers, customer_type_code FROM customers GROUP BY customer_type_code ORDER BY total_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers GROUP BY customer_type_code ORDER BY total_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(DISTINCT complaints.complaint_type_code) AS number_of_distinct_complaint_type_codes FROM complaints;
                        ``` SELECT COUNT(DISTINCT complaints.complaint_type_code) AS number_of_complaint_types FROM complaints;
                        ``` SELECT customers.address_line_1, customers.address_line_2 FROM customers WHERE customers.email_address = 'vbogisich@example.org';
                        ``` SELECT Customers.address_line_1, Customers.address_line_2 FROM Customers WHERE Customers.email_address = 'vbogisich@example.com';
                        ``` SELECT complaints.complaint_status_code, COUNT(*) AS number_of_complaints FROM complaints WHERE complaints.complaint_type_code = 'Product Failure' GROUP BY complaints.complaint_status_code;
                        ``` SELECT complaint_status_code, COUNT(*) AS number_of_complaints FROM Complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code;
                        ``` SELECT c.state, COUNT(*) AS customer_count FROM customers c GROUP BY c.state ORDER BY customer_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT c.state, COUNT(*) AS customer_count FROM customers c GROUP BY c.state ORDER BY customer_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_submissions FROM submission;
                        ``` SELECT COUNT(*) AS total_submissions FROM submission;
                        ``` SELECT submission.author FROM submission ORDER BY submission.scores ASC;
                        ``` SELECT submission.author, submission.score FROM submission ORDER BY submission.score ASC;
                        ``` SELECT submission.author, college FROM submission;
                        ``` SELECT sub.submission_id, sub.author, col.college FROM submission AS sub JOIN college AS col ON sub.college = col.name;
                        ``` SELECT submission.author FROM submission WHERE submission.college IN ('Florida', 'Temple');
                        ``` SELECT submission.author FROM submission WHERE submission.college IN ('Florida', 'Temple') ORDER BY submission.author NULLS LAST;
                        ``` SELECT AVG(Scores) AS average_score FROM submission;
                        ``` SELECT AVG(Scores) AS average_score FROM submission;
                        ``` SELECT submission.author FROM submission WHERE submission.scores = (SELECT MAX(submission.scores) FROM submission);
                        ``` SELECT submission.author FROM submission WHERE submission.scores = (SELECT MAX(submission.scores) FROM submission);
                        ``` SELECT college, COUNT(author) AS author_count FROM submission GROUP BY college ORDER BY author_count DESC NULLS LAST;
                        ``` SELECT c.name, COUNT(s.author) AS author_count FROM college c JOIN submission s ON c.code = s.college GROUP BY c.name;
                        ``` SELECT submission.college FROM submission GROUP BY submission.college ORDER BY COUNT(submission.college) DESC NULLS LAST;
                        ``` SELECT c.name AS college_name, COUNT(s.author) AS number_of_authors FROM submission s JOIN college c ON s.college = c.name GROUP BY c.name ORDER BY number_of_authors DESC NULLS LAST LIMIT 1;
                        ``` SELECT DISTINCT college FROM submission WHERE submission_id IN (SELECT submission_id FROM submission WHERE scores > 90) AND submission_id IN (SELECT submission_id FROM submission WHERE scores < 80);
                        ``` SELECT college FROM submission WHERE submission_id > 90 AND submission_id < 80;
                        ``` SELECT workshop.date, workshop.venue FROM workshop ORDER BY workshop.venue ASC;
                        ``` SELECT workshop.date, workshop.venue FROM workshop ORDER BY workshop.venue ASC;
                        ``` SELECT a.author FROM author a LEFT JOIN submission s ON a.author = s.author WHERE s.author IS NULL;
                        ``` SELECT author FROM submission GROUP BY author HAVING COUNT(submission_id) = 0;
                        ``` SELECT COUNT(*) AS total_investors FROM Investors;
                        ``` SELECT Investors.investor_id, Investors.investor_details FROM Investors;
                        ``` SELECT lots.lot_id, lots.investor_id, lots.lot_details FROM lots;
                        ``` SELECT MAX(amount_of_transaction) AS max_transaction_amount FROM Transactions;
                        ``` SELECT date_of_transaction, share_count FROM Transactions;
                        ``` SELECT CAST(SUM(amount_of_transaction) AS FLOAT) / NULLIF((SELECT SUM(amount_of_transaction) FROM Transactions), 0) AS fraction_of_transactions_with_amount_greater_than_zero
                        ``` SELECT Transactions.transaction_id FROM Transactions WHERE Transactions.transaction_type_code ilike '%PUR%';
                        ``` SELECT date_of_transaction FROM Transactions WHERE transaction_type_code = 'Sale' ;
                        ``` SELECT AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions WHERE transaction_type_code = 'Sale';
                        ``` SELECT Ref_Transaction_Types.transaction_type_description FROM Ref_Transaction_Types WHERE Ref_Transaction_Types.transaction_type_code ilike '%PUR%';
                        ``` SELECT MIN(amount_of_transaction) AS min_transaction_amount FROM Transactions WHERE transaction_type_code = 'PUR' AND CAST(share_count AS FLOAT) > 50;
                        ``` SELECT MAX(transaction.share_count) AS max_share_count FROM transactions WHERE transactions.amount_of_transaction < 10000;
                        ``` SELECT date_of_transaction FROM Transactions WHERE (share_count > '100' OR amount_of_transaction > 1000)
                        ``` SELECT COUNT(DISTINCT transaction_type_code) AS number_of_transaction_types FROM Transactions;
                        ``` SELECT lots.lot_id, lots.investor_id, lots.lot_details FROM lots;
                        ``` SELECT transaction_type_code, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY transaction_type_code;
                        ``` SELECT transaction_type_code, MIN(share_count) AS min_share_count, MAX(share_count) AS max_share_count FROM transactions GROUP BY transaction_type_code;
                        ``` SELECT investor_id, AVG(share_count::FLOAT) AS avg_share_count FROM Transactions GROUP BY investor_id;
                        ``` SELECT investor_id, AVG(share_count::FLOAT) AS avg_share_count FROM Transactions GROUP BY investor_id ORDER BY avg_share_count DESC NULLS LAST;
                        ``` SELECT investor_id, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY investor_id;
                        ``` SELECT investor_id, COUNT(transaction_id) AS number_of_transactions FROM Transactions WHERE transaction_type_code = 'Sale' AND amount_of_transaction > 0 GROUP BY investor_id;
                        ``` SELECT investor_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY investor_id;
                        ``` SELECT transactions.transaction_type_code FROM transactions GROUP BY transactions.transaction_type_code ORDER BY COUNT(transactions.transaction_id) ASC NULLS LAST LIMIT 1;
                        ``` SELECT Transactions.transaction_type_code, COUNT(*) AS frequency FROM Transactions GROUP BY Transactions.transaction_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT date_of_transaction FROM Transactions WHERE (share_count::integer > 100 OR amount_of_transaction > 100)
                        ``` SELECT CAST(sales.sales_transaction_id AS FLOAT) / CAST(purchases.purchase_transaction_id AS FLOAT) AS ratio, sales.sales_details, purchases.purchase_details FROM sales JOIN purchases ON sales.sales_transaction_id != purchases.purchase_transaction_id;
                        ``` SELECT lots.lot_id, lots.investor_id, lots.lot_details FROM lots WHERE lots.lot_id NOT IN (SELECT transaction.lot_id FROM transaction);
                        ``` SELECT COUNT(*) AS total_hotels FROM Hotels;
                        ``` SELECT COUNT(*) AS total_available_hotels FROM Hotels WHERE price_range IS NOT NULL;
                        ``` SELECT price_range FROM Hotels;
                        ``` SELECT MIN(price_range) AS min_price_range, MAX(price_range) AS max_price_range FROM Hotels;
                        ``` SELECT DISTINCT Locations.Location_Name FROM Locations;
                        ``` SELECT Locations.Location_Name FROM Locations;
                        ``` SELECT s.name, s.other_details FROM staff AS s;
                        ``` SELECT s.name, s.other_details FROM staff AS s;
                        ``` SELECT v.visitor_id, v.visitor_details FROM visitors v;
                        ``` SELECT v.visitor_id, v.visitor_details FROM visitors v;
                        ``` SELECT MIN(price_range) AS lowest_price_range, MAX(price_range) AS highest_price_range FROM Hotels WHERE star_rating_code = '5';
                        ``` SELECT Hotels.price_range FROM Hotels WHERE Hotels.star_rating_code = '5' ORDER BY Hotels.price_range NULLS LAST LIMIT 5;
                        ``` SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Y';
                        ``` SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Y';
                        ``` SELECT Locations.Address FROM Locations WHERE Locations.location_name ilike '%Science%Gallery%' ORDER BY Locations.address NULLS LAST;
                        ``` SELECT Locations.Address FROM Locations WHERE Locations.location_name ilike '%Science%Gallery%'
                        ``` SELECT Locations.Location_Name, Locations.Address_Details FROM Locations WHERE Locations.Location_Name ilike '%UK%gallery%';
                        ``` SELECT Locations.Location_Name, Locations.Address FROM Locations WHERE Locations.Location_Name ilike '%Japanese%' ORDER BY Locations.Location_Name NULLS LAST;
                        ``` SELECT Locations.Location_Name FROM Locations WHERE Locations.Location_Name ilike '%film%';
                        ``` SELECT Locations.Location_Name FROM Locations WHERE Locations.Location_Name ilike '%film%';
                        ``` SELECT COUNT(DISTINCT Photos.Name) AS number_of_names FROM Photos;
                        ``` SELECT COUNT(DISTINCT Photos.Name) AS num_names FROM Photos;
                        ``` SELECT date_trunc('day', Visit_Date) AS Visit_Day FROM Visits GROUP BY Visit_Day;
                        ``` SELECT DISTINCT Visit_Date FROM Visits;
                        ``` SELECT ta.name FROM tourism_attractions ta JOIN transport_modes tm ON ta.transport_mode_code = tm.transport_mode_code WHERE tm.transport_mode_code ilike '%bus%';
                        ``` SELECT ta.name FROM Tourist_attractions ta WHERE ta.how_to_get_there IN ('Bus', 'Train');
                        ``` SELECT ta.name, ta.opening_hours FROM tourist_attractions ta WHERE ta.how_to_get_there IN ('bus', 'walk');
                        ``` SELECT ta.name, ta.opening_hours FROM tourist_attractions ta WHERE ta.how_to_get_there IN ('bus', 'walk');
                        ``` SELECT star_rating_code, AVG(price_range) AS average_price FROM Hotels GROUP BY star_rating_code;
                        ``` SELECT star_rating_code, AVG(price_range) AS average_price_range FROM Hotels GROUP BY star_rating_code;
                        ``` SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;
                        ``` SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;
                        ``` SELECT hotels.hotel_id, CAST(hotels.star_rating_code AS FLOAT) AS star_rating FROM hotels ORDER BY hotels.price_range ASC;
                        ``` SELECT hotels.hotel_id, CAST(hotels.star_rating_code AS FLOAT) AS star_rating FROM hotels ORDER BY hotels.price_range ASC;
                        ``` SELECT Hotels.hotel_id, Hotels.star_rating_code, Hotels.pets_allowed_yn, Hotels.price_range, rank() OVER (ORDER BY Hotels.price_range DESC) AS rank FROM Hotels ORDER BY rank ASC LIMIT 3;
                        ``` SELECT Hotels.hotel_id, Hotels.star_rating_code, Hotels.pets_allowed_yn, Hotels.price_range, rank() OVER (ORDER BY Hotels.price_range DESC) AS rank FROM Hotels ORDER BY rank ASC LIMIT 3;
                        ``` SELECT Hotels.hotel_id, Hotels.star_rating_code, Hotels.pets_allowed_yn, Hotels.price_range, rank() OVER (ORDER BY Hotels.price_range ASC) AS rank FROM Hotels WHERE Hotels.price_range IS NOT NULL ORDER BY rank ASC LIMIT 3;
                        ``` SELECT h.hotel_id, h.star_rating_code, h.other_hotel_details FROM Hotels h WHERE h.price_range IN (SELECT MIN(price_range) FROM Hotels) GROUP BY h.hotel_id, h.star_rating_code, h.other_hotel_details;
                        ``` SELECT Tourist_Attraction.How_to_Get_There, COUNT(*) AS number_of_people FROM Tourist_Attraction GROUP BY Tourist_Attraction.How_to_Get_There ORDER BY number_of_people DESC NULLS LAST LIMIT 1;
                        ``` SELECT ta.attraction_type_code, COUNT(*)::FLOAT / total_attractions AS fraction FROM tourist_attractions ta GROUP BY ta.attraction_type_code ORDER BY fraction DESC NULLS LAST LIMIT 1;
                        ``` SELECT attraction_type_code, COUNT(*) AS number_of_attractions FROM touristic_attractions GROUP BY attraction_type_code;
                        ``` SELECT ta.attraction_type_code, COUNT(*) AS num_attractions FROM touristic_attractions ta GROUP BY ta.attraction_type_code;
                        ``` SELECT COUNT(*) AS total_visitors FROM Visitors;
                        ``` SELECT COUNT(DISTINCT Visitors.tourist_id) AS total_visitors FROM visitors;
                        ``` SELECT COUNT(GameID) AS number_of_games FROM Video_Games;
                        ``` SELECT COUNT(*) AS game_count FROM Video_Games;
                        ``` SELECT COUNT(DISTINCT Video_Games.GType) AS number_of_game_types FROM Video_Games;
                        ``` SELECT COUNT(DISTINCT Video_Games.GType) AS number_of_game_types FROM Video_Games;
                        ``` SELECT DISTINCT Video_Games.GType FROM Video_Games;
                        ``` SELECT DISTINCT Video_Games.GType FROM Video_Games;
                        ``` SELECT vg.gname, vg.gtype FROM video_games vg ORDER BY vg.gname;
                        ``` SELECT vg.gname, vg.gtype FROM video_games vg ORDER BY vg.gname ASC NULLS LAST, vg.gtype ASC NULLS LAST;
                        ``` SELECT Video_Games.GameID, Video_Games.GName FROM Video_Games WHERE Video_Games.GType ilike '%Collectible%card%game%';
                        ``` SELECT vg.gname FROM video_games vg JOIN card_collectors cc ON vg.gameid = cc.card_id;
                        ``` SELECT vg.gtype FROM video_games vg WHERE vg.gname ilike '%destiny%';
                        ``` SELECT vg.gtype FROM video_games vg WHERE vg.gname ilike '%call%of%destiny%';
                        ``` SELECT COUNT(*) AS number_of_games FROM Video_Games WHERE GType ilike '%Massive%multiplayer%online%game%';
                        ``` SELECT COUNT(*) FROM Video_Games WHERE GType ilike '%Massively%multiplayer%online%';
                        ``` SELECT vg.gtype, COUNT(*) AS game_count FROM video_games vg GROUP BY vg.gtype;
                        ``` SELECT vg.gtype, COUNT(*) AS game_count FROM video_games vg GROUP BY vg.gtype;
                        ``` SELECT vg.gtype, COUNT(*) AS game_count FROM video_games vg GROUP BY vg.gtype ORDER BY game_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT vg.gtype, COUNT(*) AS game_count FROM video_games vg GROUP BY vg.gtype ORDER BY game_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT vg.gtype, COUNT(*) AS game_count FROM video_games vg GROUP BY vg.gtype ORDER BY game_count ASC LIMIT 1;
                        ``` SELECT Video_Games.gtype, COUNT(*) AS game_count FROM Video_Games GROUP BY Video_Games.gtype ORDER BY game_count ASC LIMIT 1;
                        ``` SELECT Student.StuID FROM Student WHERE Student.city_code = 'CHI';
                        ``` SELECT Student.StuID FROM Student WHERE Student.city_code = 'CHI';
                        ``` SELECT Student.StuID FROM Student WHERE Student.Advisor = 1121;
                        ``` SELECT Student.StuID FROM Student WHERE Student.Advisor = 1121;
                        ``` SELECT S.Fname FROM Student S WHERE S.Major = 600;
                        ``` SELECT Student.Fname FROM Student WHERE Student.Major = 600;
                        ``` SELECT Student.Major, AVG(Student.Age) AS average_age, MIN(Student.Age) AS min_age, MAX(Student.Age) AS max_age FROM Student GROUP BY Student.Major;
                        ``` SELECT Student.Major, AVG(Student.Age) AS average_age, MIN(Student.Age) AS min_age, MAX(Student.Age) AS max_age FROM Student GROUP BY Student.Major;
                        ``` SELECT a.name FROM Advisor a JOIN Student s ON a.advisor_id = s.advisor WHERE a.name IN (SELECT name FROM Advisor GROUP BY name HAVING COUNT(Student.advisor) >= 2);
                        ``` SELECT Student.LName, Student.Fname FROM Student WHERE Student.Advisor IS NOT NULL;
                        ``` SELECT COUNT(SportName) AS number_of_sports FROM SportsInfo;
                        ``` SELECT COUNT(DISTINCT SportName) AS number_of_sports FROM SportsInfo;
                        ``` SELECT COUNT(*) FROM SportsInfo;
                        ``` SELECT COUNT(DISTINCT SportsInfo.StuID) AS number_of_students FROM SportsInfo;
                        ``` SELECT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.OnScholarship = 'Yes';
                        ``` SELECT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.OnScholarship = 'Yes';
                        ``` SELECT COUNT(SportsInfo.GamesPlayed) AS total_games_play FROM SportsInfo;
                        ``` SELECT SUM(GamesPlayed) AS total_games_play FROM SportsInfo;
                        ``` SELECT COUNT(GamesPlayed) AS total_games_played FROM SportsInfo WHERE OnScholarship = 'Yes' AND SportName = 'Football';
                        ``` SELECT SUM(GamesPlayed) AS total_games_played FROM SportsInfo WHERE "OnScholarship" ILIKE '%yes%';
                        ``` SELECT SportsInfo.SportName, COUNT(Students.StudentID) AS total_students FROM SportsInfo JOIN students ON SportsInfo.StuID = students.StuID GROUP BY SportsInfo.SportName;
                        ``` SELECT SportsInfo.SportName, COUNT(Students.StudentID) AS number_of_students FROM SportsInfo JOIN students ON SportsInfo.StuID = students.StudentID GROUP BY SportsInfo.SportName;
                        ``` SELECT s.StuID, COUNT(DISTINCT si.SportName) AS num_sports, SUM(si.GamesPlayed) AS total_games_play FROM SportsInfo si JOIN Students s ON si.StuID = s.StudentID GROUP BY s.StuID;
                        ``` SELECT s.StuID, COUNT(si.SportName) AS num_sports, SUM(si.GamesPlayed) AS total_games_play FROM Students s JOIN SportsInfo si ON s.StuID = si.StuID GROUP BY s.StuID;
                        ``` SELECT S.StuID FROM SportsInfo S WHERE S.HoursPerWeek > 10;
                        ``` SELECT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.HoursPerWeek > 10;
                        ``` SELECT SportsInfo.SportName, COUNT(*) AS total_students_on_scholarship FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportsInfo.SportName ORDER BY total_students_on_scholarship DESC LIMIT 1;
                        ``` SELECT SportsInfo.SportName, COUNT(SportsInfo.StuID) AS total_students FROM SportsInfo WHERE SportsInfo.OnScholarship = 'Yes' GROUP BY SportsInfo.SportName ORDER BY total_students DESC NULLS LAST LIMIT 1;
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Sports_Student.StuID FROM Sports_Student);
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Sports_Player.Student_id FROM Sports_player);
                        ``` SELECT Student.StuID FROM Student WHERE Student.Major = 600 AND Student.StuID IN (SELECT Scholarship.StuID FROM Scholarship);
                        ``` SELECT Student.StuID FROM Student WHERE Student.Major = 600 AND Student.StuID IN (SELECT Scholarship.Student_id FROM Scholarship);
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'Female' AND Student.Major = 1;
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'Female' AND EXISTS (SELECT 1 FROM TeamMember WHERE TeamMember.Student_id = Student.StuID);
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male' AND Student.Major != 1;
                        ``` SELECT Student.StuID FROM Student WHERE Student.Sex = 'M' AND Student.StuID NOT IN (SELECT Student_Athlete.StuID FROM Student AS Student_Athlete JOIN Athlete_in_sport AS athlete_in_sport ON Student_Athlete.StuID = athlete_in_sport.athlete_id WHERE athlete_in_sport.sport_code = 'SOC');
                        ``` SELECT CAST(COUNT(StuID) AS FLOAT) / CAST(COUNT(GameID) AS FLOAT) AS ratio_students_to_games FROM Plays_Games;
                        ``` SELECT COUNT(DISTINCT Plays_Games.StuID) AS number_of_students FROM Plays_Games;
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT VideoGamePlayer.Student_id FROM VideoGamePlayer);
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT VideoGamePlayer.StuID FROM VideoGamePlayer);
                        ``` SELECT s.StuID FROM SportsInfo s JOIN VideoGame vg ON s.StuID = vg.StuID;
                        ``` SELECT s.StuID FROM SportsInfo s JOIN VideoGameInfo vg ON s.StuID = vg.StuID;
                        ``` SELECT p.gameid, CAST(p.hours_played AS FLOAT) AS hours_played FROM Plays_Games p;
                        ``` SELECT p.studid, p.gameid, SUM(p.hours_played) AS total_hours_played FROM plays_games p GROUP BY p.studid, p.gameid;
                        ``` SELECT p.StuID, SUM(p.Hours_played) AS total_hours_played FROM Plays_Games p GROUP BY p.StuID;
                        ``` SELECT p.studentid, SUM(p.hours_played) AS total_hours_played FROM plays_games p GROUP BY p.studentid;
                        ``` SELECT s.fname, s.age FROM student_sports ss JOIN student s ON ss.student_id = s.studid WHERE sport_code IN ('FOOTBALL', 'LACROSSE');
                        ``` SELECT s.fname, CAST(s.age AS FLOAT) FROM student_football_lacrosse_team sf JOIN student s ON sf.student_id = s.studid;
                        ``` SELECT s.lname, s.sex FROM student s WHERE s.major IN (757071, 829364)
                        ``` SELECT Student.LName, Student.Sex FROM Student WHERE (Major = 1 OR Major = 2) AND (Advisor = 1 OR Advisor = 2);
                        ``` SELECT Customers.customer_name FROM Customers;
                        ``` SELECT Customers.customer_name FROM Customers;
                        ``` SELECT COUNT(*) AS total_customers FROM Customers;
                        ``` SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Customers;
                        ``` SELECT AVG(order_quantity::FLOAT) AS average_quantity FROM Order_Items;
                        ``` SELECT AVG(cast(order_quantity AS FLOAT)) AS average_order_quantity FROM Order_Items;
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method ilike '%cash%';
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method ilike '%cash%';
                        ``` SELECT Customers.customer_id, Customers.date_became_customer FROM Customers WHERE Customers.customer_id BETWEEN 10 AND 20;
                        ``` SELECT Customers.date_became_customer FROM Customers WHERE Customers.customer_id BETWEEN 10 AND 20;
                        ``` SELECT Customers.payment_method, COUNT(Customers.customer_id) AS number_of_customers FROM Customers GROUP BY Customers.payment_method ORDER BY number_of_customers DESC NULLS LAST LIMIT 1;
                        ``` SELECT customers.payment_method, COUNT(*) AS frequency FROM customers GROUP BY customers.payment_method ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Customers.customer_name FROM Customers GROUP BY Customers.payment_method ORDER BY COUNT(Customers.customer_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT customers.customer_name FROM customers GROUP BY customers.payment_method HAVING COUNT(customers.customer_id) OVER (PARTITION BY customers.payment_method) = MAX(COUNT(customers.customer_id)) OVER (PARTITION BY customers.payment_method);
                        ``` SELECT DISTINCT Customers.payment_method FROM Customers;
                        ``` SELECT DISTINCT Customers.payment_method FROM Customers;
                        ``` SELECT p.product_id, p.product_details FROM Products p;
                        ``` SELECT p.product_id, p.product_details FROM Products p;
                        ``` SELECT customers.customer_name FROM customers WHERE customers.customer_name ilike '%Alex%';
                        ``` SELECT customers.customer_name FROM customers WHERE customers.customer_name ilike '%Alex%';
                        ``` SELECT product_details FROM Products WHERE product_details ilike '%Leisure%' OR product_details ilike '%Americano%';
                        ``` SELECT Products.product_details FROM Products WHERE Products.product_details ilike '%Leote%' OR Products.product_details ilike '%Americano%';
                        ``` SELECT DISTINCT Addresses.city FROM Addresses;
                        ``` SELECT a.city FROM Addresses a WHERE a.address_id NOT IN (SELECT customer_address FROM Customers);
                        ``` SELECT DISTINCT Addresses.city FROM Addresses;
                        ``` SELECT DISTINCT Addresses.city FROM Addresses;
                        ``` SELECT Addresses.city FROM Addres WHERE Addres.zip_postcode = '255';
                        ``` SELECT Addresses.city FROM Addresses WHERE Addresses.zip_postcode = '255';
                        ``` SELECT Addresses.city, Addresses.state_province_county, Addresses.country FROM Addres WHERE Addres.zip_postcode like '4%';
                        ``` SELECT Addresses.city, Addresses.state_province_county, Addresses.country FROM Addres WHERE Addres.zip_postcode like '4.%';
                        ``` SELECT a.country FROM Addresses a GROUP BY a.country HAVING COUNT(a.address_id) > 4;
                        ``` SELECT a.country FROM Addresses a GROUP BY a.country HAVING COUNT(DISTINCT a.address_id) > 4;
                        ``` SELECT cc.channel_code FROM customer_contact_channels cc WHERE cc.customer_id IN (SELECT customer_id FROM customer_contact_channels GROUP BY customer_id HAVING COUNT(customer_id) < 5);
                        ``` SELECT COUNT(*) AS COUNT FROM customer_contact_channels WHERE active_to_date > CURRENT_TIMESTAMP;
                        ``` SELECT AVG(active_to_date - active_from_date) AS average_lifespan FROM customer_contact_channels;
                        ``` SELECT AVG(active_to_date - active_from_date) AS average_active_duration FROM customer_contact_channels;
                        ``` SELECT pc_channels.channel_code, pc_channels.contact_number FROM personal_contacts_channels AS pc_channels WHERE (pc_channels.active_to_date IS NULL OR pc_channels.active_to_date > CURRENT_TIMESTAMP) AND NOT EXISTS (SELECT 1 FROM personal_contacts_channels AS pc_channels2 WHERE pc_channels2.customer_id != pc_channels.customer_id AND pc_channels2.active_from_date < pc_channels.active_from_date AND pc_channels2.active_to_date > pc_channels.active_to_date) ORDER BY (pc_channels.active_to_date - pc_channels.active_from_date) DESC NULLS LAST LIMIT 1;
                        ``` SELECT cc.channel_code, cc.contact_number FROM customer_contact_channels cc WHERE (cc.active_to_date - cc.active_from_date) = (SELECT MAX(active_to_date - active_from_date) FROM customer_contact_channels);
                        ``` SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM orders WHERE order_status = 'Cancelled';
                        ``` SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM orders WHERE order_status = 'Cancelled';
                        ``` SELECT COUNT(*) AS number_of_orders FROM customer_orders WHERE order_details ilike '%Second%time%';
                        ``` SELECT COUNT(*) FROM customer_orders WHERE order_details ilike '%Second%time%';
                        ``` SELECT Addresses.address_content FROM Addresses WHERE (Address = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');
                        ``` SELECT Addresses.address_content FROM Addresses WHERE (Address = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');
                        ``` SELECT customers.customer_name FROM customers WHERE payment_method != 'Cash';
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method != 'Cash';
                        ``` SELECT Customers.customer_name FROM Customers WHERE 'Latatte' not ilike '%LATTE%';
                        ``` SELECT Customers.customer_name FROM Customers WHERE Customers.customer_id NOT IN (SELECT OrderItems.customer_id FROM OrderItems JOIN Products ON OrderItems.product_id = Products.product_id WHERE Products.product_name ILIKE '%Latatte%') ORDER BY Customers.customer_name NULLS LAST;
                        ``` SELECT Customers.customer_name FROM Customers WHERE customer_id NOT IN (SELECT OrderItems.customer_id FROM OrderItems);
                        ``` SELECT Customers.customer_name FROM Customers WHERE customer_id NOT IN (SELECT order_details.customer_id FROM order_details);
                        ``` SELECT COUNT(*) AS total_artists FROM artist;
                        ``` SELECT COUNT(*) AS total_artists FROM artist;
                        ``` SELECT artist.age FROM artist;
                        ``` SELECT CAST(artist.age AS FLOAT) AS age FROM artist;
                        ``` SELECT AVG(age) FROM artist;
                        ``` SELECT AVG(age) AS average_age FROM artist;
                        ``` SELECT a.artist_id, a.famous_title FROM artist a WHERE a.artist ilike '%triumfall%' ORDER BY a.age DESC NULLS LAST;
                        ``` SELECT a.famous_title FROM artist a WHERE a.artist ilike '%Triumfall%' ORDER BY a.age DESC NULLS LAST;
                        ``` SELECT DISTINCT artist.famous_release_date FROM artist;
                        ``` SELECT DISTINCT artist.famous_release_date FROM artist;
                        ``` SELECT date_of_ceremony, result FROM music_festival;
                        ``` SELECT mf.musical_festival, to_date(mf.date_of_ceremony,'YYYY-MM-DD') AS date_of_ceremony, mf.category, mf.volume, mf.result FROM music_festival mf;
                        ``` SELECT category FROM music_festival WHERE result = 'Ascended';
                        ``` SELECT category FROM music_festival WHERE result ilike '%Ascended%' ORDER BY category NULLS LAST;
                        ``` SELECT MAX(Weeks_on_Top) AS max_weeks_on_top, MIN(Weeks_on_Top) AS min_weeks_on_top FROM volume;
                        ``` SELECT MAX(Weeks_on_Top) AS max_weeks_on_top, MIN(Weeks_on_Top) AS min_weeks_on_top FROM volume;
                        ``` SELECT volume.song FROM volume WHERE volume.weeks_on_top > 1;
                        ``` SELECT volume.song FROM volume WHERE weeks_on_top > 1;
                        ``` SELECT volume.song FROM volume ORDER BY volume.song ASC;
                        ``` SELECT volume.volume_id, volume.song FROM volume ORDER BY volume.volume_id ASC;
                        ``` SELECT COUNT(DISTINCT volume.artist_id) AS number_of_artists FROM volume;
                        ``` SELECT COUNT(DISTINCT volume.artist_id) AS num_artists FROM volume;
                        ``` SELECT artist.age, artist.famous_title FROM artist ORDER BY artist.age DESC;
                        ``` SELECT a.artist_id, a.age, rank() OVER (PARTITION BY a.artist_id ORDER BY a.famous_title DESC) AS rank FROM artist a;
                        ``` SELECT a.age, to_number(a.famous_release_date,'YYYYMMDD') AS release_date FROM artist a WHERE a.famous_title IS NOT NULL ORDER BY a.age ASC LIMIT 1;
                        ``` SELECT MAX(artist.famous_release_date) AS earliest_release_date FROM artist;
                        ``` SELECT category, COUNT(*) AS frequency FROM music_festival GROUP BY category ORDER BY frequency DESC NULLS LAST;
                        ``` SELECT category, COUNT(*) AS total_festivals FROM music_festival GROUP BY category;
                        ``` SELECT music_festival.result FROM music_festival GROUP BY music_festival.result ORDER BY COUNT(music_festival.result) DESC NULLS LAST LIMIT 1;
                        ``` SELECT mf.result, COUNT(*) AS frequency FROM music_festival mf GROUP BY mf.result ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT category FROM music_festival GROUP BY category HAVING COUNT(ID) > 1;
                        ``` SELECT DISTINCT category FROM music_festival GROUP BY category HAVING COUNT(id) > 1;
                        ``` SELECT volume.song, MAX(volume.weeks_on_top) AS max_weeks_on_top FROM volume GROUP BY volume.song ORDER BY max_weeks_on_top DESC NULLS LAST;
                        ``` SELECT volume.song, MAX(volume.weeks_on_top) AS max_weeks_on_top FROM volume GROUP BY volume.song ORDER BY max_weeks_on_top DESC NULLS LAST;
                        ``` SELECT a.artist_id, a.artist, f.famous_title FROM artist AS a LEFT JOIN album AS f ON a.artist_id = f.artist_id WHERE f.album_id IS NULL;
                        ``` SELECT a.artist_id, a.famous_title FROM artist a LEFT JOIN volume v ON a.artist_id = v.artist_id WHERE v.artist_id IS NULL;
                        ``` SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Ascended';
                        ``` SELECT music_festival.date_of_ceremony FROM music_festival WHERE music_festival.category = 'Best Song' AND music_festival.result = 'Ascended';
                        ``` SELECT MIN(volume_id).issue_date FROM volume WHERE weeks_on_top = (SELECT MIN(weeks_on_top) FROM volume);
                        ``` SELECT volume.issue_date FROM volume ORDER BY volume.weeks_on_top ASC LIMIT 1;
                        ``` SELECT COUNT(DISTINCT volume.artist_id) AS number_of_artists FROM volume;
                        ``` SELECT COUNT(DISTINCT volume.artist_id) AS number_of_artists FROM volume;
                        ``` SELECT mf.musual, COUNT(*) OVER (PARTITION BY mf.result) AS total_festivals_with_that_result FROM music_festival mf;
                        ``` SELECT category, COUNT(*) AS total_festivals FROM music_festival GROUP BY category ORDER BY total_festivals DESC NULLS LAST;
                        ``` SELECT COUNT(*) AS total_roller_coasters FROM roller_coaster;
                        ``` SELECT roller_coaster.name FROM roller_coaster ORDER BY roller_coaster.length ASC;
                        ``` SELECT rollers_coaster.length AS length, rollers_coaster.heath AS height FROM rollers_coaster;
                        ``` SELECT country.name FROM country WHERE country.languages not ilike '%German%' ORDER BY country.name NULLS LAST;
                        ``` SELECT roller_coaster.status FROM roller_coaster WHERE (roller_coaster.length > 3300 OR roller_coaster.speed > 100) ;
                        ``` SELECT roller_coaster.speed FROM roller_coaster ORDER BY roller_coaster.length DESC NULLS LAST LIMIT 1;
                        ``` SELECT AVG(Speed::FLOAT) AS average_speed FROM roller_coaster;
                        ``` SELECT status, COUNT(Roller_Coaster_ID) AS number_of_coasters FROM roller_coaster GROUP BY status;
                        ``` SELECT status, COUNT(*) AS frequency FROM roller_coaster GROUP BY status ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT roller_coaster.status FROM roller_coaster GROUP BY roller_coaster.status HAVING COUNT(roller_coaster.roller_coaster_id) > 2;
                        ``` SELECT roller_coaster.park FROM roller_coaster WHERE roller_coaster.speed = (SELECT MAX(roller_coaster.speed) FROM roller_coaster);
                        ``` SELECT COUNT(DISTINCT c.country_id) AS number_of_countries FROM country c JOIN population p ON c.country_id = p.country_id WHERE p.population > 3000;
                        ``` SELECT COUNT(DISTINCT rank) AS number_of_ranks FROM captain;
                        ``` SELECT COUNT(DISTINCT rank) AS number_of_ranks FROM captain;
                        ``` SELECT captain.rank, COUNT(*) AS total_captains FROM captain GROUP BY captain.rank;
                        ``` SELECT captain.rank, COUNT(*) AS total_captains FROM captain GROUP BY captain.rank;
                        ``` SELECT captain.rank, COUNT(*) AS number_of_captains FROM captain WHERE age < '50' GROUP BY captain.rank;
                        ``` SELECT captain.rank, COUNT(*) AS total_captains FROM captain WHERE age < '50' GROUP BY captain.rank;
                        ``` SELECT c.name, CAST(c.age AS FLOAT) AS age_cast FROM captain c ORDER BY age_cast ASC;
                        ``` SELECT captain.name FROM captain ORDER BY captain.age DESC;
                        ``` SELECT captain.name, captain.class, captain.rank FROM captain;
                        ``` SELECT captain.name, captain.class, captain.rank FROM captain;
                        ``` SELECT captain.rank FROM captain GROUP BY captain.rank ORDER BY COUNT(captain.rank) DESC NULLS LAST LIMIT 1;
                        ``` SELECT captain.rank FROM captain GROUP BY captain.rank ORDER BY COUNT(captain.captain_id) ASC NULLS LAST LIMIT 1;
                        ``` SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(captain.captain_id) > 2;
                        ``` SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(captain.captain_id) > 2;
                        ``` SELECT captain.name FROM captain WHERE captain.rank IN ('Midshipman', 'Lieutenant');
                        ``` SELECT captain.name FROM captain WHERE captain.rank IN ('Midshipman', 'Lieutenant');
                        ``` SELECT captain.class, AVG(cast(captain.age AS FLOAT)), MIN(cast(captain.age AS FLOAT)) FROM captain GROUP BY captain.class;
                        ``` SELECT captain.class, AVG(cast(captain.age AS FLOAT)), MIN(cast(captain.age AS FLOAT)) FROM captain GROUP BY captain.class;
                        ``` SELECT c.rank FROM captain c WHERE c.class IN ('Cutter', 'Armed schooner') GROUP BY c.rank HAVING COUNT(DISTINCT c.class) = 2;
                        ``` SELECT captain.rank FROM captain WHERE captain.class IN ('Cutter', 'Armed schooner') ORDER BY captain.rank NULLS LAST;
                        ``` SELECT c.rank FROM captain c WHERE c.ship_id NOT IN (SELECT s.ship_id FROM ship s JOIN captain ca ON s.captain_id = ca.captain_id AND s.class = 'Third') AND c.class = 'Period';
                        ``` SELECT c.captain_id, c.name, CAST(r.rank AS FLOAT) AS rank FROM captain c JOIN rating r ON c.captain_id = r.captain_id WHERE NOT EXISTS (SELECT 1 FROM captain cc WHERE cc.ship_id = c.ship_id AND cc.class = 'Third-rate' AND cc.rank > 'Third')
                        ``` SELECT c.name FROM captain c WHERE c.age = (SELECT MIN(age) FROM captain);
                        ``` SELECT c.name FROM captain c WHERE c.age = (SELECT MIN(age) FROM captain);
                        ``` SELECT COUNT(*) AS total_ships FROM ship;
                        ``` SELECT COUNT(*) AS total_ships FROM ship;
                        ``` SELECT s.name, s.type, s.flag FROM ship s WHERE s.built_year = (SELECT MAX(built_year) FROM ship);
                        ``` SELECT s.name, s.type, s.flag FROM ship s WHERE s.built_year = (SELECT MAX(built_year) FROM ship);
                        ``` SELECT s.name, COUNT(*) AS ship_count FROM ship s GROUP BY s.name;
                        ``` SELECT s.name, COUNT(*) AS total_ships FROM ship s GROUP BY s.name;
                        ``` SELECT s.name, COUNT(*)::FLOAT / (SELECT COUNT(*) FROM ship) AS fraction_of_ships_with_given_flag FROM ship s GROUP BY s.name ORDER BY fraction_of_ships_with_given_flag DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_ships_with_flag, s.name FROM ship s GROUP BY s.flag ORDER BY total_ships_with_flag DESC NULLS LAST LIMIT 1;
                        ``` SELECT s.name FROM ship s ORDER BY s.built_year ASC, s.class ASC;
                        ``` SELECT Ship.Name, Ship.Built_Year, Ship.Class FROM Ship ORDER BY Ship.Built_Year NULLS LAST, Ship.Class NULLS LAST;
                        ``` SELECT DISTINCT s.type FROM ship s WHERE s.flag IN ('Panama', 'Malta') GROUP BY s.type HAVING COUNT(s.flag) = 2;
                        ``` SELECT DISTINCT Ship.Type FROM Ship WHERE (Ship.Flag = 'Panama' AND Ship.flag = 'Malta') GROUP BY Ship.type;
                        ``` SELECT MAX(Built_Year) AS max_built_year FROM Ship;
                        ``` SELECT MAX(Ship.Built_Year) AS max_built_year FROM Ship;
                        ``` SELECT s.name, c.class FROM ship AS s LEFT JOIN captain AS c ON s.ship_id = c.ship_id WHERE c.ship_id IS NULL;
                        ``` SELECT s.name, c.class FROM ship AS s LEFT JOIN captain AS c ON s.ship_id = c.ship_id WHERE c.ship_id IS NULL;
                        ``` SELECT s.name, s.flag FROM ship s WHERE NOT EXISTS (SELECT 1 FROM captain c WHERE c.midshipman_rank IS NOT NULL AND s.ship_id = c.ship_id);
                        ``` SELECT s.name, s.type FROM ship s LEFT JOIN captain c ON s.ship_id = c.ship_id WHERE c.rank != 'Midshipman' AND c.ship_id IS NULL;
                        ``` SELECT MAX(year) AS max_year, host_city FROM architected_city GROUP BY host_city ORDER BY max_year DESC LIMIT 1;
                        ``` SELECT MAX(year) AS latest_year, host_city FROM organized_city GROUP BY host_city ORDER BY latest_year DESC LIMIT 1;
                        ``` SELECT match.match_id FROM match WHERE "Competition" ILIKE '%"1994%FIFA%World%Cup%'%';
                        ``` SELECT Match_ID FROM match WHERE "Competition" ILIKE '%"1994%FIFA%World%Cup%'
                        ``` SELECT city.city_id, city.hanzi, city.hanyu_pinyin, city.regional_population FROM city ORDER BY city.regional_population DESC NULLS LAST LIMIT 3;
                        ``` SELECT city.city_id, city.hanzi, city.hanyu_pinyin, city.regional_population FROM city ORDER BY city.regional_population DESC NULLS LAST LIMIT 3;
                        ``` SELECT city.city, MIN(city.gpl) AS min_gpl FROM city GROUP BY city.city;
                        ``` SELECT c.city, MIN(c.gdp) AS min_gdp FROM city c GROUP BY c.city;
                        ``` SELECT city.city_id, city.hanzi FROM city WHERE city.regional_population > 10000000;
                        ``` SELECT city.city FROM city WHERE city.regional_population > 10000000;
                        ``` SELECT city.city_id, city.hanzi FROM city WHERE (city.regional_population > 8000000 OR city.regional_population < 5000000) AND city.gdp = 1;
                        ``` SELECT city.city_id, city.hanzi FROM city WHERE city.regional_population > 8000000 OR city.regional_population < 5000000;
                        ``` SELECT competition FROM match GROUP BY competition;
                        ``` SELECT match.competition, COUNT(*) AS total_matches FROM match GROUP BY match.competition;
                        ``` SELECT venue FROM match ORDER BY date DESC;
                        ``` SELECT venue FROM match ORDER BY date DESC;
                        ``` SELECT MAX(city.gpl) AS max_gpl FROM city;
                        ``` SELECT MAX(city.gpl) AS max_gpl FROM city ORDER BY city.regional_population DESC LIMIT 1;
                        ``` SELECT individuals.individual_first_name, individuals.individual_middle_name, individuals.individual_last_name FROM individuals ORDER BY individuals.individual_last_name ASC;
                        ``` SELECT Individuals.individual_first_name, Individuals.individual_middle_name, Individuals.individual_last_name FROM Individuals ORDER BY Individuals.individual_last_name;
                        ``` SELECT Forms.form_type_code FROM Forms GROUP BY Forms.form_type_code;
                        ``` SELECT Forms.form_type_code FROM Forms GROUP BY Forms.form_type_code;
                        ``` SELECT Parties.payment_method_code, Parties.party_phone FROM Parties WHERE Parties.party_email = 'enrico09@example.com';
                        ``` SELECT parties.payment_method_code, parties.party_phone FROM parties WHERE parties.party_email = 'enrico09@example.com';
                        ``` SELECT Organizations.figure_name FROM Organizations ORDER BY Organizations.date_formed NULLS LAST;
                        ``` SELECT Organizations.figure_name FROM Organizations ORDER BY Organizations.date_formed ASC;
                        ``` SELECT organizations.organization_name FROM organizations ORDER BY organizations.date_formed ASC LIMIT 1;
                        ``` SELECT organizations.formation_name FROM organizations ORDER BY organizations.date_formed DESC LIMIT 1;
                        ``` SELECT COUNT(service_id) AS number_of_services FROM Services;
                        ``` SELECT COUNT(service_id) AS total_services FROM Services;
                        ``` SELECT Services.service_name FROM Services WHERE Services.service_id IS NULL;
                        ``` SELECT Services.service_name FROM Services WHERE Services.service_id IS NULL;
                        ``` SELECT a.town_city, a.state_province_county FROM Addresses AS a;
                        ``` SELECT Addresses.town_city, Addresses.state_province_county FROM Addresses;
                        ``` SELECT COUNT(*) FROM Addresses WHERE state_province_county = 'Carolina';
                        ``` SELECT COUNT(DISTINCT town_city) FROM Addresses WHERE state_province_county = 'Colorado';
                        ``` SELECT Parties.payment_method_code FROM Parties GROUP BY Parties.payment_method_code HAVING COUNT(Parties.party_id) > 3;
                        ``` SELECT DISTINCT Parties.payment_method_code FROM Parties GROUP BY Parties.payment_method_code HAVING COUNT(Parties.party_id) > 3;
                        ``` SELECT Organizations.figure_name FROM Organizations WHERE Organizations.figure_name ilike '%Party%';
                        ``` SELECT Organizations.figure_name FROM Organizations WHERE 'Party' ilike '%Organizations.figure_name%';
                        ``` SELECT COUNT(DISTINCT Parties.payment_method_code) AS number_of_payment_methods FROM Parties;
                        ``` SELECT COUNT(DISTINCT Parties.payment_method_code) AS num_payment_methods FROM Parties;
                        ``` SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.zip_postcode = '6862 Kaitlyn Knolls';
                        ``` SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.period_1_number_building ilike '%6862%Kaitlyn%Knolls%';
                        ``` SELECT COUNT(*) AS total_drivers FROM driver;
                        ``` SELECT d.name, d.home_city, d.age FROM drivers AS d;
                        ``` SELECT party, COUNT(driver_id) AS driver_count FROM drivers GROUP BY party;
                        ``` SELECT d.name FROM drivers d ORDER BY d.age DESC;
                        ``` SELECT DISTINCT driver.home_city FROM drivers;
                        ``` SELECT d.home_city, COUNT(*) AS driver_count FROM driver d GROUP BY d.home_city ORDER BY driver_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT party.name FROM party JOIN driver ON party.id = driver.driver_id WHERE home_city = 'Hartford' AND age > 40;
                        ``` SELECT distinct d.home_city FROM drivers d WHERE d.age > 40 GROUP BY d.home_city HAVING COUNT(d.driver_id) >= 2;
                        ``` SELECT DISTINCT home_city FROM driver WHERE age >= 40;
                        ``` SELECT d.name FROM drivers d WHERE d.driver_id NOT IN (SELECT s.driver_id FROM school_buses s);
                        ``` SELECT school.type FROM school WHERE school.school_id IN (SELECT school1.school_id FROM school AS school1 JOIN school AS school2 ON school1.school_id != school2.school_id) GROUP BY school.type HAVING COUNT(DISTINCT school.school_id) > 1;
                        ``` SELECT MAX(years_working) AS max_years_working, MIN(years_working) AS min_years_working, AVG(years_working) AS avg_years_working FROM school_bus;
                        ``` SELECT s.school, s.type FROM school AS s LEFT JOIN bus ON s.school_id = b.school_id WHERE b.school_id IS NULL;
                        ``` SELECT COUNT(*) FROM drivers WHERE home_city = 'Hartford' AND age < 40;
                        ``` SELECT driver.name FROM drivers WHERE drivers.home_city = 'Hartford' AND drivers.age < 40;
                        ``` SELECT COUNT(*) FROM flight WHERE velocity > 200;
                        ``` SELECT flight.vehicle_flight_number, flight.date, flight.pilot FROM flight ORDER BY flight.altitude;
                        ``` SELECT a.id, a.country, a.city, a.name FROM airport AS a ORDER BY a.name;
                        ``` SELECT MAX(group_equity_shareholding) AS max_shareholding FROM run_company;
                        ``` SELECT AVG(flight.velocity) AS average_velocity FROM flight WHERE pilot ilike '%Thompson%';
                        ``` SELECT a.name FROM airport a WHERE a.country != 'Iceland';
                        ``` SELECT Type, COUNT(*) AS frequency FROM run_company GROUP BY Type ORDER BY frequency DESC LIMIT 1;
                        ``` SELECT COUNT(DISTINCT a.id) AS number_of_airports FROM airport a JOIN flight f ON a.icao = f.icao JOIN pilot p ON f.pilot_id = p.id WHERE p.name not ilike '%Thompson%';
                        ``` SELECT name FROM airport WHERE name ilike '%international%';
                        ``` SELECT a.country, COUNT(*) AS number_of_airports FROM airport a GROUP BY a.country;
                        ``` SELECT DISTINCT a.country FROM airport a GROUP BY a.country HAVING COUNT(a.id) > 2;
                        ``` SELECT p.name, COUNT(f.id) AS flight_count FROM pilot p JOIN flight f ON p.id = f.pilot GROUP BY p.name ORDER BY flight_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) AS total_accounts FROM Accounts;
                        ``` SELECT COUNT(*) AS account_count FROM Accounts;
                        ``` SELECT a.account_id, a.account_details FROM accounts AS a;
                        ``` SELECT a.account_id, a.statement_id, a.account_details FROM accounts AS a;
                        ``` SELECT COUNT(*) AS total_statements FROM Statements;
                        ``` SELECT COUNT(Statement_ID) AS total_statements FROM Statements;
                        ``` SELECT Statements.Statement_ID, Statements.Statement_Details FROM Statements;
                        ``` SELECT s.statement_id, s.statement_details FROM statements AS s;
                        ``` SELECT a.statement_id, COUNT(a.account_id) AS account_count FROM accounts a GROUP BY a.statement_id;
                        ``` SELECT Accounts.statement_id, COUNT(Accounts.account_id) AS account_count FROM Accounts GROUP BY Accounts.statement_id;
                        ``` SELECT COUNT(Document_ID) AS total_documents FROM Documents;
                        ``` SELECT COUNT(*) AS total_documents FROM Documents;
                        ``` SELECT Documents.Document_Type_Code, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Name ilike '%Noel%CV%' OR Documents.Document_Name ilike '%King%Book%';
                        ``` SELECT Documents.Document_Type_Code, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Name ilike '%Noel%CV%' OR Documents.Document_Name ilike '%King%Book%';
                        ``` SELECT Documents.document_id, Documents.document_name FROM Documents;
                        ``` SELECT Documents.Document_ID, Documents.Document_Name FROM Documents;
                        ``` SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_Type_Code ilike '%BK%';
                        ``` SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'BK';
                        ``` SELECT Documents.project_id, COUNT(*) AS number_of_documents FROM Documents WHERE Document_Type_Code = 'BK' GROUP BY Documents.project_id;
                        ``` SELECT Documents.Project_ID, COUNT(Documents.Document_Type_Code) AS document_count FROM Documents WHERE Documents.Document_Type_Code = 'BK' GROUP BY Documents.Project_ID;
                        ``` SELECT p.project_id, COUNT(d.document_id) AS document_count FROM projects p JOIN documents d ON p.project_id = d.project_id GROUP BY p.project_id;
                        ``` SELECT Documents.Project_ID, COUNT(Documents.Document_ID) AS document_count FROM Documents GROUP BY Documents.Project_ID;
                        ``` SELECT MIN(Project_ID) AS min_project_id FROM Documents;
                        ``` SELECT MIN(Project_ID) AS min_project_id FROM Documents;
                        ``` SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2;
                        ``` SELECT DISTINCT Documents.Project_ID FROM Documents GROUP BY Documents.Project_ID HAVING COUNT(Documents.Document_ID) >= 2;
                        ``` SELECT Documents.Document_Type_Code, COUNT(*) AS total_documents FROM Documents GROUP BY Documents.Document_Type_Code;
                        ``` SELECT Documents.Document_Type_Code, COUNT(*) AS document_count FROM Documents GROUP BY Documents.Document_Type_Code;
                        ``` SELECT Documents.Document_Type_Code, COUNT(Documents.Document_ID) AS total_documents FROM Documents GROUP BY Documents.Document_Type_Code ORDER BY total_documents DESC NULLS LAST LIMIT 1;
                        ``` SELECT Documents.Document_Type_Code, COUNT(*) AS frequency FROM Documents GROUP BY Documents.Document_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Documents.Document_Type_Code FROM Documents GROUP BY Documents.Document_Type_Code HAVING COUNT(Documents.Document_ID) < 3;
                        ``` SELECT Documents.Document_Type_Code FROM Documents GROUP BY Documents.Document_Type_Code HAVING COUNT(Documents.Document_ID) < 3;
                        ``` SELECT ref_document_types.document_type_code, ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types;
                        ``` SELECT ref_document_types.document_type_code, ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types;
                        ``` SELECT Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ilike '%Film%' ;
                        ``` SELECT Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ilike '%Film%';
                        ``` SELECT COUNT(Projects.Project_ID) AS total_projects FROM Projects;
                        ``` SELECT COUNT(Projects.Project_ID) AS number_of_projects FROM Projects;
                        ``` SELECT p.project_id, p.project_details FROM projects AS p;
                        ``` SELECT p.project_id, p.project_details FROM projects AS p;
                        ``` SELECT COUNT(DISTINCT Ref_Budget_Codes.Budget_Type_Code) AS number_of_budget_types FROM Ref_Budget_Codes;
                        ``` SELECT COUNT(Budget_Type_Code) AS total_budget_codes FROM Ref_Budget_Codes;
                        ``` SELECT Ref_Budget_Codes.Budget_Type_Code, Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes;
                        ``` SELECT Ref_Budget_Codes.Budget_Type_Code, Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes;
                        ``` SELECT Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes WHERE Ref_Budget_Codes.Budget_Type_Code = 'ORc';
                        ``` SELECT Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes WHERE Ref_Budget_Codes.Budget_Type_Code = 'ORc';
                        ``` SELECT COUNT(*) AS total_documents_with_expenses FROM Documents_with_Expenses;
                        ``` SELECT COUNT(*) FROM Documents_with_Expenses;
                        ``` SELECT Documents_with_Expenses.document_id FROM Documents_with_Expenses WHERE Documents_with_Expenses.budget_type_code = 'SF';
                        ``` SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses WHERE Documents_with_Expenses.Budget_Type_Code = 'SF';
                        ``` SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code;
                        ``` SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code;
                        ``` SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY document_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT Budget_Type_Code, COUNT(*) AS frequency FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1;
                        ``` SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code not ilike '%Expense%';
                        ``` SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code != 'Expense';
                        ``` SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'CV' AND Documents.Project_ID IS NULL;
                        ``` SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'CV' AND Documents.Other_Details IS NULL;
                        ``` SELECT COUNT(*) AS number_of_documents FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Expenses);
                        ``` SELECT COUNT(*) FROM Documents WHERE Document_Type_Code != 'Expense';
                        ``` SELECT Account_Details FROM Accounts WHERE Account_Details like '%5%' ORDER BY CAST(Account_Details AS FLOAT) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Account_Details FROM Accounts WHERE Statement_ID = 1005 ORDER BY CAST(Account_Details AS FLOAT) DESC NULLS LAST;
                        ``` SELECT COUNT(*) AS total_scientists FROM Scientists;
                        ``` SELECT COUNT(*) AS total_scientists FROM Scientists;
                        ``` SELECT SUM(Hours) AS total_hours FROM Projects;
                        ``` SELECT SUM(Hours) AS total_hours FROM Projects;
                        ``` SELECT COUNT(DISTINCT AssignedTo.Scientist) AS number_of_scientists FROM AssignedTo;
                        ``` SELECT COUNT(DISTINCT AssignedTo.Scientist) AS num_scientists FROM AssignedTo;
                        ``` SELECT COUNT(DISTINCT Code) AS num_projects FROM Projects;
                        ``` SELECT COUNT(DISTINCT Code) AS num_projects FROM Projects;
                        ``` SELECT AVG(Hours) AS average_hours FROM Projects;
                        ``` SELECT AVG(Hours) AS average_hours FROM Projects;
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Hours = (SELECT MAX(Projects.Hours) FROM Projects);
                        ``` SELECT Projects.Name FROM Projects ORDER BY Projects.Hours DESC NULLS LAST LIMIT 1;
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Hours > (SELECT AVG(Projects.Hours) FROM Projects);
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Hours > (SELECT AVG(Projects.Hours) FROM Projects);
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Hours BETWEEN 100 AND 300;
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Hours BETWEEN 100 AND 300;
                        ``` SELECT Scientists.Name FROM Scientists ORDER BY Scientists.Name ASC;
                        ``` SELECT Scientists.Name FROM Scientists ORDER BY Scientists.Name ASC;
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Code IS NULL;
                        ``` SELECT Projects.Name FROM Projects WHERE Projects.Code IS NULL;
                        ``` SELECT Scientists.Name FROM Scientists WHERE Scientists.SSN NOT IN (SELECT ProjectScientists.SSN FROM ProjectScientists);
                        ``` SELECT Scientists.Name FROM Scientists WHERE Scientists.SSN NOT IN (SELECT ProjectsScientists.SSN FROM ProjectsScientists);
                        ``` SELECT COUNT(*) FROM Scientists WHERE SSN NOT IN (SELECT Project_SSN FROM Projects);
                        ``` SELECT COUNT(DISTINCT Scientists.SSN) AS number_of_scientists FROM Scientists LEFT JOIN Projects ON Scientists.SSN = Projects.Scientist_SSN WHERE Projects.Scientist_SSN IS NULL;
                        ``` SELECT Scientists.Name FROM Scientists WHERE Scientists.SSN NOT IN (SELECT ProjectScientists.SSN FROM ProjectScientists) ORDER BY COUNT(ProjectScientists.SSN) DESC NULLS LAST LIMIT 1;
                        ``` SELECT Scientists.Name FROM Scientists WHERE Scientists.SSN NOT IN (SELECT ProjectScientists.SSN FROM ProjectScientists) ORDER BY COUNT(ProjectScientists.SSN) DESC NULLS LAST;
                        ``` SELECT wine.name FROM wine ORDER BY wine.score DESC LIMIT 1;
                        ``` SELECT wine.name FROM wine ORDER BY wine.score DESC NULLS LAST LIMIT 1;
                        ``` SELECT w.winery FROM wine w WHERE w.score = (SELECT MAX(w2.score) FROM wine w2);
                        ``` SELECT w.winery FROM wine w WHERE w.score = (SELECT MAX(score) FROM wine);
                        ``` SELECT wine.name FROM wine WHERE wine.year = 2008;
                        ``` SELECT wine.name FROM wine WHERE wine.year = 2008;
                        ``` SELECT wine.grape, COUNT(*) AS number_of_wines FROM wine GROUP BY wine.grape;
                        ``` SELECT wine.grape, COUNT(wine.no) AS number_of_bottles FROM wine GROUP BY wine.grape;
                        ``` SELECT wine.name, AVG(wine.score) AS average_score FROM wine GROUP BY wine.name;
                        ``` SELECT wine.name, wine.score FROM wine;
                        ``` SELECT appellations.area, appellations.county FROM appellations;
                        ``` SELECT appellations.area, COUNT(*) AS COUNT FROM appellations GROUP BY appellations.area;
                        ``` SELECT wine.price FROM wine WHERE wine.year < 2010;
                        ``` SELECT wine.price FROM wine WHERE wine.year < 2010;
                        ``` SELECT wine.name FROM wine WHERE wine.score > 90;
                        ``` SELECT wine.name FROM wine WHERE wine.score > 90;
                        ``` SELECT COUNT(*) AS total_wines FROM wine WHERE name ilike '%Robert%Biale%winery%';
                        ``` SELECT COUNT(*) AS total_wines FROM wine WHERE name ilike '%Robert%Biale%winery%';
                        ``` SELECT COUNT(*) AS total_appellations FROM appellations WHERE area = 'napa'
                        ``` SELECT COUNT(No) AS total_appellations FROM appellations WHERE County = 'Napa'
                        ``` SELECT wine.grape, COUNT(*) AS number_of_wines FROM wine GROUP BY wine.grape ORDER BY number_of_wines DESC NULLS LAST;
                        ``` SELECT wine.grape, COUNT(wine.no) AS total_wines FROM wine GROUP BY wine.grape ORDER BY total_wines DESC NULLS LAST;
                        ``` SELECT wine.year, AVG(wine.price) AS average_price FROM wine GROUP BY wine.year ORDER BY wine.year NULLS LAST;
                        ``` SELECT region_1.name AS region, AVG(wine.price) AS average_price FROM wine JOIN region ON wine.state = region.code GROUP BY region_1.name;
                        ``` SELECT wine.name FROM wine WHERE wine.price > (SELECT AVG(wine.price) FROM wine WHERE wine.winery = 'John Anthony Winery');
                        ``` SELECT DISTINCT wine.name FROM wine WHERE wine.price > (SELECT MAX(wine.price) FROM wine WHERE name ilike '%John%Anthony%Winer%');
                        ``` SELECT DISTINCT wine.name FROM wine ORDER BY wine.name ASC;
                        ``` SELECT wine.name FROM wine ORDER BY wine.name ASC;
                        ``` SELECT wine.name FROM wine ORDER BY wine.price NULLS LAST;
                        ``` SELECT wine.name FROM wine ORDER BY wine.price ASC;
                        ``` SELECT DISTINCT wine.name FROM wine WHERE (wine.year < 2000 OR wine.year > 2010);
                        ``` SELECT wine.name FROM wine WHERE (wine.year < 2000 OR wine.year > 2010);
                        ``` SELECT DISTINCT wine.winery FROM wine WHERE wine.price BETWEEN 50 AND 100;
                        ``` SELECT DISTINCT wine.winery FROM wine WHERE wine.price BETWEEN 50 AND 100;
                        ``` SELECT AVG(Price), SUM(Cases) FROM wine WHERE Grape = 'Zinfandel' AND Year = 2009;
                        ``` SELECT AVG(price) AS average_price, SUM(cases) AS total_cases FROM wine WHERE grapey = 'Zinfandel' AND state = 'California' AND year = 2009;
                        ``` SELECT MAX(wine.price) AS max_price, MAX(wine.score) AS max_score FROM wine WHERE state = 'St. Helena';
                        ``` SELECT MAX(wine.price), MAX(wine.score) FROM wine WHERE state = 'St. Helena.'
                        ``` SELECT wine.year, MAX(wine.price) AS max_price, MAX(wine.score) AS max_score FROM wine GROUP BY wine.year ORDER BY wine.year NULLS LAST;
                        ``` SELECT wine.year, MAX(wine.price) AS max_price, MAX(wine.score) AS max_score FROM wine GROUP BY wine.year ORDER BY wine.year NULLS LAST;
                        ``` SELECT wine.appelation, AVG(wine.price) AS average_price, AVG(wine.score) AS average_score FROM wine GROUP BY wine.appelation;
                        ``` SELECT AVG(Price), AVG(Score) FROM wine WHERE Appelation = 'Appellation';
                        ``` SELECT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(wine.no) >= 4;
                        ``` SELECT DISTINCT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(wine.no) >= 4;
                        ``` SELECT wine.name FROM wine WHERE wine.year < (SELECT MIN(winey.year) FROM winery);
                        ``` SELECT w.name FROM wine w WHERE w.year < (SELECT MIN(w2.year) FROM wine w2 WHERE w2.winery ilike '%Branner%') ORDER BY w.year NULLS LAST;
                        ``` SELECT wine.name FROM wine WHERE wine.year > 2006 AND wine.price > (SELECT AVG(wine.price) FROM wine WHERE wine.year = 2006);
                        ``` SELECT winery FROM wine WHERE year > 2006 AND price > (SELECT MAX(price) FROM wine WHERE year <= 2006);
                        ``` SELECT wine.grape, wine.winery, wine.year FROM wine WHERE wine.price > 100 ORDER BY wine.year NULLS LAST;
                        ``` SELECT wine.grape, wine.winery, wine.year FROM wine WHERE wine.price > 100 ORDER BY wine.year NULLS LAST;
                        ``` SELECT wine.grape, wine.appealation, wine.name FROM wine WHERE wine.score > 93 ORDER BY wine.name NULLS LAST;
                        ``` SELECT wine.grape, wine.appelation, wine.name FROM wine WHERE score > 93 ORDER BY name NULLS LAST;
                        ``` SELECT wine.name FROM wine WHERE wine.year > 2008 AND wine.state != 'Central' ORDER BY wine.name NULLS LAST;
                        ``` SELECT wine.name FROM wine WHERE wine.year > 2008 AND wine.state != 'Central' ORDER BY wine.name NULLS LAST;
                        ``` SELECT AVG(wine.price) AS average_price FROM wine WHERE state != 'Sonoma';
                        ``` SELECT AVG(wine.price) AS average_price FROM wine WHERE state != 'Sonoma';
                        ``` SELECT COUNT(Station_ID) AS total_stations FROM station;
                        ``` SELECT station.name, station.location, SUM(station_platforms.number_of_platforms) AS total_platforms FROM station JOIN station_platforms ON station.station_id = station_platforms.station_id GROUP BY station.name, station.location;
                        ``` SELECT station.location FROM station;
                        ``` SELECT station.name, SUM(station.total_passengers) AS total_passengers FROM station JOIN station ON station.location != 'London' GROUP BY station.name;
                        ``` SELECT station.name, MAX(station_services.main_service) AS max_service FROM station JOIN station_services ON station.station_id = station_services.station_id GROUP BY station.name ORDER BY MAX(station_services.main_service) DESC NULLS LAST LIMIT 3;
                        ``` SELECT AVG(Total_Passengers) AS average_total_passengers, MAX(Total_Passengers) AS max_total_passengers FROM station WHERE "Location" ILIKE '%London%' OR "Location" ILIKE '%Glasgow%';
                        ``` SELECT a.location, COUNT(a.station_id) AS total_stations, SUM(a.number_of_platforms) AS total_platforms, SUM(a.total_passengers) AS total_passengers FROM station a GROUP BY a.location;
                        ``` SELECT station.location FROM station WHERE (cast(station.number_of_platforms AS FLOAT) >= 15 AND CAST(station.total_passengers AS FLOAT) > 25) GROUP BY station.location;
                        ``` SELECT h.name AS "Station Name" FROM has_station h JOIN station s ON h.station_id = s.station_id WHERE s.number_of_platforms < 15;
                        ``` SELECT a.location, COUNT(a.station_id) AS station_count FROM station a GROUP BY a.location ORDER BY a.station_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT t.name, to_number(t.time,'99999999') AS time, t.service FROM train t;
                        ``` SELECT COUNT(*) AS total_trains FROM train;
                        ``` SELECT train.name, train.service FROM train ORDER BY train.time;
                        ``` SELECT h.name AS "Hospital Name", COUNT(s.station_id) AS "Number of Stations" FROM hospital h JOIN station s ON h.location = s.location GROUP BY h.name HAVING COUNT(s.station_id) = 1;
                        ``` SELECT h.name FROM station h LEFT JOIN train_station t ON h.station_id = t.station_id WHERE t.station_id IS NULL;
                        ``` SELECT station.name, station.location, (station.annual_entry_exit - lag(station.annual_entry_exit) OVER (PARTITION BY station.station_id ORDER BY station.annual_entry_exit)) AS yearly_change FROM station ORDER BY yearly_change NULLS LAST;
                        ``` SELECT Vehicles.vehicle_id FROM Vehicles;
                        ``` SELECT Vehicles.vehicle_id FROM Vehicles;
                        ``` SELECT COUNT(*) AS total_vehicles FROM vehicles;
                        ``` SELECT COUNT(*) AS total_vehicles FROM Vehicles;
                        ``` SELECT Vehicles.vehicle_details FROM Vehicles WHERE Vehicles.vehicle_id = 1;
                        ``` SELECT vehicles.vehicle_id, vehicles.vehicle_details FROM vehicles WHERE vehicles.vehicle_id = 1;
                        ``` SELECT s.first_name, s.middle_name, s.last_name FROM staff AS s;
                        ``` SELECT first_name, middle_name, last_name FROM Staff;
                        ``` SELECT Staff.date_of_birth FROM Staff WHERE Staff.first_name ilike '%Janesa%' AND Staff.last_name ilike '%Sawayn%';
                        ``` SELECT Staff.date_of_birth FROM Staff WHERE Staff.last_name = 'Sawan' AND Staff.first_name = 'Janesa';
                        ``` SELECT Staff.date_joined_staff FROM Staff WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
                        ``` SELECT Staff.date_joined_staff FROM Staff WHERE Staff.first_name = 'Janesa' AND Staff.last_name = 'Sawan';
                        ``` SELECT Staff.date_left_staff FROM Staff WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
                        ``` SELECT Staff.date_left_staff FROM Staff WHERE Staff.first_name ilike '%Janesa%' AND Staff.last_name ilike '%Sawan%';
                        ``` SELECT COUNT(*) AS number_of_staff FROM Staff WHERE first_name ilike '%Ludie%';
                        ``` SELECT COUNT(*) FROM staff WHERE first_name ilike '%Ludie%';
                        ``` SELECT Staff.nickname FROM Staff WHERE Staff.first_name ilike '%Janesa%' AND Staff.last_name ilike '%Sawayn%';
                        ``` SELECT Staff.nickname FROM Staff WHERE Staff.first_name ilike '%Janesa%' AND Staff.last_name ilike '%Sawan%';
                        ``` SELECT COUNT(*) AS total_staff FROM Staff;
                        ``` SELECT COUNT(*) AS total_employees FROM staff;
                        ``` SELECT COUNT(*) AS total_staff FROM Addresses WHERE state_province_county = 'Georgia';
                        ``` SELECT COUNT(*) AS total_employees FROM Addresses WHERE state_province_county = 'Georgia';
                        ``` SELECT Customers.first_name, Customers.last_name FROM Customers;
                        ``` SELECT c.first_name, c.last_name FROM customers AS c;
                        ``` SELECT customers.email_address, customers.date_of_birth FROM customers WHERE customers.first_name ilike '%Carole%' ;
                        ``` SELECT Customers.email_address, Customers.date_of_birth FROM Customers WHERE Customers.first_name ilike '%Carole%' ;
                        ``` SELECT customers.phone_number, customers.email_address FROM customers WHERE customers.amount_outstanding > 2000;
                        ``` SELECT Customers.phone_number, Customers.email_address FROM Customers WHERE Customers.amount_outstanding > 2000;
                        ``` SELECT Customers.customer_status_code, Customers.phone_number, Customers.email_address FROM Customers WHERE (Customers.last_name ilike '%Kohler%' OR customers.first_name ilike '%Marina%') ;
                        ``` SELECT Customers.customer_status_code, Customers.phone_number, Customers.email_address FROM Customers WHERE (Customers.last_name ilike '%Kohler%' OR Customers.first_name ilike '%Marina%') ;
                        ``` SELECT date_of_birth FROM customers WHERE customer_status_code = 'good customer'
                        ``` SELECT customers.date_of_birth FROM customers WHERE customers.customer_status_code = 'good customer';
                        ``` SELECT Customers.date_became_customer FROM Customers WHERE customers.first_name ilike '%Carole%' AND customers.last_name ilike '%Bernhard%' ORDER BY customers.date_became_customer NULLS LAST;
                        ``` SELECT MIN(Customers.date_became_customer) AS earliest_date FROM Customers WHERE Customers.first_name ilike '%Carole%' AND customers.last_name ilike '%Bernhard%';
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM customers GROUP BY customers.customer_status_code;
                        ``` SELECT customers.customer_status_code, COUNT(*) AS total_customers FROM customers GROUP BY customers.customer_status_code;
                        ``` SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM customers GROUP BY customers.customer_status_code ORDER BY customer_count ASC NULLS LAST LIMIT 1;
                        ``` SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM customers GROUP BY customers.customer_status_code ORDER BY customer_count ASC LIMIT 1;
                        ``` SELECT MAX(customers.amount_outstanding) AS max_outstanding, MIN(customers.amount_outstand) AS min_outstand, AVG(customers.amount_outstand) AS avg_outstand FROM customers;
                        ``` SELECT MAX(customers.amount_outstanding) AS max_amount_outstanding, MIN(customers.amount_outstand) AS min_amount_outstand, AVG(customers.amount_outstand) AS average_amount_outstand FROM customers;
                        ``` SELECT c.first_name, c.last_name FROM Customers c WHERE c.amount_outstanding BETWEEN 1000 AND 3000;
                        ``` SELECT customers.first_name, customers.last_name FROM customers WHERE customers.amount_outstanding BETWEEN 1000 AND 3000;
                        ``` SELECT COUNT(*) AS total_customers FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM payments);
                        ``` SELECT COUNT(*) AS total_customers FROM customers;
                        ``` SELECT p.payment_method_code, COUNT(*) AS total_payments FROM customer_payments p GROUP BY p.payment_method_code;
                        ``` SELECT payment_method_code, COUNT(*) AS number_of_payments FROM customer_payments GROUP BY payment_method_code;
                        ``` SELECT COUNT(*) AS total_cancelled_lessons FROM lessons WHERE lesson_status_code = 'CANCELLED';
                        ``` SELECT COUNT(*) AS total_cancelled_lessons FROM lessons WHERE lesson_status_code = 'CANCELLED';
                        ``` SELECT c.last_name FROM customers AS c JOIN staff AS s ON c.last_name = s.last_name;
                        ``` SELECT customers.last_name FROM customers UNION SELECT employees.last_name FROM employees;
                        ``` SELECT s.first_name FROM Staff AS s LEFT JOIN Lesson AS l ON s.staff_id = l.staff_id WHERE l.staff_id IS NULL;
                        ``` SELECT s.first_name FROM staff s LEFT JOIN lesson_staff ls ON s.staff_id = ls.staff_id WHERE ls.staff_id IS NULL;
                        ``` SELECT COUNT(*) AS total_faculty FROM faculty;
                        ``` SELECT COUNT(*) AS total_faculty FROM faculty;
                        ``` SELECT faculty.rank FROM faculty ORDER BY faculty.rank NULLS LAST;
                        ``` SELECT DISTINCT Rank FROM Faculty;
                        ``` SELECT DISTINCT building FROM faculty;
                        ``` SELECT DISTINCT building FROM faculty;
                        ``` SELECT faculty.rank, faculty.fname, faculty.lname FROM faculty ORDER BY faculty.rank NULLS LAST;
                        ``` SELECT faculty.rank, faculty.fname, faculty.lname FROM faculty ORDER BY faculty.rank NULLS LAST;
                        ``` SELECT f.first_name, f.last_name, f.phone FROM faculty f WHERE sex = 'female';
                        ``` SELECT f.fname, l.lname, p.phone FROM faculty f JOIN people p ON f.personid = p.personid WHERE sex = 'female';
                        ``` SELECT faculty.facID FROM faculty WHERE faculty.sex = 'M';
                        ``` SELECT f.facID FROM faculty f WHERE f.sex = 'M';
                        ``` SELECT COUNT(*) FROM faculty WHERE sex = 'female';
                        ``` SELECT COUNT(*) AS total_female_professors FROM faculty WHERE sex = 'Female';
                        ``` SELECT faculty.phone, faculty.room, faculty.building FROM faculty WHERE faculty.fname ilike '%Jerry%' AND faculty.lname ilike '%Prince%';
                        ``` SELECT faculty.phone, faculty.room, faculty.building FROM faculty WHERE faculty.lname ilike '%Jerry%' AND faculty.fname ilike '%Prince%';
                        ``` SELECT COUNT(*) AS number_of_professors FROM faculty WHERE building ilike '%NEB%'
                        ``` SELECT COUNT(*) FROM faculty WHERE building = 'NEB';
                        ``` SELECT f.first_name, f.last_name FROM faculty AS f;
                        ``` SELECT f.fname, l.lname FROM faculty AS f JOIN faculty AS l ON f.building = l.building AND f.room = l.room;
                        ``` SELECT building, COUNT(*) AS num_faculty FROM faculty GROUP BY building;
                        ``` SELECT building, COUNT(*) AS number_of_faculty FROM faculty GROUP BY building ORDER BY number_of_faculty DESC NULLS LAST;
                        ``` SELECT faculty.building, COUNT(*) AS number_of_faculty FROM faculty GROUP BY faculty.building ORDER BY number_of_faculty DESC NULLS LAST LIMIT 1;
                        ``` SELECT MAX(Building) AS max_building FROM Faculty;
                        ``` SELECT DISTINCT building FROM faculty GROUP BY building HAVING COUNT(faculty_id) >= 10;
                        ``` SELECT DISTINCT faculty.building FROM faculty GROUP BY faculty.building HAVING COUNT(faculty.voicid) >= 10;
                        ``` SELECT faculty.rank, COUNT(*) AS number_of_faculty FROM faculty GROUP BY faculty.rank;
                        ``` SELECT Rank, COUNT(*) AS number_of_faculty FROM faculty GROUP BY Rank;
                        ``` SELECT faculty.rank, COUNT(*) AS total_faculty, SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS male_faculty, SUM(CASE WHEN sex = 'Female' THEN 1 ELSE 0 END) AS female_faculty FROM faculty GROUP BY faculty.rank;
                        ``` SELECT Rank, Sex, COUNT(*) AS total_faculty FROM faculty GROUP BY Rank, Sex;
                        ``` SELECT faculty.rank FROM faculty GROUP BY faculty.rank ORDER BY COUNT(faculty.facID) ASC LIMIT 1;
                        ``` SELECT faculty.rank FROM faculty GROUP BY faculty.rank ORDER BY COUNT(faculty.lname) ASC LIMIT 1;
                        ``` SELECT sex, COUNT(*) AS total_count FROM faculty WHERE rank = 'assistant professor' GROUP BY sex;
                        ``` SELECT COUNT(*) FROM faculty WHERE rank = 'assistant professor' AND (sex = 'male' OR sex = 'female');
                        ``` SELECT f.facID FROM faculty AS f LEFT JOIN advises_students AS a ON f.facID = a.facID WHERE a.facID IS NULL;
                        ``` SELECT f.facID FROM faculty AS f LEFT JOIN advises_students AS a ON f.facID = a.facID WHERE a.facID IS NULL;
                        ``` SELECT Activity.activity_name FROM Activity;
                        ``` SELECT Activity.activity_name FROM Activity;
                        ``` SELECT COUNT(actid) AS number_of_activities FROM Activity;
                        ``` SELECT COUNT(*) AS total_activities FROM activity;
                        ``` SELECT COUNT(DISTINCT faculty_participates_in.facid) AS number_of_faculty FROM faculty_participates_in;
                        ``` SELECT COUNT(DISTINCT faculty_participates_in.facid) AS num_faculty_members FROM faculty_participates_in;
                        ``` SELECT f.facID FROM faculty f LEFT JOIN activity_faculty af ON f.facID = af.facID WHERE af.facID IS NULL;
                        ``` SELECT f.facID FROM faculty AS f LEFT JOIN activity_faculty AS af ON f.facID = af.facID WHERE af.facID IS NULL;
                        ``` SELECT f.faculty_id FROM faculty_participates_in fp JOIN faculty f ON fp.facID = f.faculty_id;
                        ``` SELECT f.facID FROM faculty_participates_in fp JOIN faculty f ON fp.facID = f.facID WHERE fp.actid IS NOT NULL AND EXISTS (SELECT 1 FROM advises a WHERE a.advisedBy = f.facID);
                        ``` SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Activity_Student.StuID FROM Activity_Student);
                        ``` SELECT s.stuid FROM student s LEFT JOIN activity_student a ON s.stuid = a.stuid WHERE a.stuid IS NULL;
                        ``` SELECT p.stuid FROM Participates_in p JOIN Students s ON p.stuid = s.id WHERE age(s.dob) < 20;
                        ``` SELECT p.stuid FROM Participates_in p JOIN Students s ON p.stuid = s.id WHERE age(s.dob) < 20;
                        ``` SELECT faculty.fname FROM faculty WHERE faculty.rank NOT IN ('Canoeing', 'Kayaking') AND faculty.sex != 'Male';
                        ``` SELECT faculty.fname FROM faculty WHERE faculty.rank NOT IN ('Canoeing', 'Kayaking') ORDER BY faculty.fname NULLS LAST;
                        ``` SELECT airports.name FROM airports WHERE airports.city ilike '%Goroka%';
                        ``` SELECT a.name FROM airports a WHERE a.city ilike '%Goroka%';
                        ``` SELECT a.name, a.city, a.country, a.elevation FROM airports a WHERE a.city ILIKE '%New%York%';
                        ``` SELECT a.name, a.city, a.country, a.elevation FROM airports a WHERE a.city ilike '%New%York%' ORDER BY a.name NULLS LAST;
                        ``` SELECT COUNT(*) AS number_of_airlines FROM airlines;
                        ``` SELECT COUNT(*) AS total_airlines FROM airlines;
                        ``` SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia';
                        ``` SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia';
                        ``` SELECT MAX(elevation) FROM airports WHERE country = 'Iceland';
                        ``` SELECT MAX(airports.elevation) AS max_elevation FROM airports WHERE airports.country = 'Iceland';
                        ``` SELECT a.name FROM airports a WHERE a.country IN ('Cuba', 'Argentina') ;
                        ``` SELECT a.name FROM airports a WHERE a.country IN ('Cuba', 'Argentina') ;
                        ``` SELECT airlines.country FROM airlines WHERE airlines.name ilike 'Orbit%';
                        ``` SELECT COUNT(*)::FLOAT / NULLIF((SELECT COUNT(*) FROM airlines), 0) AS proportion FROM airlines WHERE name ilike 'Orbit%';
                        ``` SELECT airports.name FROM airports WHERE (airports.x > -50 AND airports.x < 50);
                        ``` SELECT a.name FROM airports a WHERE a.elevation BETWEEN -50 AND 50;
                        ``` SELECT a.country FROM airports a WHERE a.elevation = (SELECT MAX(elevation) FROM airports);
                        ``` SELECT airports.country FROM airports WHERE airports.elevation = (SELECT MAX(airports.elevation) FROM airports);
                        ``` SELECT COUNT(*) FROM airports WHERE name ilike '%international%';
                        ``` SELECT COUNT(*) FROM airports WHERE name ilike '%oteranation%';
                        ``` SELECT DISTINCT airports.city FROM airports WHERE airports.country = 'Greenland';
                        ``` SELECT COUNT(DISTINCT(airports.city)) AS number_of_cities FROM airports WHERE airports.country = 'Greenland';
                        ``` SELECT a.name, a.city, a.country FROM airports AS a WHERE a.elevation = (SELECT MIN(elevation) FROM airports);
                        ``` SELECT airports.name, airports.city, airports.country FROM airports ORDER BY airports.elevation ASC LIMIT 1;
                        ``` SELECT a.name, a.city, a.country FROM airports AS a WHERE a.elevation = (SELECT MAX(elevation) FROM airports);
                        ``` SELECT a.name, a.city, a.country FROM airports AS a WHERE a.elevation = (SELECT MAX(b.elevation) FROM airports AS b);
                        ``` SELECT a.country, COUNT(*) AS num_airlines FROM airlines a GROUP BY a.country ORDER BY num_airlines DESC NULLS LAST LIMIT 1;
                        ``` SELECT a.country, COUNT(*) AS num_airlines FROM airlines a GROUP BY a.country ORDER BY num_airlines DESC LIMIT 1;
                        ``` SELECT a.country, COUNT(*) AS total_active_airlines FROM airlines a WHERE a.active = 'Y' GROUP BY a.country ORDER BY total_active_airlines DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(DISTINCT airlines.country) AS number_of_countries, airlines.country FROM airlines WHERE airlines.active = 'Y' GROUP BY airlines.country ORDER BY number_of_countries DESC NULLS LAST;
                        ``` SELECT country, COUNT(alid) AS num_airlines FROM airlines GROUP BY country ORDER BY num_airlines DESC;
                        ``` SELECT airlines.country, COUNT(*) AS number_of_airlines FROM airlines GROUP BY airlines.country ORDER BY number_of_airlines DESC;
                        ``` SELECT a.country, COUNT(*) AS num_airports FROM airports a GROUP BY a.country ORDER BY num_airports DESC;
                        ``` SELECT a.country, COUNT(*) AS num_airports FROM airports a GROUP BY a.country ORDER BY num_airports DESC;
                        ``` SELECT a.city, COUNT(*) AS num_airports FROM airports a WHERE country = 'United States' GROUP BY a.city ORDER BY num_airports DESC;
                        ``` SELECT a.city, COUNT(*) AS num_airports FROM airports a WHERE country = 'US' GROUP BY a.city ORDER BY num_airports DESC;
                        ``` SELECT DISTINCT a.city FROM airports a WHERE a.country = 'United States' GROUP BY a.city HAVING COUNT(a.apid) > 3;
                        ``` SELECT COUNT(DISTINCT a.city) AS num_cities FROM airports a WHERE a.country = 'United States' GROUP BY a.city HAVING COUNT(a.apid) > 3;
                        ```failure
failure
 SELECT a.city, COUNT(DISTINCT(apid)) AS num_airports FROM airports a GROUP BY a.city HAVING COUNT(DISTINCT apid) > 1;
                        ``` SELECT a.city, COUNT(DISTINCT a.apid) AS num_airports FROM airports a GROUP BY a.city HAVING COUNT(DISTINCT a.apid) > 1;
                        ``` SELECT a.city, COUNT(*) AS num_airports FROM airports a GROUP BY a.city HAVING COUNT(*) > 2 ORDER BY num_airports DESC NULLS LAST;
                        ``` SELECT a.city, COUNT(*) AS num_airports FROM airports a GROUP BY a.city HAVING COUNT(*) > 2 ORDER BY num_airports DESC NULLS LAST;
                        ``` SELECT airports.country, AVG(airports.elevation) AS average_elevation FROM airports GROUP BY airports.country;
                        ``` SELECT a.country, AVG(a.elevation) AS average_elevation FROM airports a GROUP BY a.country;
                        ``` SELECT DISTINCT a.city FROM airports a GROUP BY a.city HAVING COUNT(a.apid) = 2;
                        ``` SELECT DISTINCT a.city FROM airports a JOIN airports b ON a.city = b.city AND a.apid != b.apid WHERE a.city IS NOT NULL;
                        ``` SELECT COUNT(*) AS route_count FROM routes WHERE src_ap = 'United States' AND dst_ap = 'Canada';
                        ``` SELECT COUNT(*) AS number_of_routes FROM routes WHERE src_ap = 'United States' AND dst_ap = 'Canada';
                        ``` SELECT rid FROM routes WHERE src_ap IN ('US', 'United States') AND dst_ap IN ('US', 'United States');
                        ``` SELECT rid FROM routes WHERE src_ap IN ('US', 'United States') AND dst_ap IN ('US', 'United States');
                        ``` SELECT MAX(order_id) AS latest_order_id FROM orders;
                        ``` SELECT MAX(order_id) AS latest_order_id FROM orders;
                        ``` SELECT orders.order_id, customers.customer_id FROM orders JOIN customers ON orders.customer_id = customers.customer_id ORDER BY orders.date_order_placed ASC LIMIT 1;
                        ``` SELECT orders.order_id, customers.customer_id FROM orders JOIN customers ON orders.customer_id = customers.customer_id ORDER BY orders.date_order_placed ASC LIMIT 1;
                        ``` SELECT Shipments.order_id FROM Shipments WHERE Shipments.shipment_tracking_number = '3452';
                        ``` SELECT Shipments.order_id FROM Shipments WHERE Shipments.shipment_tracking_number = '3452';
                        ``` SELECT Order_Items.order_item_id FROM Order_Items WHERE Order_Items.product_id = 11;
                        ``` SELECT Order_Items.order_item_id FROM Order_Items WHERE Order_Items.product_id = 11;
                        ``` SELECT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01';
                        ``` SELECT Shipments.order_id FROM Shipments WHERE Shipments.shipment_date > '2000-01-01';
                        ``` SELECT MAX(s.shipment_id) AS latest_shipment_id FROM Shipments s;
                        ``` SELECT MAX(s.shipment_date) AS latest_shipment_date, o.order_id FROM Shipments s JOIN Orders o ON s.order_id = o.order_id GROUP BY o.order_id;
                        ``` SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC;
                        ``` SELECT Products.product_name FROM Products ORDER BY Products.product_name ASC;
                        ``` SELECT o.order_id FROM orders o;
                        ``` SELECT orders.order_id FROM orders ORDER BY orders.date_order_placed NULLS LAST;
                        ``` SELECT Invoices.invoice_number FROM Invoices WHERE Invoices.invoice_date < '1989-09-03' OR Invoices.invoice_date > '2007-12-25';
                        ``` SELECT Invoices.invoice_number FROM Invoices WHERE Invoices.invoice_date < '1989-09-03' OR Invoices.invoice_date > '2007-12-25';
                        ``` SELECT DISTINCT Invoices.invoice_details FROM Invoices WHERE Invoices.invoice_date BETWEEN '1989-09-03' AND '2007-12-25';
                        ``` SELECT DISTINCT Invoices.invoice_details FROM Invoices WHERE Invoices.invoice_date BETWEEN '1989-09-03' AND '2007-12-25';
                        ``` SELECT CAST(COUNT(CASE WHEN gender = 'female' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_female FROM architect;
                        ``` SELECT a.name, a.nationality, a.id FROM architect AS a WHERE gender = 'M';
                        ``` SELECT AVG(length_feet) AS average_length_in_feet FROM bridge;
                        ``` SELECT m.name, CAST(m.built_year AS text) AS built_year FROM mill m WHERE m.type = 'Grondzoiler';
                        ``` SELECT m.name FROM mill m WHERE m.location != 'Donceel';
                        ``` SELECT bridge.location FROM bridge WHERE bridge.name IN ('Kolob Arch', 'Rainbow Bridge');
                        ``` SELECT mill.name FROM mill WHERE mill.name ilike '%Moulin%';
                        ``` SELECT m.type, COUNT(*) AS total_count FROM mill m GROUP BY m.type ORDER BY total_count DESC NULLS LAST LIMIT 1;
                        ``` SELECT COUNT(*) FROM architect WHERE id not ilike '%mill%' AND CAST(nationality AS integer) < 1850;
                        ``` SELECT COUNT(*) AS number_of_book_club FROM book_club;
                        ``` SELECT COUNT(*) AS total_book_club FROM book_club;
                        ``` SELECT book_title, author_or_editor FROM book_country WHERE year > 1989;
                        ``` SELECT book_country.book_title, author_or_editor FROM book_country WHERE year > 1989;
                        ``` SELECT DISTINCT book_country.publisher FROM book_country;
                        ``` SELECT DISTINCT Publisher FROM book_country;
                        ``` SELECT book_country.year, book_country.book_title, book_country.publisher FROM book_country ORDER BY book_country.year DESC;
                        ``` SELECT book_country.year, book_country.author_or_editor, book_country.publisher FROM book_country ORDER BY book_country.year DESC;
                        ``` SELECT book_country.publisher, COUNT(book_country.book_title) AS book_count FROM book_country GROUP BY book_country.publisher;
                        ``` SELECT book_publisher.publisher, COUNT(book_publisher.book_title) AS number_of_books FROM book_publisher GROUP BY book_publisher.publisher;
                        ``` SELECT book_publisher.publisher, COUNT(book_title.book_title) AS total_books FROM book_publisher JOIN book_title ON book_publisher.publisher = book_title.publisher GROUP BY book_publisher.publisher ORDER BY total_books DESC NULLS LAST LIMIT 1;
                        ``` SELECT book_publisher.publisher FROM book_publisher GROUP BY book_publisher.publisher ORDER BY COUNT(book_publisher.book_publisher_id) DESC NULLS LAST LIMIT 1;
                        ``` SELECT category, COUNT(*) AS total_books FROM book_category GROUP BY category;
                        ``` SELECT book_category.category, COUNT(*) AS number_of_books FROM book_category JOIN book_country ON book_category.book_country = book_country.book_country_id GROUP BY book_category.category;
                        ``` SELECT category FROM book_category WHERE category IN (SELECT category FROM book_category GROUP BY category HAVING COUNT(book_title) >= 2 AND year > 1989);
                        ``` SELECT category FROM book_category WHERE category IN (SELECT category FROM book_category GROUP BY category HAVING COUNT(book_title) >= 2 AND year > 1989);
                        ``` SELECT DISTINCT publisher FROM book_publisher WHERE year IN (1989, 1990) ORDER BY publisher NULLS LAST;
                        ``` SELECT DISTINCT book_publisher.publisher FROM book_publisher WHERE year IN (1989, 1990);
                        ``` SELECT DISTINCT publisher FROM book_country WHERE year != 1989;
                        ``` SELECT DISTINCT publisher FROM book_publisher WHERE year != 1989;
                        ``` SELECT movie.title, movie.year, movie.director FROM movie ORDER BY movie.budget_million DESC;
                        ``` SELECT movie.title, movie.year, movie.director FROM movie ORDER BY movie.budget_million DESC;
                        ``` SELECT COUNT(DISTINCT director) AS num_directors FROM movie;
                        ``` SELECT COUNT(DISTINCT director) AS num_directors FROM movie;
                        ``` SELECT movie.title, movie.director FROM movie WHERE movie.year <= 2000 ORDER BY movie.gross_worldwide DESC LIMIT 1;
                        ``` SELECT movie.title, movie.director FROM movie WHERE movie.year <= 2000 ORDER BY movie.gross_worldwide DESC LIMIT 1;
                        ``` SELECT DISTINCT movie.director FROM movie WHERE movie.year IN (1999, 2000) GROUP BY movie.director HAVING COUNT(DISTINCT CASE WHEN movie.year = 1999 THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN movie.year = 2000 THEN 1 END) > 0;
                        ``` SELECT DISTINCT movie.director FROM movie WHERE movie.year IN (1999, 2000) GROUP BY movie.director HAVING COUNT(DISTINCT CASE WHEN movie.year = 1999 THEN movie.movie_id END) = COUNT(DISTINCT CASE WHEN movie.year = 2000 THEN movie.movie_id END);
                        ``` SELECT DISTINCT movie.director FROM movie WHERE movie.year IN (1999, 2000);
                        ``` SELECT DISTINCT movie.director FROM movie WHERE movie.year IN (1999, 2000);
                        ``` SELECT AVG(budget_million) AS average_budget, MAX(budget_million) AS max_budget, MIN(budget_million) AS min_budget FROM movie WHERE year < 2000;
                        ``` SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS max_budget, MIN(Budget_million) AS min_budget FROM movie WHERE year < 2000;
                        ```