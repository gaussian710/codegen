SELECT COUNT(*) FROM head WHERE age > 56
SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age
SELECT DATE_PART(YEAR, CAST(creation AS DATE)) AS creation_year, name, budget_in_billions FROM department
SELECT MAX(budget_in_billions) AS max_budget, MIN(department_id) AS min_budget FROM department
SELECT AVG(department.num_employees) AS average_number_of_employees FROM department WHERE department.ranking BETWEEN 10 AND 15
SELECT head.name FROM head WHERE head.born_state <> 'California'
SELECT DISTINCT head.born_state FROM head GROUP BY head.born_state HAVING COUNT(head.head_id) >= 3
SELECT DATE_PART('year', creation) AS YEAR, COUNT(*) AS num_departments FROM department GROUP BY YEAR ORDER BY num_departments DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_acting_status FROM management
SELECT COUNT(*) AS num_departments FROM department WHERE Ranking > 0
SELECT head.head_id, head.name FROM head WHERE head.name ILIKE '%Ha%'
SELECT COUNT(*) AS number_of_farms FROM farm
SELECT COUNT(*) FROM farm
SELECT farm.farm_id, SUM(farm.total_horses) AS total_horses FROM farm GROUP BY farm.farm_id ORDER BY total_horses ASC NULLS FIRST
SELECT farm.farm_id, SUM(farm.total_horses) AS total_horses FROM farm GROUP BY farm.farm_id ORDER BY total_horses ASC NULLS FIRST
SELECT farm_competition.hosts FROM farm_competition WHERE "Theme" <> 'Aliens'
SELECT farm_competition.hosts FROM farm_competition WHERE "Theme" <> 'Aliens'
SELECT farm_competition.year, farm_competition.theme FROM farm_competition ORDER BY farm_competition.year ASC NULLS FIRST
SELECT farm_competition.year, farm_competition.theme FROM farm_competition ORDER BY farm_competition.year ASC NULLS FIRST
SELECT AVG(farm.working_horses) AS average_working_horses FROM farm WHERE farm.total_horses > 5000
SELECT AVG(farm.working_horses) AS average_working_horses FROM farm WHERE farm.total_horses > 5000
SELECT MAX(Cattle) AS max_cattle, MIN(Cattle) AS min_cattle FROM farm
SELECT MAX(Cows) AS max_cattle, MIN(Cows) AS min_cattle FROM farm
SELECT COUNT(DISTINCT city.status) AS number_of_status FROM city
SELECT COUNT(DISTINCT city.status) AS number_of_status FROM city
SELECT city.official_name FROM city ORDER BY city.population DESC NULLS LAST
SELECT city.official_name FROM city ORDER BY city.population DESC NULLS LAST
SELECT city.official_name, city.status FROM city ORDER BY city.population DESC NULLS LAST LIMIT 1
SELECT c.official_name, c.status FROM city AS c WHERE c.population = (SELECT MAX(population) FROM city)
SELECT city.status, AVG(city.population) AS average_population FROM city GROUP BY city.status ORDER BY city.status
SELECT c.status, AVG(c.population) AS average_population FROM city AS c GROUP BY c.status
SELECT city.status, COUNT(city.official_name) AS number_of_cities FROM city GROUP BY city.status ORDER BY number_of_cities DESC NULLS LAST
SELECT city.status, COUNT(*) AS frequency FROM city GROUP BY city.status ORDER BY frequency ASC
SELECT city.official_name, COUNT(*) AS frequency FROM city GROUP BY city.official_name ORDER BY frequency DESC NULLS LAST
SELECT city.status, COUNT(*) AS frequency FROM city GROUP BY city.status ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT city.official_name FROM city WHERE city.status = 'Active' AND NOT city.city_id IN (SELECT DISTINCT competition.city_id FROM competition)
SELECT city.official_name FROM city WHERE NOT city.city_id IN (SELECT farm_competition.city_id FROM farm_competition)
SELECT city.status FROM city WHERE city.population > 1500 AND city.population < 500
SELECT DISTINCT city.status FROM city WHERE (city.population > 1500 OR city.population < 500) GROUP BY city.status
SELECT city.official_name FROM city WHERE city.population > 1500 OR city.population < 500
SELECT city.official_name FROM city WHERE city.population > 1500 OR city.population < 500
SELECT city.census_ranking FROM city WHERE city.status <> 'Village'
SELECT city.census_ranking FROM city WHERE city.status <> 'Village'
SELECT Student_Course_registrations.student_id FROM Student_Course_Registrations GROUP BY Student_Course_registrations.student_id HAVING COUNT(Student_Course_registrations.course_id) = (SELECT MIN(COUNT) FROM Student_Course_Registrations)
SELECT s.student_id FROM Student_Course_Registrations AS r JOIN Students ON r.student_id = s.student_id GROUP BY s.student_id HAVING COUNT(r.course_id) = (SELECT MIN(num_of_courses) FROM (SELECT student_id, COUNT(course_id) AS num_of_courses FROM Student_Course_Registrations GROUP BY student_id) AS subquery)
 SELECT Students.student_id FROM Students WHERE Students.student_details ilike '%never%attends%courses%'
                        ```SELECT Students.student_id FROM Students WHERE NOT Students.student_details ILIKE '%course%' ORDER BY Students.student_id
SELECT DISTINCT student_id FROM Student_Course_Attendance
SELECT DISTINCT student_id FROM Student_Course_Attendance
SELECT MAX(assessment_date) AS latest_assessment_date, candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY latest_assessment_date DESC NULLS LAST LIMIT 1
SELECT MAX(assessment_date) AS latest_assessment_date, candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY latest_assessment_date DESC NULLS LAST LIMIT 1
SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass'
 SELECT candidate_id FROM Candidate_Assessments WHERE assessment_outcome_code = 'Pass'
                        ```SELECT Student_Course_attendance.student_id FROM Student_Course_Attendance WHERE Student_Course_attendance.course_id = 301
SELECT Student_Course_Attendance.student_id FROM Student_Course_Attendance WHERE Student_Course_attendance.course_id = 301
SELECT s.student_id FROM Student_Course_attendance JOIN Student_Course_Attendance AS s ON sa.student_id = s.student_id WHERE sa.course_id = 301 ORDER BY sa.date_of_attendance DESC NULLS LAST LIMIT 1
                        SELECT s.student_id FROM Student_Course_scattendance s JOIN Course c ON s.course_id = c.course_id WHERE c.course_name = '301' ORDER BY s.date_of_attendance DESC;                    
                        ```SELECT course_name FROM Courses ORDER BY course_name ASC NULLS FIRST
SELECT course_name FROM Courses ORDER BY course_name ASC NULLS FIRST
SELECT People.first_name FROM People ORDER BY People.first_name ASC NULLS FIRST
SELECT People.first_name FROM People ORDER BY People.first_name ASC NULLS FIRST
SELECT student_id FROM Student_Course_registrations UNION SELECT student_id FROM Student_Course_Registrations
SELECT student_id FROM Student_Course_registrations UNION SELECT student_id FROM Student_Course_Registrations
SELECT DISTINCT Student_Course_registrations.course_id FROM Student_Course_Registrations WHERE Student_Course_registrations.student_id = 121
 SELECT DISTINCT course_id FROM Student_Course_registrations WHERE student_id = 121 UNION ALLERECT COURSE_ID FROM Course_Attances WHERE student_id = 121;
                        ``` SELECT s.student_id, s.first_name, s.last_name, COUNT(sc.course_id) AS num_courses_registered FROM Student_Course_registrations scr JOIN Students s ON sr.student_id = s.student_id LEFT JOIN Course_Attanceances ca ON ca.course_id = sr.course_id AND ca.student_id = sr.student_id WHERE ca.course_id IS NULL GROUP BY s.student_id, s.first_name, s.last_name;
SELECT s.student_id, s.first_name, s.last_name FROM Student_Course_registrations r LEFT JOIN Students s ON r.student_id = s.student_id WHERE r.course_id IS NULL;
                        ```SELECT weather.date FROM weather WHERE weather.max_temperature_f > '85' ORDER BY weather.date
SELECT weather.date FROM weather WHERE weather.max_temperature_f > '85' ORDER BY weather.max_temperature_f DESC NULLS LAST
SELECT station.name FROM station WHERE station.lat < '37.5'
SELECT station.name FROM station WHERE station.lat < 37.5
SELECT c.city, MAX(s.lat) AS max_lat FROM station JOIN station AS c ON s.city = c.name GROUP BY c.city
SELECT station.city, MAX(station.lat) AS max_lat FROM station JOIN station_station ON station.id = station_station.dock_count GROUP BY station.city
SELECT r.start_station_id, r.end_station_id FROM trip AS r ORDER BY r.id ASC NULLS FIRST LIMIT 3
SELECT r.id AS ride_id, r.start_station_name AS start_station, r.end_station_name AS end_station, ROW_NUMBER() OVER (ORDER BY r.id NULLS FIRST) AS row_num FROM trip AS r ORDER BY r.id ASC NULLS FIRST LIMIT 3
 SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE "city" ILIKE '%San%Jose%'
                        ```SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose'
SELECT MIN(duration) AS min_duration FROM trip
SELECT MIN(duration) AS shortest_duration FROM trip
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = 636
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = 636
SELECT weather.zip_code, AVG(weather.mean_temperature_f) AS avg_mean_temperature_f FROM weather GROUP BY weather.zip_code
SELECT weather.zip_code, AVG(weather.mean_temperature_f) AS average_mean_temperature FROM weather WHERE weather.date ILIKE '8%' GROUP BY weather.zip_code
SELECT COUNT(DISTINCT bike_id) AS num_bikes FROM trip
SELECT COUNT(DISTINCT bike_id) AS number_of_bike_ids FROM trip
SELECT COUNT(DISTINCT city) AS num_cities FROM station
SELECT COUNT(DISTINCT station.city) AS number_of_cities FROM station
SELECT COUNT(*) AS station_count FROM station WHERE city ILIKE '%Mountain%'
SELECT COUNT(*) AS station_count FROM station WHERE city ILIKE '%Mountain View%'
SELECT r.start_station_name, CAST(COUNT(r.id) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM trip WHERE start_date >= '2021-08-01' AND end_date <= '2021-08-31'), 0) AS ratio FROM trip AS r GROUP BY r.start_station_name ORDER BY ratio DESC NULLS LAST LIMIT 1
SELECT start_station_name, start_station_id FROM (SELECT s.start_station_name, s.start_station_id, COUNT(*) AS trip_count, RANK() OVER (PARTITION BY s.start_station_name ORDER BY COUNT(*) DESC NULLS LAST) AS rank FROM trip AS s WHERE CAST(start_date AS DATE) BETWEEN '2017-08-01' AND '2017-08-31' GROUP BY s.start_station_name, s.start_station_id) AS subquery WHERE rank = 1
SELECT r.bike_id FROM trip AS r WHERE r.zip_code = 94002
SELECT MAX(bike_id) AS max_bike_id FROM trip WHERE zip_code = '94002'
SELECT COUNT(*) AS number_of_days FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
SELECT COUNT(*) AS num_days FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8
SELECT station.id FROM station WHERE city = 'San Francisco' AND dock_count / NULLIF(lat, 0) > 10
SELECT station.id FROM station WHERE station.city = 'San Francisco' AND (station.dock_count > 10 OR station.dock_count IS NULL)
SELECT weather.cloud_cover, COUNT(*) AS frequency FROM weather WHERE weather.zip_code = 94107 GROUP BY weather.cloud_cover ORDER BY frequency DESC NULLS LAST LIMIT 3
SELECT weather.cloud_cover, COUNT(*) AS frequency FROM weather WHERE weather.zip_code = 94107 GROUP BY weather.cloud_cover ORDER BY frequency DESC NULLS LAST LIMIT 3
SELECT weather.zip_code, AVG(weather.mean_sea_level_pressure_inches) AS avg_pressure FROM weather GROUP BY weather.zip_code ORDER BY avg_pressure ASC LIMIT 1
SELECT weather.zip_code, AVG(weather.mean_sea_level_pressure_inches) AS avg_mean_sea_level_pressure_inches FROM weather GROUP BY weather.zip_code ORDER BY avg_mean_sea_level_pressure_inches ASC NULLS FIRST LIMIT 1
SELECT AVG(status.bikes_available) AS average_bikes_available FROM status JOIN status ON status.station_id = station.docks_available WHERE station.time <> 'Palo Alto'
SELECT AVG(status.bikes_available) AS average_bikes_available FROM status WHERE NOT status.station_id IN (SELECT station_id FROM status WHERE station.time ILIKE '%Palo%Alto%')
SELECT AVG(station.long) AS average_longitude FROM station AS station WHERE CAST(station.dock_count AS FLOAT) > 10
SELECT AVG(station.long) AS average_longitude FROM station WHERE (SELECT COUNT(bike_stand.dock_count) AS total_bikes FROM station WHERE bike_stand.city = station.id) <= 10
SELECT weather.zip_code, MAX(weather.max_temperature_f) AS max_temp FROM weather WHERE weather.max_temperature_f >= 80 GROUP BY weather.zip_code ORDER BY max_temp DESC NULLS LAST LIMIT 1
SELECT weather.zip_code, MAX(weather.max_temperature_f) AS max_temp, TO_CHAR(MAX(weather.max_temperature_f), 'DD-MM-YYYY') AS max_temp_date FROM weather WHERE weather.max_temperature_f >= 80 GROUP BY weather.zip_code
SELECT weather.zip_code, COUNT(*) AS number_of_times FROM weather WHERE weather.max_wind_speed_mph >= 25 GROUP BY weather.zip_code
SELECT weather.zip_code, COUNT(*) AS number_of_times FROM weather WHERE weather.max_wind_speed_mph >= 25 GROUP BY weather.zip_code
SELECT weather.date, weather.zip_code FROM weather WHERE weather.min_dew_point_f < (SELECT MIN(weather.min_dew_point_f) FROM weather WHERE weather.zip_code = 94107) AND weather.zip_code <> 94107 ORDER BY weather.date
SELECT weather.min_dew_point_f, weather.zip_code FROM weather WHERE weather.min_dew_point_f < (SELECT MIN(weather.min_dew_point_f) FROM weather WHERE zip_code = 94107) AND zip_code IN (SELECT zip_code FROM weather WHERE min_dew_point_f = (SELECT MIN(weather.min_dew_point_f) FROM weather WHERE zip_code = 94107)) GROUP BY weather.min_dew_point_f, weather.zip_code ORDER BY weather.min_dew_point_f
SELECT weather.date FROM weather WHERE weather.zip_code = 94107 AND (weather.mean_visibility_miles > 5 OR weather.precipitation_inches > 0.25) AND (weather.mean_dew_point_f < 30 OR weather.cloud_cover < 80)
SELECT weather.date FROM weather WHERE weather.zip_code <> 94107 AND weather.mean_visibility_miles IS NULL AND weather.max_wind_speed_mph IS NULL
SELECT station.id FROM station WHERE (station.lat > '37.4' AND station.dock_count >= '7') GROUP BY station.id
 SELECT station.id FROM station WHERE (station.lat > '37.4' AND station.dock_count >= '7')
                        ```SELECT h.name, h.lat, h.city FROM station AS h ORDER BY h.lat ASC NULLS FIRST LIMIT 1
SELECT h.name, h.lat, h.city FROM station AS h WHERE h.lat = (SELECT MAX(lat) FROM harbor_hock)
SELECT weather.date, AVG(weather.mean_temperature_f) AS avg_mean_temperature_f, AVG(weather.mean_humidity) AS avg_mean_humidity FROM weather GROUP BY weather.date ORDER BY weather.max_gust_speed_mph DESC NULLS LAST LIMIT 3
 SELECT weather.date, AVG(weather.mean_temperature_f) AS avg_temp_f, AVG(weather.mean_humidity) AS avg_humidity FROM weather GROUP BY weather.date HAVING MAX(weather.max_gust_speed_mph) IN (SELECT MAX(MAX_gust_speed_mph)) FROM weather GROUP BY date, max_gust_speed_mph) ORDER BY avg_temp_f DESC NULLS LAST LIMIT 3;
                        ```SELECT c.name, COUNT(s.id) AS station_count FROM station AS c JOIN station ON c.id = h.city JOIN station ON c.id = s.city GROUP BY c.name HAVING COUNT(s.id) >= 15
SELECT c.city, COUNT(s.id) AS station_count FROM station AS c JOIN station AS s ON c.id = s.lat GROUP BY c.city HAVING COUNT(s.id) >= 15
SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(id) >= 200
SELECT s.id AS station_station_id, s.end_station_name AS start_station_name FROM trip AS s JOIN (SELECT start_station_id, COUNT(*) AS trip_count FROM trip GROUP BY start_station_id) AS c ON s.id = c.start_station_id WHERE c.bike_id >= 200
SELECT weather.zip_code FROM weather WHERE weather.mean_visibility_miles < '10' ORDER BY weather.zip_code
SELECT weather.zip_code FROM weather WHERE weather.mean_visibility_miles < '10' ORDER BY weather.zip_code
SELECT c.city, s.name, ROW_NUMBER() OVER (PARTITION BY c.id ORDER BY s.lat DESC NULLS LAST) AS row_num FROM station AS c JOIN station_station ON c.id = s.dock_count
SELECT c.name, CAST(l.long AS FLOAT) AS long FROM station AS c JOIN station ON c.id = l.city
SELECT weather.date, MAX(weather.cloud_cover) AS max_cloud_cover FROM weather GROUP BY weather.date ORDER BY max_cloud_cover DESC NULLS LAST LIMIT 5
SELECT weather.date, weather.cloud_cover FROM weather ORDER BY weather.cloud_cover DESC NULLS LAST LIMIT 5
SELECT r.id AS "Ride ID", r.duration AS "Duration" FROM trip AS r ORDER BY r.duration DESC NULLS LAST LIMIT 3
WITH trip_durations AS (SELECT id, duration FROM ride WHERE start_date < '2017-01-01' AND end_date > '2017-01-01'), max_duration AS (SELECT MAX(duration) AS max_duration FROM ride_durations) SELECT r.id, r.duration FROM ride_durations JOIN trip AS md ON r.duration = md.max_duration
SELECT DISTINCT start_station_name FROM trip WHERE duration < 100
SELECT DISTINCT start_station_name FROM trip WHERE duration < 100
SELECT weather.zip_code FROM weather WHERE weather.max_dew_point_f < 70 ORDER BY weather.zip_code
SELECT weather.zip_code FROM weather WHERE weather.max_dew_point_f < 70 ORDER BY weather.zip_code
SELECT r.id FROM trip AS r JOIN (SELECT AVG(duration) AS avg_duration FROM trip WHERE zip_code = 94103) AS subquery ON r.duration >= subquery.avg_duration
SELECT r.id FROM trip AS r JOIN station ON r.start_station_id = h.id WHERE h.zip_code = 94103 AND r.duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)
SELECT weather.date FROM weather WHERE weather.mean_sea_level_pressure_inches BETWEEN 30.3 AND 31
SELECT weather.date FROM weather WHERE (weather.mean_sea_level_pressure_inches >= 30.3 AND weather.mean_sea_level_pressure_inches <= 31) GROUP BY weather.date
SELECT weather.date, (MAX(weather.max_temperature_f) - MIN(weather.min_temperature_f)) AS temperature_difference FROM weather GROUP BY weather.date ORDER BY temperature_difference ASC LIMIT 1
SELECT weather.date, (weather.max_temperature_f - weather.min_temperature_f) AS temperature_range FROM weather ORDER BY temperature_range ASC NULLS FIRST LIMIT 1
SELECT weather.zip_code FROM weather WHERE weather.mean_humidity < 70 GROUP BY weather.zip_code HAVING COUNT(weather.date) >= 100
SELECT weather.zip_code FROM weather WHERE weather.mean_humidity < '70' GROUP BY weather.zip_code HAVING COUNT(weather.date) >= '100'
SELECT station.name FROM station WHERE city = 'Palo Alto' AND NOT id IN (SELECT lat FROM trip GROUP BY lat HAVING COUNT(*) > 100)
SELECT station.name FROM station WHERE "city" ILIKE '%Palo%Alto%' AND NOT EXISTS(SELECT 1 FROM trip WHERE installation_date = station.id)
SELECT COUNT(*) AS total_books FROM book
SELECT book.writer FROM book ORDER BY book.writer ASC NULLS FIRST
SELECT book.title FROM book ORDER BY book.issues ASC NULLS FIRST
SELECT book.title, COUNT(book.issues) AS issues_count FROM book WHERE book.writer <> 'Velaine Lee' GROUP BY book.title
SELECT book.title, book.issues FROM book
SELECT publication.publication_date FROM publication ORDER BY publication.price DESC NULLS LAST
SELECT DISTINCT publication.publisher FROM publication WHERE publication.price > '5000000'
SELECT publication.publisher FROM publication ORDER BY publication.price DESC NULLS LAST LIMIT 1
SELECT publication.publication_date FROM publication ORDER BY publication.price ASC LIMIT 3
SELECT DISTINCT publication.publisher FROM publication GROUP BY publication.publisher HAVING COUNT(publication.publication_id) > 1
SELECT publication.publisher, COUNT(publication.book_id) AS num_books FROM publication GROUP BY publication.publisher
SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) DESC NULLS LAST LIMIT 1
SELECT DISTINCT writer FROM book GROUP BY writer HAVING COUNT(book_id) > 1
SELECT book.title FROM book WHERE book.issues IS NULL
SELECT DISTINCT publication.publisher FROM publication WHERE publication.price > 10000000 AND publication.price < 5000000
SELECT COUNT(DISTINCT Publication_Date) AS num_publication_dates FROM publication
SELECT COUNT(DISTINCT Publication_Date) AS number_of_publication_dates FROM publication
SELECT publication.price FROM publication WHERE publication.publisher ILIKE '%Person%' OR publication.publisher ILIKE '%Wiley%'
SELECT COUNT(*) AS total_actors FROM actor
SELECT COUNT(*) AS total_actors FROM actor
SELECT actor.name FROM actor ORDER BY actor.name ASC NULLS FIRST
SELECT actor.name FROM actor ORDER BY actor.name ASC NULLS FIRST
SELECT actor.character, COUNT(actor.actor_id) AS number_of_actors FROM actor GROUP BY actor.character
SELECT a.name, c.character, d.duration FROM actor AS a JOIN character_durations ON a.actor_id = c.actor_id JOIN duration ON c.musical_id = d.musical_id
SELECT actor.name FROM actor WHERE actor.age <> 20
SELECT actor.name FROM actor WHERE actor.age <> 20
SELECT actor.name, actor.character FROM actor ORDER BY actor.age DESC NULLS LAST
SELECT actor.character FROM actor ORDER BY actor.age DESC NULLS LAST
SELECT MAX(age) AS max_age FROM actor
SELECT MAX(age) AS max_age, MIN(duration) AS min_duration FROM actor
SELECT musical.name FROM musical WHERE musical.nominee ILIKE '%Bob%Fosse%' ORDER BY musical.name
SELECT m.name FROM musical AS m JOIN nomine ON m.nominee = j.nominee WHERE j.nominee ILIKE '%Bob%Fosse%'
SELECT DISTINCT musical.nominee FROM musical WHERE musical.award <> 'Tony Award'
SELECT DISTINCT musical.nominee FROM musical WHERE musical.award <> 'Tony Award'
SELECT m.name, COUNT(n.nominee) AS num_nominations FROM musical AS m JOIN nomine ON m.nominee = n.name GROUP BY m.name
SELECT m.nominee, COUNT(*) AS number_of_musicals FROM musical AS m GROUP BY m.nominee
SELECT musical.nominee, COUNT(musical.award) AS total_nominations FROM musical GROUP BY musical.nominee ORDER BY total_nominations DESC NULLS LAST LIMIT 1
SELECT m.nominee, COUNT(*) AS num_musicals FROM musical AS m GROUP BY m.nominee ORDER BY num_musicals DESC NULLS LAST LIMIT 1
SELECT COUNT(Result) AS frequency, Result FROM musical GROUP BY Result ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT musical.result, COUNT(*) AS frequency FROM musical GROUP BY musical.result ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT m.nominee FROM musical AS m GROUP BY m.nominee HAVING COUNT(m.musical_id) > 2
SELECT m.name FROM musical AS m WHERE COUNT(musical_id) > 2
SELECT m.name FROM musical LEFT JOIN musical AS a ON m.musical_id = a.musical_id WHERE a.nominee IS NULL
SELECT m.name FROM musical LEFT JOIN musical AS a ON m.musical_id = a.musical_id WHERE a.nominee IS NULL
SELECT DISTINCT musical.nominee FROM musical WHERE (musical.category ILIKE '%tony%award%' OR musical.category ILIKE '%drama%desk%') AND (musical.category ILIKE '%tony%award%' OR musical.category ILIKE '%drama%desk%')
SELECT DISTINCT musical.name FROM musical WHERE (musical.award = 'Tony' AND musical.category = 'Award') AND (musical.award = 'Drama' AND musical.category = 'Desk')
SELECT Musical.Nominee FROM musical WHERE (Musical.Award = 'Bob Fosse' OR Musical.Award = 'Cleavant Darricks') AND NOT Musical.Category IS NULL
SELECT musical.name FROM musical WHERE (musical.award = 'Bob Fosse' OR musical.category = 'Cleavant Derricks') AND musical.nominee ILIKE '%nominated%for%'
SELECT user_profiles.email FROM user_profiles WHERE user_profiles.name ILIKE '%Mary%'
SELECT user_profiles.partitionid FROM user_profiles WHERE user_profiles.name ILIKE '%Iron%Man%'
SELECT COUNT(*) AS total_users FROM user_profiles
                        SELECT u.username, COUNT(f.f2) AS total_followers FROM users AS u JOIN follows AS f ON u.id = f.f1 GROUP BY u.username;
                        SELECT u.username, COUNT(f.f2) AS total_followers FROM users AS u JOIN follows AS f ON u.id = f.f1 GROUP BY u.username;
                        ```SELECT COUNT(*) AS total_tweets FROM tweets
SELECT COUNT(DISTINCT uid) AS num_users FROM tweets
SELECT user_profiles.name, user_profiles.email FROM user_profiles WHERE user_profiles.name ILIKE '%Swift%'
SELECT user_profiles.name FROM user_profiles WHERE user_profiles.email ILIKE '%superstar%' OR user_profiles.email ILIKE '%edu%'
SELECT tweets.text FROM tweets WHERE tweets.text ILIKE '%intern%' ORDER BY tweets.text
SELECT user_profiles.name, user_profiles.email FROM user_profiles WHERE user_profiles.followers > 1000
SELECT user_profiles.name FROM user_profiles ORDER BY user_profiles.followers DESC NULLS LAST LIMIT 1
SELECT u.name, u.email FROM user_profiles AS u WHERE u.followers = (SELECT MIN(v.followers) FROM user_profiles AS v)
SELECT user_profiles.name, SUM(user_profiles.followers) AS total_followers FROM user_profiles GROUP BY user_profiles.name ORDER BY total_followers DESC NULLS LAST
WITH user_rank AS (SELECT u.name, COUNT(follower.uid) AS num_followers FROM user_profiles JOIN user_profiles ON u.uid <> follower.uid GROUP BY u.name), top_5_users AS (SELECT * FROM user_rank ORDER BY num_followers DESC NULLS LAST LIMIT 5) SELECT name, num_followers FROM user_profiles
SELECT tweets.text FROM tweets ORDER BY tweets.createdate DESC NULLS LAST
SELECT AVG(user_profiles.followers) AS average_followers FROM user_profiles WHERE NOT user_profiles.uid IN (SELECT user_tweets.uid FROM user_tweets)
SELECT AVG(user_profiles.followers) AS average_followers FROM user_profiles WHERE user_profiles.uid IN (SELECT user_tweets.uid FROM user_tweets)
SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents
SELECT catalog_contents.catalog_entry_name FROM Catalog_Contents
SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions GROUP BY Attribute_Theories.attribute_data_type HAVING COUNT(Attribute_Theories.attribute_id) > 3
SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions GROUP BY Attribute_Definitions.attribute_data_type HAVING COUNT(Attribute_Definitions.attribute_id) > 3
SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions WHERE Attribute_Definitions.attribute_name ILIKE '%green%'
SELECT Attribute_Definitions.attribute_data_type FROM Attribute_Definitions WHERE Attribute_Definitions.attribute_name ILIKE '%green%'
SELECT Catalog_Structure.catalog_level_name, Catalog_Structure.catalog_level_number FROM Catalog_Structure WHERE (Catalogue_Structure.catalog_level_number >= 5 AND Catalog_Structure.catalog_level_number <= 10)
SELECT Catalog_Structure.catalog_level_name, CAST(Catalog_Structure.catalog_level_number AS FLOAT) AS level FROM Catalog_Structure WHERE (CAST(Catalog_Structure.catalog_level_number AS FLOAT) BETWEEN 5 AND 10)
SELECT catalog_publisher FROM Catalogs WHERE catalog_publisher ILIKE '%Murray%'
SELECT catalog_publisher FROM Catalogs WHERE catalog_publisher ILIKE '%Murray%'
SELECT Catalogs.catalog_publisher, COUNT(Catalogs.catalog_name) AS number_of_catalogs FROM Catalogs GROUP BY Catalogs.catalog_publisher ORDER BY number_of_catalogs DESC NULLS LAST LIMIT 1
SELECT Catalogs.catalog_publisher FROM Catalogs GROUP BY Catalogs.catalog_publisher ORDER BY COUNT(Catalogs.catalog_id) DESC NULLS LAST LIMIT 1
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents ORDER BY Catalog_Contents.price_in_dollars DESC NULLS LAST LIMIT 1
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents ORDER BY Catalog_Contents.price_in_dollars DESC NULLS LAST LIMIT 1
SELECT AVG(price_in_euros), MIN(price_in_euros) FROM Catalog_Contents
SELECT AVG(price_in_euros), MIN(price_in_euros) FROM Catalog_Contents
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents ORDER BY Catalog_Contents.height DESC NULLS LAST LIMIT 1
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents ORDER BY Catalog_Contents.height DESC NULLS LAST LIMIT 1
SELECT catalog_contents.catalog_entry_name FROM Catalog_Contents ORDER BY catalog_contents.capacity ASC NULLS FIRST LIMIT 1
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents ORDER BY CAST(Catalogue_Contents.capacity AS FLOAT) ASC NULLS FIRST LIMIT 1
SELECT catalog_contents.catalog_entry_name FROM Catalog_Contents WHERE catalog_contents.product_stock_number ILIKE '2%'
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.product_stock_number ILIKE '2%'
 SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE (length(catalog_contents.width) < '3' OR length(catalog_contents.height) > '5')
```SELECT catalog_contents.catalog_entry_name FROM Catalog_Contents WHERE (LENGTH(catalog_contents.length) < 3 OR LENGTH(catalog_contents.length) > 5)
SELECT catalog_contents.catalog_entry_name, catalog_contents.capacity FROM Catalog_Contents WHERE catalog_contents.price_in_dollars > 700
SELECT Catalog_Contents.catalog_entry_name, Catalog_Contents.capacity FROM Catalog_Contents WHERE Catalog_Contents.price_in_dollars > 700
SELECT date_of_publication FROM Catalogs WHERE date_of_publication IN (SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(catalog_id) > 1)
SELECT date_of_publication FROM Catalogs WHERE date_of_publication IN (SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(catalog_id) > 1)
                        ```SELECT COUNT(product_stock_number) AS total_products FROM Catalog_Contents
SELECT COUNT(catalog_entry_id) AS total_contents FROM Catalog_Contents
SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > 8
SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.next_entry_id > 8
select COUNT(*) AS total_aircraft FROM aircraft;                      
SELECT COUNT(*) AS number_of_aircraft FROM aircraft
SELECT a.name, TO_CHAR(a.distance, '99999D9') AS distance FROM aircraft AS a
SELECT a.name, TO_CHAR(CAST(a.distance AS FLOAT), '99999D9') AS distance FROM aircraft AS a
SELECT a.aid FROM aircraft AS a WHERE a.distance > 1000
SELECT a.aid FROM aircraft AS a WHERE a.distance > 1000
SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000
SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000
SELECT a.name, TO_CHAR(a.distance, 'FM999990D00') AS distance FROM aircraft AS a WHERE a.aid = 12
SELECT a.name, TO_CHAR(a.distance, '99999D9') AS distance FROM aircraft AS a WHERE a.aid = 12
SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft
SELECT MIN(distance), AVG(distance), MAX(distance) FROM aircraft
SELECT a.aid, a.name FROM aircraft AS a ORDER BY a.distance DESC NULLS LAST LIMIT 1
SELECT a.aid, a.name FROM aircraft AS a WHERE a.distance = (SELECT MAX(b.distance) FROM aircraft AS b)
SELECT a.name FROM aircraft AS a ORDER BY a.distance ASC LIMIT 3
SELECT a.name FROM aircraft AS a ORDER BY LENGTH(a.name) ASC LIMIT 3
SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft)
SELECT a.name FROM aircraft AS a WHERE a.distance > (SELECT AVG(distance) FROM aircraft)
select COUNT(employee.eid) AS total_employees FROM employee;
                        ```SELECT COUNT(eid) AS total_employees FROM employee
SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary
SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary
SELECT eid FROM employee WHERE salary >= 100000
SELECT eid FROM employee WHERE salary >= 100000
SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000
SELECT COUNT(*) AS total_employees FROM employee WHERE salary BETWEEN 100000 AND 200000
SELECT e.name, e.salary FROM employee AS e WHERE e.eid = 242518965
SELECT employee.name, employee.salary FROM employee WHERE employee.eid = 242518965
SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee
SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee
SELECT e.eid, e.name FROM employee AS e ORDER BY e.salary DESC NULLS LAST LIMIT 1
SELECT e.eid, e.name FROM employee AS e ORDER BY e.salary DESC NULLS LAST LIMIT 1
SELECT employee.name FROM employee ORDER BY employee.salary ASC LIMIT 3
SELECT employee.name FROM employee ORDER BY employee.salary ASC LIMIT 3
SELECT employee.name FROM employee WHERE employee.salary > (SELECT AVG(employee.salary) FROM employee)
SELECT employee.name FROM employee WHERE employee.salary > (SELECT AVG(salary) FROM employee)
SELECT e.eid, e.salary FROM employee AS e WHERE e.name ILIKE '%Mark%Young%'
SELECT e.eid, e.salary FROM employee AS e WHERE e.name ILIKE '%Mark%Young%'
SELECT COUNT(*) AS total_flights FROM flight
SELECT COUNT(*) AS total_flights FROM flight
SELECT flight.flno, flight.origin, flight.destination FROM flight ORDER BY flight.origin ASC NULLS FIRST
SELECT flight.flno, flight.origin, flight.destination FROM flight ORDER BY flight.origin ASC NULLS FIRST
SELECT flight.flno FROM flight WHERE flight.origin = 'Los Angeles'
SELECT COUNT(*) AS total_flights FROM flight WHERE origin = 'Los Angeles'
SELECT flight.origin FROM flight WHERE flight.destination = 'Honolulu'
SELECT flight.origin FROM flight WHERE flight.destination = 'Honolulu'
SELECT flight.departure_date, flight.arrival_date FROM flight WHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu'
SELECT flight.departure_date, flight.arrival_date FROM flight WHERE flight.origin = 'LA' AND flight.destination = 'Honolulu'
SELECT flno FROM flight WHERE distance > 2000
SELECT COUNT(*) FROM flight WHERE distance > 2000
SELECT AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'
SELECT AVG(flight.price) AS average_price FROM flight WHERE flight.origin = 'LA' AND flight.destination = 'Honolulu'
SELECT flight.origin, flight.destination FROM flight WHERE flight.price > 300
SELECT flight.origin, flight.destination FROM flight WHERE flight.price > 300
SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight)
SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight)
SELECT flno FROM flight ORDER BY distance ASC LIMIT 3
SELECT flight.origin, flight.destination, COUNT(*) AS number_of_flights FROM flight GROUP BY flight.origin, flight.destination ORDER BY number_of_flights DESC NULLS LAST
SELECT AVG(flight.distance), AVG(flight.price) FROM flight AS fligh WHERE fligh.origin = 'Los Angeles'
SELECT AVG(price), AVG(distance) FROM flight WHERE origin = 'LA'
SELECT flight.origin, COUNT(flight.origin) AS total_flights FROM flight GROUP BY flight.origin
SELECT flight.origin, COUNT(*) AS number_of_flights FROM flight GROUP BY flight.origin
SELECT flight.destination, COUNT(flight.aid) AS number_of_flights FROM flight GROUP BY flight.destination
SELECT flight.destination, COUNT(*) AS total_flights FROM flight GROUP BY flight.destination
SELECT flight.origin, COUNT(*) AS total_flights FROM flight GROUP BY flight.origin ORDER BY total_flights DESC NULLS LAST LIMIT 1
SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC NULLS LAST LIMIT 1
SELECT flight.destination, COUNT(flight.aid) AS total_flights FROM flight GROUP BY flight.destination ORDER BY total_flights ASC LIMIT 1
SELECT flight.destination, COUNT(flight.aid) AS total_flights FROM flight GROUP BY flight.destination ORDER BY total_flights ASC LIMIT 1
SELECT COUNT(DISTINCT c.eid) AS number_of_employees_with_certificate FROM certificate AS c
SELECT COUNT(DISTINCT eid) AS number_of_employees_with_certificates FROM certificate
SELECT eid FROM employee WHERE NOT eid IN (SELECT name FROM employee)
SELECT e.eid FROM employee LEFT JOIN employee AS c ON e.eid = c.eid WHERE c.eid IS NULL
 SELECT employee.name FROM employee WHERE employee.eid NOT IN (SELECT certification.employee_id FROM certification WHERE certification.certificate_type = 'Boeing 737-800');
                        ``` SELECT employee.name FROM employee WHERE employee.eid NOT IN (SELECT pilot_license.eid FROM pilot_license JOIN aircraft ON pilot_license.aircraft = aircraft.id AND aircraft.model = 'Boeing 737-800');
                        ```SELECT COUNT(*) AS total_allergies FROM Allergy_Type
SELECT COUNT(*) AS total_allergy_entries FROM Allergy_Type
SELECT COUNT(DISTINCT AllergyType) AS number_of_allergy_types FROM Allergy_Type
SELECT COUNT(DISTINCT Allergy) AS number_of_allergies FROM Allergy_Type
SELECT Allergy_Type.Allergy AS FROMAllergy_Type
 SELECT Allergy_Type.Allergy_type FROM Allergy_Type GROUP BYAllergy_Type.allery_type;
                        ```SELECT a.allergy AS allergy_name, t.allergytype AS type FROM Allergy_Type CROSS JOIN Allergy_Type AS a
 SELECT a.name, t.allergy_type FROM allergy AS a JOIN allergy_type AS t ON a.allergy_id = t.allergy_id;
                        ``` SELECT Allergy FROMAllergy_Type WHEREAllergyType ILIKE '%food%'
                        ```SELECT DISTINCT Allergy_Type.Allergy FROM Allergy_Type
 SELECT Allergy_Type.Allergy FROM Allergy_Type WHEREAllergy_Type.allergy ilike '%Cat%'
                        ``` SELECT Allergy_Type.Allergy FROM Allergy_Type WHEREAllergy_Type.allergy ilike '%cat%'
                        ```SELECT COUNT(*) AS total_allergies FROM Allergy_Type WHERE AllergyType ILIKE '%animal%'
SELECT COUNT(*) AS total_allergies FROM Allergy_Type WHERE AllergyType ILIKE '%animal%type%'
 SELECT Allergy_Type.AllergyType, COUNT(Allergy_Type.allergy) AS total_allergies FROM Allergy_Type GROUP BYAllergy_Type.allergyType;
                        ```SELECT Allergy_Type.AllergyType, COUNT(Allergy) AS total_allergies FROM Allergy_Type GROUP BY AllergyType
 SELECT Allergy_Type.AllergyType, COUNT(Allergy_Type.allergy) AS total_allergies FROM Allergy_Type GROUP BYAllergy_Type.allergyType ORDER BY total_allergies DESC NULLS LAST LIMIT 1;
                        ``` SELECT Allergy_Type.Allergy_type FROM Allergy_Type GROUP BYAllergy_type ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1;
                        SELECT Allergy_Type.AllergyType, COUNT(Allergy) AS num_allergies FROM Allergy_Type GROUP BYAllergyType ORDER BY num_allergies ASC LIMIT 1;
                        ```SELECT allergy_type.allergytype FROM Allergy_Type GROUP BY allergy_type.allergytype ORDER BY COUNT(allergytype) ASC LIMIT 1
SELECT COUNT(*) AS total_students FROM Student
SELECT COUNT(*) AS total_students FROM Student
SELECT s.fname, s.lname FROM Student AS s
SELECT Student.Fname, Student.LName FROM Student
SELECT COUNT(DISTINCT Advisor) AS num_advisors FROM Student
SELECT COUNT(DISTINCT Advisor) AS number_of_advisors FROM Student
SELECT Student.Major FROM Student
SELECT Major FROM Student GROUP BY Major
SELECT DISTINCT Student.city_code FROM Student
SELECT Student.city_code FROM Student WHERE Student.Age >= 18 AND Student.Age <= 24
SELECT s.fname, s.lname, CAST(s.age AS FLOAT) FROM Student AS s WHERE s.sex = 'F'
SELECT Student.Fname, Student.LName, CAST(Student.Age AS FLOAT) FROM Student WHERE Student.Sex = 'F'
SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male'
SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male'
SELECT COUNT(*) FROM Student WHERE Age = CAST(18 AS FLOAT)
SELECT COUNT(*) FROM Student WHERE Age = CAST(18 AS FLOAT)
SELECT Student.StuID FROM Student WHERE Student.Age < '20'
SELECT Student.StuID FROM Student WHERE Student.Age > '20'
SELECT Student.city_code FROM Student WHERE Student.LName ILIKE '%Kim%'
SELECT Student.city_code FROM Student WHERE Student.LName ILIKE '%Kim%'
SELECT Student.Advisor FROM Student WHERE Student.StuID = 1004
SELECT Student.LName FROM Student WHERE Student.StuID = 1004
SELECT COUNT(*) AS total_students FROM Student WHERE city_code IN ('HKG', 'CHI')
SELECT COUNT(*) FROM Student WHERE city_code IN ('HKG', 'CHI')
SELECT MIN(Age) AS min_age, AVG(Age) AS avg_age, MAX(Age) AS max_age FROM Student
SELECT MIN(Age) AS min_age, AVG(Age) AS avg_age, MAX(Age) AS max_age FROM Student
SELECT Student.LName FROM Student ORDER BY Student.Age ASC NULLS FIRST LIMIT 1
SELECT Student.LName FROM Student ORDER BY Student.Age ASC NULLS FIRST LIMIT 1
SELECT MIN(StuID) AS oldest_student_id FROM Student
SELECT MIN(Student.StuID) AS oldest_student_id FROM Student
SELECT major, COUNT(*) AS student_count FROM Student GROUP BY major
SELECT Major, COUNT(*) AS total_students FROM Student GROUP BY Major
SELECT Major, COUNT(*) AS total_students FROM Student GROUP BY Major ORDER BY total_students DESC NULLS LAST LIMIT 1
SELECT Student.Major FROM Student ORDER BY Student.Major DESC NULLS LAST LIMIT 1
SELECT age, COUNT(*) AS student_count FROM Student GROUP BY age ORDER BY age
SELECT Student.Age, COUNT(*) AS total_students FROM Student GROUP BY Student.Age ORDER BY Student.Age
SELECT Sex, AVG(Age) AS average_age FROM Student GROUP BY Sex
SELECT Sex, AVG(Age) AS average_age FROM Student GROUP BY Sex
SELECT city_code AS city, COUNT(*) AS num_students FROM Student GROUP BY city_code
SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code
SELECT a.fname, a.lname, COUNT(s.advisor) AS num_students FROM Student AS a JOIN student ON a.city_code = s.advisor GROUP BY a.fname, a.lname
SELECT a.lname AS advisor_name, COUNT(s.stuid) AS number_of_students FROM Student AS a JOIN student ON a.fname = s.advisor GROUP BY a.lname
SELECT s.advisor, COUNT(*) AS num_students FROM Student AS s GROUP BY s.advisor ORDER BY num_students DESC NULLS LAST LIMIT 1
SELECT s.advisor, COUNT(*) AS num_students FROM Student AS s GROUP BY s.advisor ORDER BY num_students DESC NULLS LAST LIMIT 1
 SELECT COUNT(*) FROM Has_Allergy WHERE Allergy ILIKE '%cat%'
SELECT COUNT(*) AS total_students FROM Has_Allergy WHERE Allergy ILIKE '%cat%'
                        ```SELECT DISTINCT Has_Allergy.StuID FROM Has_Allergy GROUP BY Has_Allergy.StuID HAVING COUNT(Has_allergy.Allergy) >= 2
 SELECT s.id FROM Students AS s WHERE EXISTS (SELECT 1 FROM Has_Allergy hg WHERE hg.StuID = s.id GROUP BY hg.StuID HAVING COUNT(DISTINCT hg.Allergy) > 1);
                        ```SELECT Student.StuID FROM Student WHERE Student.Fname IS NULL AND Student.LName IS NULL
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age > 18 AND Student.Age < 25
SELECT h.allergy, COUNT(*) AS num_students_affected FROM Has_Allergy AS h GROUP BY h.allergy ORDER BY num_students_affected DESC NULLS LAST LIMIT 1
SELECT Has_Allergy.Allergy, COUNT(*) AS frequency FROM Has_Allergy GROUP BY Has_Allergy.Allergy ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT h.allergy, COUNT(s.stuid) AS num_students FROM Has_Allergy AS h JOIN student_allergy ON h.allergy = sa.allergy JOIN student ON sa.stuid = s.stuid GROUP BY h.allergy
SELECT Has_Allergy.Allergy, COUNT(Has_Allergy.StuID) AS number_of_students FROM Has_Allergy GROUP BY has_allergy.allergy
SELECT s.lname, s.age FROM Student AS s WHERE 'Milk' ILIKE '%allergy%' AND 'Cat' ILIKE '%allergy%'
SELECT s.lname, CAST(s.age AS FLOAT) FROM Student AS s WHERE s.major = 1 AND (s.sex ILIKE '%milk%' OR s.sex ILIKE '%cat%')
SELECT Student.Fname, Student.Sex FROM Student WHERE "Allergies" ILIKE '%milk%' AND NOT "age" ILIKE '%cat%'
SELECT Student.Fname, Student.Sex FROM Student WHERE Student.Age >= 18 AND Student.Age <= 25 AND Student.Major = 3.0
SELECT AVG(Student.Age) FROM Student WHERE (SELECT COUNT(*) FROM Student WHERE Student.StuID = Allergies.StuID AND Type IN ('food', 'animal')) > 0
SELECT AVG(Student.Age) AS average_age FROM Student WHERE (Student.Allergies ILIKE '%food%' AND Student.sex ILIKE '%animal%') OR (Student.sex ILIKE '%animal%' AND Student.sex ILIKE '%food%')
SELECT s.fname, s.lname FROM student WHERE NOT EXISTS(SELECT 1 FROM Student AS asf WHERE asf.advisor = s.stuid)
SELECT s.fname, s.lname FROM student WHERE NOT EXISTS(SELECT 1 FROM Student AS a WHERE a.advisor = s.stuid)
SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND Major = 17
SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND NOT Food_Allergy IS NULL
SELECT COUNT(*) FROM Student WHERE Age > 18 AND (Allergy_to_food IS NULL OR fname = 'No') AND (sex IS NULL OR sex = 'No')
SELECT COUNT(*) FROM Student WHERE Age > 18 AND (Allergy_to_food IS NULL OR fname = 'no') AND (sex IS NULL OR sex = 'no')
SELECT s.fname, s.major FROM Student AS s WHERE s.advisor IS NULL
 SELECT s.fname, s.major FROM student AS s WHERE age > 18 AND sex = 'male'
                        ```SELECT invoices.billing_country, COUNT(*) AS total_invoices FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoices DESC NULLS LAST LIMIT 5
WITH invoice_counts AS (SELECT billing_country, COUNT(id) AS num_invoices FROM invoices GROUP BY billing_country), top_5_countries AS (SELECT * FROM invoices ORDER BY num_invoices DESC NULLS LAST LIMIT 5) SELECT tc.billing_country, tc.num_invoices, ic.num_invoices / CAST(tc.num_invoices AS FLOAT) * 100 AS percentage_of_top_5 FROM top_5_countries JOIN invoices AS ic ON tc.billing_country = ic.billing_country
SELECT invoices.billing_country, SUM(invoices.total) AS total_invoice_amount FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoice_amount DESC NULLS LAST LIMIT 8
SELECT invoices.billing_country, SUM(invoices.total) AS total_invoice_amount FROM invoices GROUP BY invoices.billing_country ORDER BY total_invoice_amount DESC NULLS LAST LIMIT 8
SELECT invoices.billing_country, AVG(invoices.total) AS average_total FROM invoices GROUP BY invoices.billing_country ORDER BY average_total DESC NULLS LAST LIMIT 10
SELECT invoices.billing_country, AVG(invoices.total) AS average_total FROM invoices GROUP BY invoices.billing_country ORDER BY average_total DESC NULLS LAST LIMIT 10
SELECT albums.title FROM albums
SELECT COUNT(title) AS total_titles FROM albums
SELECT albums.title FROM albums ORDER BY albums.title ASC NULLS FIRST
SELECT albums.title FROM albums ORDER BY albums.id ASC NULLS FIRST
SELECT albums.title FROM albums WHERE albums.title ILIKE 'A%' ORDER BY albums.title
SELECT albums.title FROM albums WHERE albums.title ILIKE 'A%' ORDER BY albums.title
SELECT SUM(invoices.total) AS total_amount FROM invoices WHERE invoices.billing_state = 'IL' AND invoices.billing_city = 'Chicago'
SELECT SUM(invoices.total) AS total_amount FROM invoices WHERE invoices.billing_state = 'Illinois'
SELECT COUNT(*) FROM invoices WHERE billing_city ILIKE '%Chicago%' AND billing_state ILIKE '%IL%'
SELECT COUNT(*) FROM invoices WHERE billing_state = 'IL' AND billing_city ILIKE '%Chicago%'
SELECT billing_state, COUNT(*) AS total_invoices FROM invoices WHERE billing_country = 'US' GROUP BY billing_state
SELECT billing_state, COUNT(*) AS number_of_invoices FROM invoices GROUP BY billing_state
SELECT invoices.billing_state, COUNT(*) AS number_of_invoices FROM invoices WHERE billing_country = 'US' GROUP BY invoices.billing_state ORDER BY number_of_invoices DESC NULLS LAST LIMIT 1
SELECT billing_state, COUNT(*) AS total_invoices FROM invoices GROUP BY billing_state ORDER BY total_invoices DESC NULLS LAST
SELECT COUNT(id) AS number_of_invoices, SUM(total) AS total_amount FROM invoices WHERE billing_state = 'California'
SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_amount FROM invoices WHERE billing_state = 'CA'
SELECT customers.company FROM customers WHERE customers.last_name ILIKE '%Martins%' AND customers.first_name ILIKE '%Eduardo%'
SELECT customers.company FROM customers WHERE customers.last_name ILIKE '%Martins%' AND customers.first_name ILIKE '%Eduardo%'
SELECT customers.email, customers.phone FROM customers WHERE customers.first_name ILIKE '%Astrid%' AND customers.last_name ILIKE '%Gruber%'
SELECT customers.email, customers.phone FROM customers WHERE customers.first_name ILIKE '%Astrid%' AND customers.last_name ILIKE '%Gruber%'
SELECT COUNT(*) FROM customers WHERE city ILIKE '%Prague%'
SELECT COUNT(*) AS total_customers FROM customers WHERE city ILIKE '%Prague%'
SELECT COUNT(*) FROM customers WHERE state = 'CA'
SELECT COUNT(*) FROM customers WHERE state = 'California'
SELECT customers.country FROM customers WHERE customers.last_name ILIKE '%Almeida%' AND customers.first_name ILIKE '%roberto%'
SELECT customers.country FROM customers WHERE customers.first_name ILIKE '%Roberto%' AND customers.last_name ILIKE '%Almeida%'
SELECT employees.title, employees.phone, employees.hire_date FROM employees WHERE employees.last_name = 'Edwards' AND employees.first_name = 'Nancy'
SELECT employees.title, employees.phone, employees.hire_date FROM employees WHERE employees.last_name ILIKE '%Edwards%' AND employees.first_name ILIKE '%Nancy%'
SELECT employees.address FROM employees WHERE employees.first_name ILIKE '%Nancy%' AND employees.last_name ILIKE '%Edwards%'
SELECT employees.address FROM employees WHERE employees.first_name ILIKE '%Nancy%' AND employees.last_name ILIKE '%Edwards%'
SELECT COUNT(*) AS total_employees FROM employees WHERE country = 'Canada'
SELECT COUNT(*) FROM employees WHERE country = 'Canada'
SELECT employees.phone FROM employees WHERE employees.last_name ILIKE '%Edwards%' AND employees.first_name ILIKE '%Nancy%'
SELECT employees.phone FROM employees WHERE employees.last_name ILIKE '%Edwards%' AND employees.first_name ILIKE '%Nancyy%'
SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.birth_date ASC NULLS FIRST LIMIT 1
SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.birth_date ASC NULLS FIRST LIMIT 1
SELECT employees.first_name, employees.last_name FROM employees ORDER BY (CURRENT_DATE - employees.birth_date) DESC NULLS LAST LIMIT 10
SELECT e.first_name, e.last_name FROM employees AS e WHERE e.hire_date IN (SELECT MAX(e2.hire_date) FROM employees AS e2 GROUP BY e2.id) ORDER BY e.hire_date DESC NULLS LAST LIMIT 10
SELECT e.city, CAST(COUNT(CASE WHEN e.title = 'IT staff' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_of_it_staff FROM employees AS e GROUP BY e.city
SELECT e.city, CAST(COUNT(CASE WHEN hire_date = 'IT' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_of_it_staff FROM employees AS e GROUP BY e.city
SELECT mt.name FROM media_types AS mt
SELECT mt.name FROM media_types AS mt
SELECT g.name AS genre_type FROM genres AS g
SELECT g.name FROM genres AS g
SELECT playlists.name FROM playlists
SELECT playlists.name FROM playlists
                        SELECT tracks.composer FROM tracks WHERE tracks.name ILIKE '%Fast%As%a%Shark%'
                        ```SELECT tracks.composer FROM tracks WHERE tracks.name ILIKE '%Fast%As%a%Shark%' ORDER BY tracks.composer
SELECT tracks.milliseconds / NULLIF(tracks.bytes, 0) AS ratio FROM tracks WHERE tracks.name ILIKE '%Fast%As%a%Shark%'
                        ``` SELECT tracks.milliseconds FROM tracks WHERE tracks.name ilike '%Fast%As%a%Shark%'
                        ```SELECT CAST(AVG(milliseconds) AS FLOAT) / NULLIF((CAST(unit_price AS FLOAT)), 0) AS average_cost_per_minute FROM tracks WHERE "name" ILIKE '%Fast%As%a%Shark%'
 SELECT tracks.unit_price FROM tracks WHERE tracks.name ILIKE '%Fast%As%a%Shark%'
select COUNT(editor.age) AS total_editors FROM editor;                  
                        ```SELECT editor.name FROM editor ORDER BY editor.age ASC NULLS FIRST
SELECT editor.name, editor.age FROM editor
SELECT editor.name FROM editor WHERE editor.age > '25'
SELECT editor.name FROM editor WHERE editor.age = 24 OR editor.age = 25
SELECT editor.name FROM editor ORDER BY editor.age ASC NULLS FIRST LIMIT 1
SELECT editor.age, COUNT(editor.name) AS number_of_editors FROM editor GROUP BY editor.age ORDER BY editor.age
SELECT editor.age FROM editor GROUP BY editor.age ORDER BY editor.age DESC NULLS LAST LIMIT 1
SELECT journal.theme FROM journal GROUP BY journal.theme
SELECT editor.name FROM editor WHERE NOT editor.editor_id IN (SELECT committee.editor_id FROM editor)
 SELECT j.date, j.theme, j.sales FROM journal j WHERE j.journal_id NOT IN (SELECT e.journal_id FROM editor e JOIN committee c ON e.editor_id = c.editor_id) ORDER BY j.date NULLS LAST;
select COUNT(accounts.account_id) AS total_accounts FROM accounts;
select COUNT(accounts.account_id) AS total_accounts FROM accounts;
                        ```SELECT a.account_id, c.customer_id, c.account_name FROM Accounts AS a JOIN customers ON a.customer_id = c.customer_id
SELECT a.account_id, c.customer_id, a.account_name FROM Accounts AS a
 SELECT Accounts.other_account_details FROM Accounts WHERE "Account Name" ILIKE '%338%'
                        ```SELECT Accounts.other_account_details FROM Accounts WHERE "Account Name" ILIKE '%338%'
SELECT customers.customer_id, COUNT(accounts.account_id) AS account_count FROM customers JOIN Accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id
SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts AS a GROUP BY a.customer_id
 WITH account_counts AS (SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id), max_account_count AS (SELECT MAX(account_count) AS max_accounts FROM account_counts) SELECT ac.customer_id, n.name, n.number, n.address, n.city, n.state, n.zip, n.phone, n.email, n.fax, n.mobile, n.cell, n.home, n.work, n.other FROM account_counts ac JOIN names n ON ac.customer_id = n.customer_id WHERE account_count = (SELECT max_accounts FROM max_account_count))
                        ```WITH account_counts AS (SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id), max_account_count AS (SELECT MAX(account_count) AS max_account_count FROM account_counts) SELECT ac.customer_id, ac.account_count FROM account_counts JOIN max_account_count ON ac.account_count = mac.max_account_count
SELECT COUNT(*) AS total_customers FROM Customers WHERE customer_phone IS NULL
SELECT COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customers
SELECT Customers.customer_first_name, Customers.customer_last_name FROM Customers WHERE NOT customer_id IN (SELECT account_holder.customer_id FROM account_holders)
SELECT c.customer_first_name, c.customer_last_name FROM Customers WHERE NOT c.customer_id IN (SELECT other_customer_details FROM Customers)
SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts
SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Accounts
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(*) AS total_customers FROM Customers
SELECT c.customer_id, c.customer_first_name, c.customer_last_name, c.customer_phone FROM Customers AS c
SELECT customers.customer_id AS "Customer ID", customers.customer_first_name, customers.customer_last_name, customers.customer_phone FROM Customers
SELECT Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_first_name ILIKE '%Aniyah%' AND Customers.customer_last_name ILIKE '%Feest%'
SELECT Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_first_name ILIKE '%Aniyah%' AND Customers.customer_last_name ILIKE '%Feest%'
SELECT COUNT(card_id) AS total_cards FROM Customers_Cards
select COUNT(Customers_Cards.card_id) AS total_cards
                        ```SELECT c.customer_id, cc.card_type_code, cc.card_number FROM customers CROSS JOIN Customers_Cards AS cc
SELECT Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number FROM Customers_Cards
SELECT Customers_Cards.date_valid_from, Customers_Cards.date_valid_to FROM Customers_Cards WHERE Customers_Cards.card_number = '4560596484842'
SELECT Customers_Cards.date_valid_from, Customers_Cards.date_valid_to FROM Customers_Cards WHERE "card_number" ILIKE '%4560596484842%'
SELECT COUNT(*) AS total_debit_cards FROM Customers_Cards WHERE card_type_code ILIKE '%debit%'
SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'Debit'
SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM Customers_Cards GROUP BY customers_cards.customer_id
SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM Customers_Cards GROUP BY customers_cards.customer_id
SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM Customers_Cards GROUP BY customers_cards.customer_id ORDER BY card_count DESC NULLS LAST LIMIT 1
SELECT customers_cards.customer_id, COUNT(customers_cards.card_id) AS card_count FROM Customers_Cards GROUP BY customers_cards.customer_id ORDER BY card_count DESC NULLS LAST LIMIT 1
SELECT card_type_code, COUNT(*) AS card_count FROM Customers_Cards GROUP BY card_type_code
SELECT cc.card_type_code, COUNT(*) AS number_of_cards FROM Customers_Cards AS cc GROUP BY cc.card_type_code
SELECT cc.card_type_code, COUNT(*) AS total_cards FROM Customers_Cards AS cc GROUP BY cc.card_type_code ORDER BY total_cards DESC NULLS LAST LIMIT 1
SELECT cc.card_type_code FROM Customers_Cards AS cc GROUP BY cc.card_type_code ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1
SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5
SELECT DISTINCT cc.card_type_code FROM Customers_Cards WHERE cc.card_id IN (SELECT customer_id FROM Customers_Cards) GROUP BY cc.card_type_code HAVING COUNT(cc.card_id) >= 5
SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS customer_count FROM Customers_Cards AS cc GROUP BY cc.card_type_code
SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS customer_count FROM Customers_Cards AS cc GROUP BY cc.card_type_code
SELECT customers.customer_id, customers.customer_first_name FROM customers WHERE NOT customers.customer_id IN (SELECT customer_id FROM Customers)
SELECT Customers.customer_first_name, Customers.customer_id FROM Customers WHERE NOT Customers.customer_id IN (SELECT customer_id FROM Customers)
SELECT card_type_code FROM Customers_Cards
SELECT DISTINCT card_type_code FROM Customers_Cards
SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards
SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards
SELECT Financial_Transactions.transaction_type FROM Financial_Transactions
SELECT Financial_Transactions.transaction_type FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type
SELECT COUNT(DISTINCT transaction_type) AS number_of_transaction_types FROM Financial_Transactions
SELECT COUNT(DISTINCT transaction_type) AS number_of_transaction_types FROM Financial_Transactions
SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions
SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions
SELECT Financial_Transactions.transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type
SELECT Financial_Transactions.transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type
SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type ORDER BY total_transaction_amount DESC NULLS LAST LIMIT 1
SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type ORDER BY total_transaction_amount DESC NULLS LAST LIMIT 1
SELECT financial_transactions.account_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY financial_transactions.account_id
SELECT Financial_Transactions.account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.account_id
SELECT COUNT(*) AS total_tracks FROM track
SELECT COUNT(*) AS total_tracks FROM track
SELECT t.name, t.location FROM track AS t
SELECT track.name, track.location FROM track
SELECT t.name, TO_CHAR(t.seating, 'FM999990D00') AS formatted_seating FROM track AS t WHERE year_opened > 2000 ORDER BY seating
SELECT t.name, t.location, ROW_NUMBER() OVER (PARTITION BY t.year_opened ORDER BY t.seating DESC NULLS LAST) AS row_num FROM track AS t WHERE year_opened > 2000
SELECT t.name, t.location, MAX(t.seating) AS max_seating FROM track AS t GROUP BY t.name, t.location ORDER BY max_seating DESC NULLS LAST LIMIT 1
SELECT t.name, t.location, t.seating FROM track AS t WHERE t.year_opened = (SELECT MAX(year_opened) FROM track)
SELECT MIN(seating) AS min_seating, MAX(seating) AS max_seating, AVG(seating) AS avg_seating FROM track
SELECT MIN(seating), MAX(seating), AVG(seating) FROM track
SELECT t.name, t.location, AVG(t.year_opened) AS average_year_opened, t.seating FROM track AS t WHERE t.seating > AVG(t.year_opened) GROUP BY t.name, t.location, t.seating
SELECT t.name, t.location, TO_CHAR(t.year_opened, 'YYYY') AS year_opened FROM track AS t WHERE t.seating > (SELECT AVG(seating) FROM track)
SELECT DISTINCT Location FROM track
SELECT track.location FROM track GROUP BY track.location
select COUNT(race.race_id) AS number_of_races FROM race;                   
                        ```SELECT COUNT(Race_ID) FROM race
SELECT DISTINCT race.class FROM race
SELECT DISTINCT race.class FROM race ORDER BY race.class
SELECT race.name, race.class, race.date FROM race
SELECT race.name, race.class, race.date FROM race
SELECT race.class, COUNT(race.race_id) AS number_of_races FROM race GROUP BY race.class ORDER BY number_of_races DESC NULLS LAST
SELECT race.class, COUNT(*) AS number_of_races FROM race GROUP BY race.class ORDER BY number_of_races DESC NULLS LAST
SELECT race.class, COUNT(race.race_id) AS race_count FROM race GROUP BY race.class ORDER BY race_count DESC NULLS LAST LIMIT 1
SELECT race.class FROM race GROUP BY race.class ORDER BY COUNT(race.class) DESC NULLS LAST LIMIT 1
SELECT DISTINCT race.class FROM race GROUP BY race.class HAVING COUNT(race.race_id) >= 2
SELECT DISTINCT race.class FROM race GROUP BY race.class HAVING COUNT(race.race_id) >= 2
SELECT t.name FROM track LEFT JOIN track AS r ON t.track_id = r.track_id WHERE r.track_id IS NULL
SELECT t.name FROM track LEFT JOIN track AS r ON t.track_id = r.track_id WHERE r.track_id IS NULL
SELECT t.name FROM track AS t WHERE t.track_id IS NULL
SELECT t.name FROM track WHERE NOT t.track_id IN (SELECT location FROM track)
 SELECT t.year_opened FROM track t WHERE t.seating >= 5000 AND EXISTS (SELECT 1 FROM track t2 WHERE t2.location = t.location AND t2.seating <= 4000)
                        ```SELECT Year_Opened FROM track WHERE seating BETWEEN 4000 AND 5000
SELECT DISTINCT track.location FROM track WHERE (track.seating > 90000 AND track.seating < 70000) OR (track.seating < 70000 AND track.seating > 90000)
SELECT DISTINCT track.location FROM track WHERE (track.seating > 90000 AND track.seating < 70000) OR (track.seating < 70000 AND track.seating > 90000)
SELECT COUNT(*) FROM member WHERE membership_card = 'black'
SELECT member.address, COUNT(*) AS total_members FROM member GROUP BY member.address
SELECT member.name FROM member WHERE member.address ILIKE '%Harford%' OR member.address ILIKE '%Waterbury%'
SELECT member.member_id, member.name FROM member WHERE member.age < 30 OR member.membership_card = 'black'
SELECT m.time_of_purchase, CAST(m.age AS FLOAT) AS age, m.address FROM member AS m ORDER BY m.time_of_purchase ASC NULLS FIRST
SELECT member.membership_card FROM member GROUP BY member.membership_card HAVING COUNT(member.member_id) > 5
SELECT DISTINCT member.address FROM member WHERE member.age < 30 AND member.age > 40
SELECT member.membership_card FROM member WHERE member.address ILIKE '%Hartford%' AND member.address ILIKE '%Waterbury%'
SELECT COUNT(*) AS total_members FROM member WHERE NOT address ILIKE '%Hartford%'
SELECT DISTINCT member.address FROM member WHERE member.membership_card <> 'black'
SELECT shop.address FROM shop ORDER BY CAST(shop.open_year AS INT) NULLS FIRST
select AVG(cast(shop.score AS FLOAT)) AS average_score, AVG(cast(shop.num_of_staff AS FLOAT)) AS average_staff_number FROM shop;
                        ```SELECT shop.shop_id, shop.address FROM shop WHERE shop.score < (SELECT AVG(score) FROM shop)
SELECT shop.address, CAST(shop.num_of_staff AS FLOAT) AS num_of_staff FROM shop WHERE NOT shop.shop_id IN (SELECT happy_hour.shop_id FROM shop)
SELECT hh.shop_id, COUNT(*) AS num_of_happy_hours FROM happy_hour AS hh GROUP BY hh.shop_id ORDER BY num_of_happy_hours DESC NULLS LAST LIMIT 1
SELECT MONTH, COUNT(*) AS num_happy_hours FROM happy_hour GROUP BY MONTH ORDER BY num_happy_hours DESC NULLS LAST LIMIT 1
SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(HH_ID) > 2
SELECT COUNT(Album) AS total_albums FROM Album
SELECT COUNT(Album.title) AS total_albums FROM Album
SELECT Genre.Name FROM Genre
SELECT Genre.Name FROM Genre
SELECT * FROM Customer WHERE state = 'NY'
SELECT firstname, lastname FROM Customer WHERE state = 'NY'
SELECT Employee.FirstName, Employee.LastName FROM Employee WHERE Employee.City ILIKE '%Calgary%' ORDER BY Employee.firstname ASC, Employee.lastname ASC
SELECT Employee.FirstName, Employee.LastName FROM Employee WHERE Employee.City ILIKE '%Calgary%'
SELECT DISTINCT Invoice.BillingCountry FROM Invoice
SELECT DISTINCT Invoice.BillingCountry FROM Invoice
SELECT Artist.Name FROM Artist WHERE Artist.Name ILIKE '%a%'
SELECT Artist.Name FROM Artist WHERE Artist.Name ILIKE '%a%'
SELECT Track.Name FROM Track WHERE Track.Name ILIKE '%you%'
SELECT Track.Name FROM Track WHERE Track.Name ILIKE '%word%' ORDER BY Track.Name
SELECT AVG(Track.UnitPrice) AS average_unit_price FROM Track
SELECT AVG(Track.UnitPrice) AS average_unit_price FROM Track
WITH track_durations AS (SELECT TrackId, Milliseconds * 1000 AS duration_in_milliseconds FROM Track) SELECT MAX(duration_in_milliseconds) AS max_duration, MIN(duration_in_milliseconds) AS min_duration FROM track_durations
SELECT MIN(Milliseconds) AS min_duration, MAX(Milliseconds) AS max_duration FROM Track
SELECT p.firstname, p.lastname FROM Customer AS c JOIN personal_info ON c.customerid = p.customerid WHERE c.email = 'luisg@embraer.com.br'
SELECT p.firstname, p.lastname FROM personal_info JOIN Customer AS c ON p.customerid = c.customerid WHERE c.email = 'luisg@embraer.com.br'
SELECT COUNT(*) FROM Customer WHERE email ILIKE '%gmail.com%'
SELECT COUNT(*) FROM Customer WHERE email ILIKE '%gmail.com%'
SELECT COUNT(DISTINCT Employee.City) AS number_of_cities FROM Employee
SELECT COUNT(DISTINCT Employee.City) AS num_cities FROM Employee
SELECT customers.lastname FROM Customer WHERE customers.address <= 20
SELECT c.lastname FROM Customer AS c WHERE c.address <= 20
SELECT Employee.Phone FROM Employee
SELECT Employee.FirstName, Employee.LastName, Employee.Phone FROM Employee
SELECT Album.Title FROM Album ORDER BY Album.Title ASC NULLS FIRST
SELECT a.title FROM Album AS a JOIN artist ON a.artistid = b.artistid ORDER BY a.title ASC NULLS FIRST
SELECT a.name FROM artist LEFT JOIN Artist AS al ON a.artistid = al.artistid WHERE al.artistid IS NULL
SELECT a.name FROM artist LEFT JOIN Artist AS al ON a.artistid = al.artistid WHERE al.artistid IS NULL
SELECT Employee.BirthDate FROM Employee WHERE Employee.City = 'Edmonton'
SELECT Employee.BirthDate FROM Employee WHERE Employee.City = 'Edmonton'
SELECT DISTINCT Track.UnitPrice FROM Track
SELECT DISTINCT Track.UnitPrice FROM Track
SELECT COUNT(DISTINCT a.artistid) AS number_of_artists FROM artist LEFT JOIN Artist AS ab ON a.artistid = ab.name WHERE ab.name IS NULL
SELECT COUNT(*) AS num_artists_without_albums FROM Artist
SELECT Available_Policies.customer_phone FROM Available_Policies
SELECT Available_Policies.customer_phone FROM Available_Policies
SELECT Available_Policies.customer_phone FROM Available_Policies WHERE Available_Policies.policy_type_code ILIKE '%Life%Insurance%'
SELECT Available_Policies.customer_phone FROM Available_Policies WHERE Available_Policies.policy_type_code ILIKE '%Life%Insurance%'
SELECT policy_type_code, COUNT(*) AS number_of_records FROM Available_Policies GROUP BY policy_type_code ORDER BY number_of_records DESC NULLS LAST LIMIT 1
SELECT policy_type_code, COUNT(*) AS frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Available_Policies.customer_phone FROM Available_Policies GROUP BY Available_Policies.customer_phone ORDER BY COUNT(Available_policies.policy_id) DESC NULLS LAST
SELECT Available_Policies.customer_phone FROM Available_Policies GROUP BY Available_Policies.customer_phone ORDER BY COUNT(Available_policies.policy_type_code) DESC NULLS LAST LIMIT 1
SELECT Available_Policies.policy_type_code FROM Available_Policies GROUP BY Available_Policies.policy_type_code HAVING COUNT(Available_policies.customer_phone) > 4
SELECT Available_Policies.policy_type_code FROM Available_Policies GROUP BY Available_Policies.policy_type_code HAVING COUNT(Available_policies.customer_phone) > 4
SELECT SUM(Settlement_Amount) AS total_settlement_amount, AVG(Settlement_Amount) AS average_settlement_amount FROM Settlements
SELECT SUM(Settlement_Amount) AS total_settlement_amount, AVG(Settlement_Amount) AS average_settlement_amount FROM Settlements
SELECT Services.Service_name FROM Services ORDER BY Services.Service_name ASC NULLS FIRST
SELECT Services.Service_name FROM Services ORDER BY Services.Service_name ASC NULLS FIRST
select COUNT(Services.Service_ID) AS number_of_services FROM Services;                                              ```
select COUNT(Services.Service_ID) AS total_services FROM Services;
                        ```SELECT customers.customer_name FROM customers WHERE NOT customers.customer_id IN (SELECT customer_id FROM Customers)
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_id IN (SELECT Loss_customers.customer_id FROM Loss_customers)
SELECT Customers.customer_id FROM Customers WHERE Customers.customer_name ILIKE '%Diana%'
SELECT Customers.customer_id FROM Customers WHERE Customers.customer_name ILIKE '%Diana%'
SELECT MAX(Settlement_Amount) AS max_settlement_amount, MIN(Settlement_Amount) AS min_settlement_amount FROM Settlements
SELECT MAX(Settlement_Amount) AS max_settlement_amount, MIN(Settlement_Amount) AS min_settlement_amount FROM Settlements
SELECT Customers.customer_id, Customers.customer_name FROM Customers ORDER BY Customers.customer_id ASC NULLS FIRST
SELECT customers.customer_id FROM Customers ORDER BY customers.customer_id
SELECT COUNT(DISTINCT name) AS number_of_enzymes FROM enzyme
SELECT COUNT(*) AS total_enzymes FROM enzyme
SELECT enzyme.name FROM enzyme ORDER BY enzyme.name DESC NULLS LAST
SELECT e.name FROM enzyme AS e ORDER BY e.name DESC NULLS LAST
SELECT e.name, e.location FROM enzyme AS e
SELECT e.name, e.location FROM enzyme AS e
SELECT MAX(omim) AS max_omim FROM enzyme
SELECT MAX(omim) FROM enzyme
SELECT e.product, e.chromosome, e.porphyria FROM enzyme AS e WHERE e.location ILIKE '%Cytosol%'
SELECT e.product, e.chromosome, e.porphyria FROM enzyme AS e WHERE e.location ILIKE '%Cytosol%'
SELECT e.name FROM enzyme AS e WHERE NOT e.product ILIKE '%heme%'
SELECT e.name FROM enzyme AS e WHERE e.product <> 'Heme'
SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved = 'Yes'
SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved = 'Yes'
SELECT medicine_enzyme_interaction.interaction_type, COUNT(*) AS frequency FROM medicine_enzyme_interaction GROUP BY medicine_enzyme_interaction.interaction_type ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT COUNT(DISTINCT interaction_type) AS number_of_interaction_types FROM medicine_enzyme_interaction
SELECT COUNT(*) FROM medicine WHERE fda_approved = 'No'
SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'
SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT name FROM interactions)
SELECT COUNT(*) FROM enzyme WHERE OMIM IS NULL
 SELECT m.name, m.trade_name FROM medicine m WHERE m.id NOT IN (SELECT p.product_id FROM product p JOIN enzyme e ON p.id = e.product_id AND e.product_name ILIKE '%Heme%') ;
                        ``` SELECT m.name AS medicine_name, t.trade_name AS trade_name FROM medicine m JOIN trade t ON m.trade_name = t.trade_name WHERE m.id NOT IN (SELECT enzyme_medicine_id FROM enzymes WHERE product_name ILIKE '%Heme%');
                        ```SELECT COUNT(DISTINCT medicine.fda_approved) AS number_of_status FROM medicine
SELECT COUNT(DISTINCT medicine.fda_approved) AS number_of_status FROM medicine
SELECT enzyme.name FROM enzyme WHERE enzyme.name ILIKE '%ALA%'
SELECT e.name FROM enzyme AS e WHERE e.name ILIKE '%ALA%'
SELECT medicine.trade_name, COUNT(medicine.id) AS total_medicines FROM medicine GROUP BY medicine.trade_name
SELECT medicine.trade_name, COUNT(medicine.id) AS number_of_medicines FROM medicine GROUP BY medicine.trade_name
SELECT university.school, university.nickname FROM university ORDER BY university.founded
SELECT university.school, university.nickname FROM university ORDER BY university.founded
SELECT university.school_id, university.location FROM university WHERE university.founded = 1
SELECT u.school_id, u.location FROM university AS u WHERE u.nickname ILIKE '%Ivy%League%' ORDER BY u.school_id
SELECT MAX(university.founded) AS max_founded_year FROM university
SELECT university.founded FROM university WHERE university.enrollment = (SELECT MAX(university.enrollment) FROM university)
SELECT MAX(university.founded) AS latest_founded_year FROM university WHERE university.school_id <> 3
SELECT university.founded FROM university WHERE university.school_id <> 3 ORDER BY university.founded DESC NULLS LAST LIMIT 1
SELECT COUNT(DISTINCT school_id) AS number_of_schools FROM basketball_match
SELECT COUNT(DISTINCT school_id) AS number_of_schools FROM basketball_match
SELECT MAX(basketball_match.acc_percent) AS max_acc_percent FROM basketball_match
SELECT MAX(basketball_match.acc_percent) AS max_acc_percent FROM basketball_match
SELECT AVG(Enrollment) AS average_enrollment FROM university WHERE Founded < 1850
SELECT AVG(university.enrollment) AS average_enrollment FROM university WHERE university.founded < '1850-01-01'
SELECT u.enrollment, u.primary_conference FROM university AS u WHERE u.founded = (SELECT MIN(founded) FROM university)
SELECT u.founded, u.enrollment, u.primary_conference FROM university AS u ORDER BY u.founded ASC NULLS FIRST LIMIT 1
SELECT SUM(enrollment) AS total_enrollment, MIN(enrollment) AS min_enrollment FROM university
SELECT SUM(enrollment) AS total_enrollment, MIN(enrollment) AS min_enrollment FROM university
SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university GROUP BY university.affiliation ORDER BY total_enrollment DESC NULLS LAST
SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university GROUP BY university.affiliation ORDER BY total_enrollment DESC NULLS LAST
SELECT COUNT(*) AS number_of_schools FROM university WHERE NOT school_id IN (SELECT school_id FROM university)
SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM university)
SELECT university.school FROM university WHERE CAST(university.founded AS FLOAT) > 1850 OR CAST(university.founded AS FLOAT) IS NULL
SELECT university.school FROM university WHERE (university.founded < CAST('1850' AS FLOAT) OR university.founded IS NULL) AND (university.enrollment IS NULL OR university.enrollment > 0)
SELECT COUNT(DISTINCT university.affiliation) AS number_of_affiliations FROM university
SELECT COUNT(DISTINCT university.affiliation) AS num_affiliations FROM university
SELECT COUNT(*) FROM university WHERE LOWER ILIKE '%ny%'
SELECT COUNT(*) FROM university WHERE LOWER ILIKE '%NY%'
SELECT university.affiliation, COUNT(*) AS number_of_universities FROM university WHERE university.enrollment > 20000 GROUP BY university.affiliation
SELECT university.affiliation, COUNT(*) AS school_count FROM university WHERE university.enrollment > 20000 GROUP BY university.affiliation ORDER BY school_count DESC NULLS LAST
SELECT university.affiliation, SUM(university.enrollment) AS total_enrollment FROM university WHERE university.founded > 1850 GROUP BY university.affiliation
SELECT university.affiliation, CASE WHEN university.enrollment > 0 THEN 'Graduate' ELSE 'Undergraduate' END AS enrollment_type, COUNT(*) AS total_schools FROM university WHERE founded > 1850 GROUP BY affiliation, enrollment_type
SELECT MAX(university.enrollment) AS max_enrollment FROM university
SELECT MAX(university.enrollment) AS max_enrollment FROM university
SELECT * FROM basketball_match
SELECT b.all_games, b.team_name FROM basketball_match AS b
SELECT b.team_name FROM basketball_match AS b ORDER BY b.all_home DESC NULLS LAST
SELECT b.team_name FROM basketball_match AS b GROUP BY b.team_name ORDER BY CAST(b.all_games_percent AS FLOAT) DESC NULLS LAST
 SELECT chip_model.model_name FROM chip_model WHERE (chip_model.launch_year >= '2002' AND chip_model.launch_year <= '2004')
                        ```SELECT chip_model.model_name, MIN(chip_model.ram_miB) AS min_ram FROM chip_model GROUP BY chip_model.model_name
 SELECT phone.chip_model, phone.screen_mode FROM phone WHERE "Hardware_Model_name" ILIKE '%LG-P760%'
                        ``` SELECT COUNT(Hardware_Design_name) FROM phone WHERE Company_name ILIKE '%Nokia%Corporation%'
                        ```SELECT phone.hardware_model_name, phone.company_name FROM phone WHERE phone.accreditation_type ILIKE '%full%'
SELECT MIN(Company_name), COUNT(*) AS total_phone_models FROM phone
SELECT DISTINCT Company_name FROM phone WHERE NOT Hardware_Model_name IS NULL GROUP BY Company_name HAVING COUNT(Hardware_Design_name) > 1
SELECT MAX(used_kb) AS max_used_kb, MIN(used_kb) AS min_used_kb, AVG(used_kb) AS avg_used_kb FROM screen_mode
SELECT phone.chip_model, COUNT(*) AS total_phones FROM phone GROUP BY phone.accreditation_type
SELECT Accredation_type, COUNT(*) AS number_of_phones FROM phone GROUP BY Accredation_type
SELECT phone.accreditation_level FROM phone GROUP BY phone.accreditation_level HAVING COUNT(phone.hardware_model_name) > 3
SELECT chip_model.model_name, chip_model.launch_year, chip_model.slots, chip_model.rom_miB, chip_model.ram_miB, chip_model.wifi, chip_model.bluetooth FROM chip_model
SELECT COUNT(*) FROM chip_model WHERE WiFi IS NULL
SELECT COUNT(*) FROM chip_model WHERE WiFi IS NULL
SELECT chip_model.launch_year, chip_model.model_name FROM chip_model ORDER BY chip_model.launch_year
SELECT AVG(chip_model.ram_mib) AS average_ram_mib FROM chip_model WHERE NOT chip_model.ram_mib IS NULL
SELECT DISTINCT cm.model_name FROM chip_model AS cm LEFT JOIN phone ON cm.model_name = p.rom_mib WHERE p.rom_mib IS NULL
SELECT COUNT(*) AS total_countries FROM country
SELECT COUNT(*) FROM country
SELECT c.country_name, c.capital FROM country AS c
SELECT c.country_name, c.capital FROM country AS c
SELECT country.official_native_language FROM country WHERE country.official_native_language ILIKE '%English%'
SELECT country.official_native_language FROM country WHERE country.official_native_language ILIKE '%English%'
SELECT DISTINCT match_season.position FROM match_season
SELECT DISTINCT Position FROM match_season
SELECT match_season.player FROM match_season WHERE match_season.college = 'collegeuCLA'
SELECT match_season.player FROM match_season WHERE match_season.college = 'ucla'
SELECT match_season.college, COUNT(DISTINCT match_season.player) AS player_count FROM match_season WHERE match_season.college IN ('collegeuCLA', 'Duke') GROUP BY match_season.college ORDER BY player_count DESC NULLS LAST
SELECT match_season.college, match_season.position FROM match_season WHERE (match_season.college ILIKE '%Fucla%' OR match_season.college ILIKE '%Duke%') GROUP BY match_season.college, match_season.position
SELECT match_season.draft_pick_number, match_season.draft_class FROM match_season WHERE match_season.position = 'defender'
SELECT m.draft_pick_number, m.draft_class FROM match_season AS m WHERE position = 'Defender'
SELECT COUNT(DISTINCT Team) AS number_of_teams FROM match_season
SELECT COUNT(DISTINCT Team) AS num_teams FROM match_season
SELECT player.player_id AS player_id, CAST(player.years_play AS FLOAT) AS years_play FROM player
SELECT player.player AS "Player Name", CAST(player.years_played AS FLOAT) AS "Years Playing" FROM player
SELECT t.name FROM team AS t
SELECT team.name FROM team
SELECT match_season.position, COUNT(*) AS player_count FROM match_season GROUP BY match_season.position ORDER BY player_count DESC NULLS LAST
SELECT match_season.position, COUNT(*) AS total_players FROM match_season GROUP BY match_season.position
 SELECT player.college FROMmatch_season AS match_season JOINplayer AS player ONmatch_season.player=player.name ORDERBYmatch_season.collegeASC;
                        ```SELECT DISTINCT match_season.college FROM match_season ORDER BY match_season.college ASC NULLS FIRST
SELECT match_season.position, COUNT(*) AS frequency FROM match_season GROUP BY match_season.position ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT m.position, COUNT(*) AS frequency FROM match_season AS m GROUP BY m.position ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT college, COUNT(*) AS frequency FROM match_season GROUP BY college ORDER BY frequency DESC NULLS LAST LIMIT 3
SELECT college, COUNT(player) AS player_count FROM match_season GROUP BY college ORDER BY player_count DESC NULLS LAST LIMIT 3
SELECT DISTINCT college FROM match_season GROUP BY college HAVING COUNT(DISTINCT player) >= 2
SELECT DISTINCT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2
SELECT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2 ORDER BY college DESC NULLS LAST
SELECT DISTINCT college FROM match_season GROUP BY college HAVING COUNT(player) >= 2 ORDER BY college DESC NULLS LAST
SELECT t.name FROM team LEFT JOIN team AS ms ON t.team_id = ms.team_id WHERE ms.team_id IS NULL
SELECT t.name FROM team LEFT JOIN team AS m ON t.team_id = m.team_id WHERE m.team_id IS NULL
SELECT DISTINCT college FROM match_season WHERE position ILIKE '%midfielder%' AND college IN (SELECT college FROM match_season WHERE position ILIKE '%defender%')
SELECT college FROM match_season WHERE Position IN ('Midfielder', 'Defender')
SELECT COUNT(*) AS total_climbers FROM climber
SELECT COUNT(*) AS total_climbers FROM climber
SELECT c.name FROM climber AS c ORDER BY c.points DESC NULLS LAST
SELECT c.name FROM climber AS c ORDER BY c.points DESC NULLS LAST
SELECT c.name FROM climber AS c WHERE c.country <> 'Switzerland'
SELECT c.name FROM climber AS c WHERE c.country <> 'Switzerland'
SELECT MAX(climber.points) AS max_points FROM climber WHERE climber.country = 'United Kingdom'
SELECT MAX(climber.points) AS max_points FROM climber WHERE climber.country = 'United Kingdom'
SELECT COUNT(DISTINCT country) AS number_of_countries FROM climber
SELECT COUNT(DISTINCT climber.country) AS number_of_countries FROM climber
SELECT mountain.name FROM mountain ORDER BY mountain.name ASC NULLS FIRST
SELECT mountain.name FROM mountain ORDER BY mountain.name ASC NULLS FIRST
SELECT mountain.country FROM mountain WHERE mountain.height > 5000
SELECT mountain.country FROM mountain WHERE mountain.height > 5000
SELECT mountain.name FROM mountain ORDER BY mountain.prominence DESC NULLS LAST LIMIT 1
SELECT mountain.name FROM mountain ORDER BY mountain.height DESC NULLS LAST LIMIT 1
SELECT mountain.name, mountain.prominence FROM mountain ORDER BY mountain.prominence DESC NULLS LAST LIMIT 3
SELECT mountain.name, mountain.prominence FROM mountain GROUP BY mountain.name HAVING COUNT(mountain.name) > 2 ORDER BY mountain.prominence DESC NULLS LAST LIMIT 3
SELECT c.country, COUNT(*) AS total_climbers FROM climber AS c GROUP BY c.country
SELECT c.country, COUNT(*) AS total_climbers FROM climber AS c GROUP BY c.country
SELECT DISTINCT mountain.country FROM mountain GROUP BY mountain.country HAVING COUNT(mountain.mountain_id) > 1
SELECT DISTINCT mountain.country FROM mountain GROUP BY mountain.country HAVING COUNT(mountain.mountain_id) > 1
SELECT m.name FROM mountain LEFT JOIN mountain AS c ON m.mountain_id = c.mountain_id WHERE c.mountain_id IS NULL
SELECT m.name FROM mountain LEFT JOIN mountain AS cm ON m.mountain_id = cm.mountain_id WHERE cm.mountain_id IS NULL
SELECT DISTINCT mountain.country FROM mountain WHERE mountain.height > 5600 AND mountain.height < 5200
SELECT DISTINCT mountain.country FROM mountain WHERE mountain.name > 5600 AND mountain.name < 5200
SELECT mountain.range FROM mountain GROUP BY mountain.range ORDER BY COUNT(mountain.name) DESC NULLS LAST LIMIT 1
                        ```SELECT mountain.name FROM mountain WHERE mountain.height > 5000 OR mountain.prominence > 1000
SELECT mountain.name FROM mountain WHERE mountain.height > 5000 OR mountain.prominence > 1000
SELECT COUNT(*) AS total_body_builders FROM body_builder
SELECT body_builder.total FROM body_builder ORDER BY body_builder.total ASC NULLS FIRST
SELECT body_builder.snatch, body_builder.clean_jerk FROM body_builder ORDER BY body_builder.snatch ASC NULLS FIRST
SELECT AVG(Snatch) AS average_snatch FROM body_builder
SELECT body_builder.clean_jerk, body_builder.snatch FROM body_builder ORDER BY body_builder.total DESC NULLS LAST LIMIT 1
SELECT people.birth_date, people.height FROM people ORDER BY people.height ASC NULLS FIRST
SELECT birth_place, COUNT(*) AS total_people FROM people GROUP BY birth_place
SELECT Birth_Place, COUNT(*) AS frequency FROM people GROUP BY Birth_place ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT people.birth_place FROM people GROUP BY people.birth_place HAVING COUNT(people.people_id) >= 2
SELECT people.height, people.weight FROM people ORDER BY people.height DESC NULLS LAST
SELECT body_builder.total, body_builder.people_id, body_builder.body_builder_id, body_builder.snatch, body_builder.clean_jerk FROM body_builder
SELECT p.name, p.birth_place FROM people AS p WHERE p.height IS NULL AND p.weight IS NULL
SELECT COUNT(DISTINCT Birth_Place) AS number_of_birth_places FROM people
SELECT COUNT(*) AS total_people FROM people WHERE Weight IS NULL OR Height IS NULL
SELECT MIN(Snatch) AS minimum_snatch_score FROM body_builder
SELECT COUNT(*) AS number_of_elections FROM election
SELECT election.votes FROM election ORDER BY election.votes DESC NULLS LAST
SELECT election.date, (election.vote_percent * 100) AS percentage_of_votes FROM election ORDER BY election.date
SELECT MIN(Vote_Percent) AS min_vote_percent, MAX(Vote_Percent) AS max_vote_percent FROM election
SELECT representative.name, party.party FROM representative JOIN representative ON representative.party = party.representative_id
SELECT representative.name FROM representative WHERE representative.party <> 'Republican'
SELECT representative.lifespan FROM representative WHERE representative.state IN ('New York', 'Indiana') ORDER BY representative.lifespan
SELECT p.name, COUNT(r.representative_id) AS num_reps FROM representative AS p JOIN representative ON p.party = r.party GROUP BY p.name
SELECT r.party FROM representative AS r GROUP BY r.party ORDER BY COUNT(r.representative_id) DESC NULLS LAST LIMIT 1
SELECT party.name FROM representative AS party GROUP BY party.name HAVING COUNT(party.representative_id) >= 3
SELECT representative.state FROM representative GROUP BY representative.state HAVING COUNT(representative.state) >= 2
SELECT representative.name FROM representative WHERE NOT representative.representative_id IN (SELECT candidate.party FROM representative) ORDER BY representative.name
SELECT representative.party FROM representative WHERE (representative.state = 'New York' AND representative.state = 'Pennsylvania') GROUP BY representative.party HAVING COUNT(DISTINCT representative.state) > 1
SELECT COUNT(DISTINCT representative.party) AS number_of_parties FROM representative
SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings
SELECT COUNT(apt_booking_id) AS total_bookings FROM Apartment_Bookings
SELECT booking_start_date, booking_end_date FROM Apartment_Bookings
SELECT apt_booking_id, booking_start_date, booking_end_date FROM Apartment_Bookings
SELECT DISTINCT Apartment_Buildings.building_description FROM Apartment_Buildings
SELECT DISTINCT Apartment_Buildings.building_description FROM Apartment_Buildings
SELECT Apartment_Buildings.building_short_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ILIKE '%Emma%'
SELECT Apartment_Buildings.building_short_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ILIKE '%Emma%'
SELECT Apartment_Buildings.building_address, Apartment_Buildings.building_phone FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ILIKE '%Brenden%'
SELECT Apartment_Buildings.building_address, Apartment_Buildings.building_phone FROM Apartment_Buildings WHERE Apartment_Buildings.building_manager ILIKE '%Brenden%'
SELECT Apartment_Buildings.building_full_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_full_name ILIKE '%court%'
SELECT Apartment_Buildings.building_full_name FROM Apartment_Buildings WHERE Apartment_Buildings.building_full_name ILIKE '%court%'
SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments
SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments
SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments
SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments
SELECT Apartments.apt_number, CAST(Apartments.room_count AS FLOAT) AS room_count FROM Apartments
SELECT Apartments.apt_number, CAST(Apartments.room_count AS FLOAT) AS room_count FROM Apartments
SELECT AVG(CAST(room_count AS FLOAT)) AS average_room_count FROM Apartments WHERE apt_type_code ILIKE '%Studio%'
SELECT AVG(CAST(room_count AS FLOAT)) FROM Apartments WHERE apt_type_code ILIKE '%Studio%'
SELECT Apartments.apt_number FROM Apartments WHERE Apartments.apt_type_code ILIKE '%Flat%'
SELECT Apartments.apt_number FROM Apartments WHERE Apartments.apt_type_code ILIKE '%flot%'
SELECT Guests.guest_first_name, Guests.guest_last_name FROM Guests
SELECT Guests.guest_first_name, Guests.guest_last_name FROM Guests
SELECT Guests.date_of_birth FROM Guests WHERE Guests.gender_code ILIKE '%Male%'
SELECT Guests.date_of_birth FROM Guests WHERE Guests.gender_code = 'Male'
SELECT booking_status_code, COUNT(apt_booking_id) AS number_of_bookings FROM Apartment_Bookings GROUP BY booking_status_code
SELECT booking_status_code, COUNT(apt_booking_id) AS total_bookings FROM Apartment_Bookings GROUP BY booking_status_code
SELECT Apartments.apt_number FROM Apartments ORDER BY CAST(Apartments.room_count AS FLOAT) ASC NULLS FIRST
SELECT Apartments.apt_number FROM Apartments ORDER BY CAST(Apartments.room_count AS FLOAT) ASC NULLS FIRST
SELECT Apartments.apt_number FROM Apartments ORDER BY Apartments.bedroom_count DESC NULLS LAST LIMIT 1
SELECT Apartments.apt_id AS apartment_number, MAX(Apartments.bedroom_count) AS max_bedrooms FROM Apartments GROUP BY Apartments.apt_id ORDER BY max_bedrooms DESC NULLS LAST LIMIT 1
SELECT Apartments.apt_type_code, COUNT(Apartments.apt_id) AS apartment_count FROM Apartments GROUP BY Apartments.apt_type_code ORDER BY apartment_count ASC NULLS FIRST
SELECT apt_type_code, COUNT(*) AS apartment_count FROM Apartments GROUP BY apt_type_code ORDER BY apartment_count ASC NULLS FIRST
SELECT a.apt_type_code, AVG(CAST(a.room_count AS FLOAT)) AS avg_room_count FROM Apartments AS a GROUP BY a.apt_type_code ORDER BY avg_room_count DESC NULLS LAST LIMIT 3
                        ```SELECT a.apt_type_code, CAST(a.room_count AS FLOAT) AS room_count, b.bathroom_count, c.bedroom_count FROM Apartments AS a JOIN (SELECT apt_id, MAX(bathroom_count) AS bathroom_count FROM Apartments GROUP BY apt_id) AS b ON a.apt_id = b.apt_id JOIN (SELECT apt_id, MAX(bedroom_count) AS bedroom_count FROM Apartments GROUP BY apt_id) AS c ON a.apt_id = c.apt_id
SELECT a.apt_type_code, CAST(b.bathroom_count AS FLOAT) AS bathroom_count, CAST(b.bedroom_count AS FLOAT) AS bedroom_count FROM Apartments AS a JOIN (SELECT apt_id, MAX(room_count) AS room_count FROM Apartments GROUP BY apt_id) AS b ON a.apt_id = b.apt_id
SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(apt_type_code) DESC NULLS LAST LIMIT 1
SELECT apt_type_code, COUNT(*) AS frequency FROM Apartments GROUP BY apt_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(apt_type_code) DESC NULLS LAST LIMIT 1
SELECT apt_type_code, COUNT(*) AS frequency FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT apt_type_code, MIN(room_count) AS min_rooms, MAX(room_count) AS max_rooms FROM Apartments GROUP BY apt_type_code
SELECT a.apt_type_code, MIN(CAST(a.room_count AS INT)) AS min_rooms, MAX(CAST(a.room_count AS INT)) AS max_rooms FROM Apartments AS a GROUP BY a.apt_type_code
SELECT gender_code, COUNT(*) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC NULLS LAST
SELECT g.gender_code, COUNT(g.guest_id) AS guest_count FROM Guests AS g GROUP BY g.gender_code ORDER BY guest_count DESC NULLS LAST
SELECT COUNT(*) AS number_of_apartments FROM Apartments WHERE NOT apt_id IN (SELECT building_id FROM Facilities)
SELECT COUNT(*) FROM Apartments WHERE apt_id IS NULL
SELECT COUNT(*) AS game_count FROM game WHERE season > 2007
SELECT game.date FROM game WHERE game.home_team = 'Chelsea' ORDER BY game.date DESC NULLS LAST
SELECT g.season, h.home_team, a.away_team FROM game JOIN home_team ON g.home_team = h.id JOIN game AS a ON g.away_team = a.id
SELECT s.name, MAX(s.home_games) AS max_home_games, MIN(s.home_games) AS min_home_games, AVG(s.home_games) AS avg_home_games FROM stadium AS s GROUP BY s.name
SELECT AVG(stadium.average_attendance) AS average_capacity FROM stadium WHERE stadium.capacity_percentage > 100
SELECT i.player AS player_name, CAST(i.number_of_matches AS FLOAT) AS number_of_matches, i.source AS info_source FROM injury_accident AS i WHERE i.injury <> 'Knee problem'
SELECT COUNT(DISTINCT injury_accident.source) AS number_of_sources FROM injury_accident
SELECT COUNT(*) AS number_of_games FROM game WHERE NOT id IN (SELECT stadium_id FROM injury)
SELECT g.name, AVG(g.average_attendance) AS average_attendance, SUM(g.total_attendance) AS total_attendance FROM stadium AS g WHERE NOT g.capacity_percentage IS NULL GROUP BY g.name
SELECT stadium.name FROM stadium WHERE stadium.name ILIKE '%Bank%'
SELECT AVG(weight) AS average_weight FROM Player
SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player
SELECT preferred_foot, AVG(overall_rating) AS average_rating FROM Player_Attributes GROUP BY preferred_foot
SELECT CASE WHEN preferred_foot = 'Right' THEN 'Right-Footed' ELSE 'Left-Footed' END AS footed FROM Player_Attributes WHERE overall_rating > 80
SELECT p.id FROM Player AS p WHERE p.height >= 180 AND p.player_name > 85
SELECT p.id FROM Player AS p WHERE p.height BETWEEN 1.8 AND 1.9 AND p.weight = 'left'
SELECT COUNT(Performance_ID) AS total_performances FROM performance
SELECT performance.host FROM performance ORDER BY performance.attendance ASC NULLS FIRST
SELECT performance.date, performance.location FROM performance
SELECT SUM(Attendance) AS total_attendance FROM performance WHERE "Location" ILIKE '%td%garden%' OR "Location" ILIKE '%bell%centre%'
SELECT AVG(Attendance) AS average_attendance FROM performance
SELECT performance.date FROM performance ORDER BY performance.attendance DESC NULLS LAST LIMIT 1
SELECT performance.location, COUNT(performance.performance_id) AS num_performances FROM performance GROUP BY performance.location
SELECT performance.location, COUNT(performance.location) AS frequency FROM performance GROUP BY performance.location ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT DISTINCT performance.location FROM performance GROUP BY performance.location HAVING COUNT(performance.performance_id) >= 2
SELECT DISTINCT performance.location FROM performance WHERE (performance.attendance > 2000 AND performance.attendance < 1000) GROUP BY performance.location
SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT performance.member_id FROM performance)
SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > 50
SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > 50
SELECT COUNT(room_number) AS room_count FROM classroom WHERE building <> 'Lamberton'
SELECT COUNT(*) AS number_of_classrooms FROM classroom WHERE building <> 'Lamberton'
SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department)
SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(budget) FROM department)
SELECT classroom.room_number, classroom.building FROM classroom WHERE (classroom.capacity >= 50 AND classroom.capacity <= 100) ORDER BY classroom.room_number
 SELECT classroom.room_number, classroom.building FROM classroom WHERE (classroom.capacity::FLOAT >= 50 AND classroom.capacity::FLOAT <= 100)
                        ```SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC NULLS LAST LIMIT 1
SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC NULLS LAST LIMIT 1
SELECT s.name FROM student AS s WHERE s.dept_name = 'History'
SELECT s.name FROM student AS s WHERE s.dept_name = 'History' ORDER BY s.tot_cred DESC NULLS LAST LIMIT 1
SELECT COUNT(room_number) AS room_count FROM classroom WHERE building = 'Lamberton'
SELECT COUNT(*) AS total_classrooms FROM classroom WHERE building = 'Lamberton'
SELECT CAST(COUNT(DISTINCT a.i_id) AS FLOAT) / NULLIF(COUNT(DISTINCT s.s_id), 0) AS ratio FROM student LEFT JOIN advisor AS a ON s.i_id = a.i_id
SELECT COUNT(DISTINCT s_id) AS num_students FROM advisor
SELECT COUNT(DISTINCT course.dept_name) AS number_of_departments FROM course
SELECT COUNT(DISTINCT course.dept_name) AS num_departments FROM course
SELECT COUNT(DISTINCT course.course_id) AS number_of_courses FROM course WHERE course.dept_name ILIKE '%Physics%'
SELECT COUNT(*) FROM course WHERE dept_name ILIKE '%Physics%'
 SELECT COUNT(*) FROM course WHERE NOT EXISTS (SELECT 1 FROM prerequisite WHERE prerequisite.course_id = course.course_id));
                        ```SELECT COUNT(*) FROM course WHERE credits IS NULL
SELECT course.title FROM course WHERE NOT course.course_id IN (SELECT prereq.dept_name FROM prerequisite)
SELECT course.title FROM course WHERE NOT course.course_id IN (SELECT prerequisite_course.dept_name FROM prerequisite_course)
SELECT COUNT(DISTINCT teaches.id) AS num_instructors FROM teaches
SELECT COUNT(DISTINCT teaches.id) AS num_instructors FROM teaches
SELECT SUM(department.budget) AS total_budget FROM department WHERE department.dept_name ILIKE '%Marketing%' OR department.dept_name ILIKE '%Finance%'
SELECT SUM(CASE WHEN dept_name = 'Marketing' THEN budget ELSE 0 END) + SUM(CASE WHEN dept_name = 'Finance' THEN budget ELSE 0 END) AS total_budget FROM department
SELECT instructor.dept_name FROM instructor WHERE instructor.name ILIKE '%Soisalon%'
SELECT instructor.dept_name FROM instructor WHERE instructor.name ILIKE '%Soisalon%'
SELECT COUNT(*) FROM classroom WHERE capacity < 50 AND building ILIKE '%Lamberton%'
SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50
SELECT department.dept_name, department.budget FROM department WHERE department.budget > (SELECT AVG(budget) FROM department)
SELECT department.dept_name, department.budget FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department)
SELECT instructor.name FROM instructor WHERE instructor.dept_name = 'Statistics' ORDER BY instructor.salary ASC NULLS FIRST LIMIT 1
SELECT instructor.name FROM instructor WHERE instructor.dept_name = 'Statistics' ORDER BY instructor.salary ASC NULLS FIRST LIMIT 1
SELECT c.title FROM course AS c JOIN department ON c.dept_name = d.dept_name WHERE d.dept_name ILIKE '%Statistics%' AND d.dept_name ILIKE '%Psychology%'
SELECT course.title FROM course WHERE course.dept_name ILIKE '%Statistics%' AND course.dept_name ILIKE '%Psychology%'
SELECT course.title FROM course WHERE course.dept_name ILIKE '%Statistics%' AND NOT course.dept_name ILIKE '%Psychology%'
SELECT course.title FROM course WHERE course.dept_name = 'Statistics' AND course.dept_name <> 'Psychology'
SELECT DISTINCT teaches.id FROM teaches WHERE teaches.year = 2009 AND teaches.semester = 'Fall' AND NOT teaches.id IN (SELECT teaches.id FROM teaches WHERE teaches.year = 2010 AND teaches.semester = 'Spring')
SELECT DISTINCT teaches.id FROM teaches WHERE teaches.semester = 'Fall' AND teaches.year = 2009 AND NOT teaches.id IN (SELECT teaches.id FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = 2010)
SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name ORDER BY course_count DESC NULLS LAST LIMIT 3
SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name ORDER BY course_count DESC NULLS LAST LIMIT 3
SELECT course.dept_name FROM course GROUP BY course.dept_name ORDER BY SUM(course.credits) DESC NULLS LAST LIMIT 1
SELECT course.dept_name, COUNT(course.credits) AS total_credits FROM course GROUP BY course.dept_name ORDER BY total_credits DESC NULLS LAST LIMIT 1
SELECT course.title, course.credits FROM course ORDER BY course.title, course.credits DESC NULLS LAST
SELECT course.title, course.credits FROM course ORDER BY course.title, course.credits DESC NULLS LAST
SELECT department.dept_name, department.budget FROM department ORDER BY department.budget ASC LIMIT 1
SELECT department.dept_name FROM department ORDER BY department.budget ASC LIMIT 1
SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC NULLS LAST
SELECT department.dept_name, department.building FROM department ORDER BY department.budget DESC NULLS LAST
SELECT instructor.name FROM instructor ORDER BY instructor.salary DESC NULLS LAST LIMIT 1
SELECT instructor.name FROM instructor ORDER BY instructor.salary DESC NULLS LAST LIMIT 1
SELECT instructor.salary, instructor.name FROM instructor ORDER BY instructor.salary ASC NULLS FIRST
SELECT instructor.salary, instructor.name FROM instructor ORDER BY instructor.salary ASC NULLS FIRST
SELECT student.name, student.dept_name FROM student ORDER BY student.tot_cred ASC NULLS FIRST
SELECT student.name, student.dept_name FROM student ORDER BY student.tot_cred ASC NULLS FIRST
SELECT classroom.building, COUNT(*) AS room_count FROM classroom WHERE classroom.capacity > 50 GROUP BY classroom.building
SELECT classroom.building, COUNT(*) AS room_count FROM classroom WHERE classroom.capacity > 50 GROUP BY classroom.building
SELECT classroom.building, MAX(classroom.capacity) AS max_capacity, AVG(classroom.capacity) AS avg_capacity FROM classroom GROUP BY classroom.building
SELECT classroom.building, MAX(classroom.capacity) AS max_capacity, AVG(classroom.capacity) AS avg_capacity FROM classroom GROUP BY classroom.building
SELECT c.title FROM course AS c WHERE NOT c.dept_name IS NULL GROUP BY c.title HAVING COUNT(c.dept_name) > 1
SELECT course.title FROM course GROUP BY course.title HAVING COUNT(course.dept_name) > 1
SELECT course.dept_name, SUM(course.credits) AS total_credits FROM course GROUP BY course.dept_name
SELECT c.dept_name, SUM(c.credits) AS total_credits FROM course AS c GROUP BY c.dept_name
SELECT MIN(instructor.salary) AS min_salary FROM instructor WHERE instructor.dept_name IN (SELECT name FROM instructor GROUP BY name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))
SELECT instructor.salary FROM instructor WHERE instructor.salary = (SELECT MIN(instructor.salary) FROM instructor) AND EXISTS(SELECT 1 FROM (SELECT AVG(dept_avg_salary) AS avg_salary, dept_name FROM (SELECT id, AVG(salary) AS dept_avg_salary FROM instructor GROUP BY id) AS subquery GROUP BY subquery.dept_name HAVING AVG(subquery.dept_avg_salary) > (SELECT AVG(salary) FROM instructor)) AS subquery2)
SELECT section.semester, section.year, COUNT(*) AS course_count FROM section GROUP BY section.semester, section.year ORDER BY section.semester, section.year
SELECT section.semester, section.year, COUNT(*) AS course_count FROM section GROUP BY section.semester, section.year ORDER BY section.semester, section.year
SELECT MAX(year) AS max_year FROM section
SELECT MAX(year) AS max_year FROM section
SELECT MAX(section.year), section.semester FROM section GROUP BY section.semester
SELECT year, semester, COUNT(course_id) AS course_count FROM section GROUP BY year, semester ORDER BY course_count DESC NULLS LAST LIMIT 1
SELECT student.dept_name FROM student GROUP BY student.dept_name ORDER BY COUNT(student.id) DESC NULLS LAST LIMIT 1
SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1
SELECT student.dept_name, COUNT(student.id) AS total_students FROM student GROUP BY student.dept_name
SELECT student.dept_name, COUNT(*) AS total_students FROM student GROUP BY student.dept_name
SELECT takes.semester, takes.year FROM takes GROUP BY takes.semester, takes.year ORDER BY COUNT(takes.id) ASC LIMIT 1
SELECT takes.semester, takes.year, COUNT(takes.id) AS student_count FROM takes GROUP BY takes.semester, takes.year ORDER BY student_count ASC LIMIT 1
SELECT course_id FROM course WHERE NOT course_id IN (SELECT dept_name FROM prerequisite)
SELECT course.course_id FROM course WHERE NOT course.course_id IN (SELECT prereq.dept_name FROM prequisite)
SELECT course.title FROM course WHERE NOT course.course_id IN (SELECT prereq.dept_name FROM prereq)
SELECT course.title FROM course WHERE NOT course.course_id IN (SELECT prereq.dept_name FROM prequisite)
SELECT c.title FROM course AS c WHERE c.dept_name = 'International Finance' ORDER BY c.credits DESC NULLS LAST LIMIT 1
SELECT c.title FROM course AS c WHERE c.dept_name = 'International Finance'
SELECT c.title FROM course AS c JOIN prerequisites ON c.course_id = p.credits WHERE p.dept_name ILIKE '%Differential%Geometry%'
SELECT course.title FROM course WHERE course.credits > 10
SELECT student.name FROM student WHERE DATE_PART(YEAR, COURSE_START_DATE) = 2003 AND DATE_PART(MONTH, COURSE_START_DATE) = 10
SELECT student.name FROM student WHERE CAST(student.tot_cred AS FLOAT) >= 157000 AND DATE_PART(YEAR, TO_DATE(student.id, 'FMMDD')) = 2003
SELECT c.title AS "Course Title" FROM course AS c WHERE c.course_id = (SELECT dept_name FROM course WHERE title ILIKE '%Mobile%Computing%')
SELECT course.title FROM course WHERE course.dept_name = 'Mobile Computing'
SELECT instructor.name FROM instructor WHERE NOT instructor.id IN (SELECT course_instructor.dept_name FROM instructor)
                        ```SELECT instructor.id FROM instructor WHERE NOT instructor.id IN (SELECT course_instructor.dept_name FROM instructor)
SELECT instructor.id FROM instructor WHERE NOT instructor.name IN (SELECT course.dept_name FROM instructor)
 SELECT instructor.name FROM instructor WHERE instructor.id NOT IN (SELECT course_instructor.instructor_id FROM course_instructor JOIN course ON course_instructor.course_id = course.id WHERE season = 'Spring');                       ```
SELECT instructor.name FROM instructor WHERE instructor.id NOT IN (SELECT course_instructor.instructor_id FROM course_instructor JOIN course ON course_instructor.course_id = course.id WHERE course.semester = 'Spring');                       
                        ```SELECT instructor.dept_name, AVG(instructor.salary) AS avg_salary FROM instructor GROUP BY instructor.dept_name ORDER BY avg_salary DESC NULLS LAST LIMIT 1
SELECT instructor.dept_name, AVG(instructor.salary) AS average_salary FROM instructor GROUP BY instructor.dept_name ORDER BY average_salary DESC NULLS LAST LIMIT 1
SELECT student.name FROM student WHERE NOT student.dept_name ILIKE '%Biology%'
                        SELECT student.name FROM student WHERE student.id NOT IN (SELECT course_student.student_id FROM course_student JOIN course ON course_student.course_id = course.id WHERE course.dept_name ILIKE '%Biology%');
                        
                        ```SELECT instructor.name, instructor.salary FROM instructor WHERE instructor.dept_name = 'Physics' AND instructor.salary < (SELECT AVG(instructor.salary) FROM instructor WHERE instructor.dept_name = 'Physics')
SELECT instructor.name, instructor.salary FROM instructor WHERE instructor.dept_name = 'Physics' AND instructor.salary < (SELECT AVG(instructor.salary) FROM instructor WHERE instructor.dept_name = 'Physics')
SELECT instructor.name FROM instructor WHERE instructor.dept_name ILIKE '%computer%science%'
SELECT instructor.name FROM instructor WHERE instructor.dept_name ILIKE '%Comp%Sci.%'
SELECT instructor.name FROM instructor WHERE instructor.dept_name ILIKE '%Comp.%Sci.%' AND instructor.salary > '80000'
SELECT instructor.name FROM instructor WHERE instructor.salary > '80000' AND instructor.dept_name ILIKE '%Comp.%Sci.%'
SELECT instructor.name FROM instructor WHERE instructor.name ILIKE '%dar%'
SELECT instructor.name FROM instructor WHERE instructor.name ILIKE '%dar%'
SELECT instructor.name FROM instructor GROUP BY instructor.name ORDER BY instructor.name ASC NULLS FIRST
SELECT instructor.name FROM instructor ORDER BY instructor.name
SELECT DISTINCT course_id FROM section WHERE year IN (2009, 2010) AND semester IN ('Fall', 'Spring')
SELECT DISTINCT course_id FROM section WHERE year IN (2009, 2010) AND semester IN ('Fall', 'Spring')
SELECT DISTINCT course_id FROM section WHERE year = 2009 AND semester = 'Fall' AND year = 2010 AND semester = 'Spring'
SELECT DISTINCT section.course_id FROM section WHERE section.year = 2009 AND section.semester = 'Fall' AND section.year = 2010 AND section.semester = 'Spring'
SELECT DISTINCT section.course_id FROM section WHERE section.semester = 'Fall' AND section.year = 2009 AND NOT section.course_id IN (SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010)
SELECT DISTINCT section.course_id FROM section WHERE section.semester = 'Fall' AND section.year = 2009 AND NOT section.course_id IN (SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010)
SELECT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor)
SELECT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor)
SELECT COUNT(DISTINCT teaches.id) AS total_instructors FROM teaches WHERE teaches.semester = 'Spring 2010'
SELECT COUNT(DISTINCT teaches.id) AS number_of_instructors FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = 2010
SELECT instructor.dept_name, AVG(instructor.salary) AS average_salary FROM instructor GROUP BY instructor.dept_name HAVING AVG(instructor.salary) > 42000
SELECT instructor.name, AVG(instructor.salary) AS average_salary FROM instructor WHERE instructor.salary > 42000 GROUP BY instructor.name
SELECT i.name FROM instructor AS i WHERE i.salary > (SELECT MIN(b.salary) FROM instructor AS b WHERE b.dept_name ILIKE '%Biology%')
 SELECT i.name FROM instructor AS i WHERE i.salary > (SELECT salary FROM instructor WHERE dept_name = 'Biology')
                        ```SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT AVG(instructor.salary) FROM instructor WHERE dept_name = 'Biology')
SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT MAX(instructor.salary) FROM instructor JOIN instructor ON instructor.dept_name = department.name WHERE department.name ILIKE '%Biology%') GROUP BY instructor.name
SELECT COUNT(Debate_ID) AS total_debates FROM debate
SELECT debate.venue FROM debate ORDER BY debate.num_of_audience ASC NULLS FIRST
SELECT d.date, d.venue FROM debate AS d
SELECT date FROM debate WHERE num_of_audience > 150
SELECT people.name FROM people WHERE people.age IN (35, 36)
SELECT CAST(COUNT(CASE WHEN age = MIN(age) THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion FROM people
SELECT people.party, COUNT(*) AS total_people FROM people GROUP BY people.party
SELECT p.party FROM people AS p GROUP BY p.party ORDER BY COUNT(p.people_id) DESC NULLS LAST LIMIT 1
SELECT debate.venue FROM debate GROUP BY debate.venue
SELECT p.name FROM people WHERE NOT p.people_id IN (SELECT d.party FROM people AS d)
SELECT Customers.customer_details FROM Customers ORDER BY Customers.customer_details ASC NULLS FIRST
SELECT Customers.customer_details FROM Customers ORDER BY Customers.customer_details ASC NULLS FIRST
SELECT Policies.Policy_Type_Code, COUNT(*) AS frequency FROM Policies GROUP BY Policies.Policy_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code ORDER BY COUNT(Policies.Policy_Type_Code) DESC NULLS LAST LIMIT 1
SELECT DISTINCT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code HAVING COUNT(Policies.customer_id) > 2
SELECT Policies.Policy_Type_Code FROM Policies GROUP BY Policies.Policy_Type_Code HAVING COUNT(Policies.customer_id) > 2
SELECT SUM(Amount_Paid) AS total_amount_paid, AVG(Amount_Paid) AS average_amount_paid FROM Claim_Headers
SELECT SUM(Amount_Piad) AS total_amount_paid, AVG(Amount_Piad) AS average_amount_paid FROM Claim_Headers
SELECT Customers.customer_details FROM Customers WHERE NOT Customers.customer_id IN (SELECT policyholders.customer_id FROM policyholders)
SELECT Customers.customer_details FROM Customers WHERE NOT Customers.customer_id IN (SELECT policyholders.customer_id FROM policyholders)
SELECT COUNT(*) AS total_claim_stages FROM Claims_Processing_Stages
SELECT COUNT(DISTINCT Claim_Status_ID) AS number_of_claim_stages FROM Claims_Processing_Stages
SELECT Customers.customer_details FROM Customers WHERE Customers.customer_details ILIKE '%Diana%'
SELECT Customers.customer_details FROM Customers WHERE "Diana" ILIKE '%customers.customer_details%'
SELECT Customers.customer_details FROM Customers
 SELECT customers.customer_details AS customer_name, staff_members.staff_member_details AS staff_member_name FROM customers JOIN staff_members ON customers.customer_id = staff_members.staff_member_id;
                        ```SELECT p.policy_type_code, COUNT(*) AS record_count FROM Policies AS p GROUP BY p.policy_type_code
SELECT p.policy_type_code, COUNT(*) AS COUNT FROM Policies AS p GROUP BY p.policy_type_code
SELECT Claims_status_descriptions.claim_status_description FROM Claims_Processing_Stages WHERE claims_status_descriptions.claim_status_name = 'Open'
SELECT Claims_having_Stages.claim_status_description FROM Claims_Processing_Stages WHERE Claims_having_stations.claim_status_name = 'Open'
SELECT COUNT(DISTINCT Claim_Outcome_Code) AS number_of_claim_outcome_codes FROM Claims_Processing
SELECT COUNT(DISTINCT Claims_outcome_code) AS number_of_claim_outcome_codes FROM Claims_Processing
SELECT COUNT(account_id) AS account_count FROM Accounts

COUNT(Accounts.account_id) AS total_accounts FROM Accounts;
                        
                        ```SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts
SELECT COUNT(DISTINCT customer_id) AS total_customers_with_accounts FROM Accounts
SELECT a.account_id, a.date_account_opened, a.account_name, a.other_account_details FROM Accounts AS a
SELECT a.account_id, TO_CHAR(a.date_account_opened, 'YYYY-MM-DD') AS account_creation_date, a.account_name, CAST(b.balance AS FLOAT) AS balance FROM Accounts AS a JOIN balances ON a.account_id = b.account_id
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(*) AS total_customers FROM Customers
SELECT customers.customer_id FROM customers WHERE NOT customers.customer_id IN (SELECT account_holders.customer_id FROM Customers)
SELECT Customers.customer_id FROM Customers WHERE NOT Customers.customer_id IN (SELECT phone_number FROM Customers)
SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts AS a GROUP BY a.customer_id
SELECT a.customer_id, COUNT(a.account_id) AS account_count FROM Accounts AS a GROUP BY a.customer_id
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(*) AS total_customers FROM Customers
SELECT genders.gender, COUNT(customers.customer_id) AS total_customers FROM Customers GROUP BY genders.gender
SELECT gender, COUNT(*) AS total_customers FROM Customers GROUP BY gender

COUNT(*) AS total_transactions FROM Financial_Transactions;
                        
                        ```SELECT COUNT(*) AS total_transactions FROM Financial_Transactions
SELECT Financial_Transactions.account_id, COUNT(Financial_Transactions.transaction_id) AS total_transactions FROM Financial_Transactions GROUP BY Financial_Transactions.account_id
SELECT Financial_Transactions.account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.account_id
SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions
SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions
SELECT transaction_id FROM Financial_Transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions)
SELECT ft.transaction_id FROM Financial_Transactions AS ft WHERE ft.transaction_amount > (SELECT AVG(ft.transaction_amount) FROM Financial_Transactions AS ft)
SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type
SELECT Financial_Transactions.transaction_type, SUM(Financial_Transactions.transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY Financial_Transactions.transaction_type
SELECT Financial_Transactions.account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.account_id ORDER BY transaction_count DESC NULLS LAST LIMIT 1

                        ```SELECT Products.product_size FROM Products
SELECT DISTINCT products.product_size FROM Products
SELECT DISTINCT products.product_color FROM Products
SELECT DISTINCT products.product_color FROM Products
SELECT Financial_Transactions.invoice_number, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.invoice_number
SELECT Financial_Transactions.invoice_number, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY Financial_Transactions.invoice_number
SELECT COUNT(*) AS total_invoices FROM Invoices
SELECT COUNT(*) AS total_invoices FROM Invoices
SELECT o.order_id, COUNT(i.invoice_number) AS num_invoices FROM Orders JOIN Invoices AS i ON o.order_id = i.order_id GROUP BY o.order_id
SELECT o.order_id, COUNT(i.invoice_number) AS num_invoices FROM orders JOIN Invoices AS i ON o.order_id = i.order_id GROUP BY o.order_id
SELECT p.product_name FROM Products AS p WHERE NOT p.product_name ILIKE '%order%'
SELECT p.product_name FROM Products WHERE NOT p.product_id IN (SELECT DISTINCT o.product_id FROM Products AS o)
SELECT o.order_id, CAST(oi.product_quantity AS INT) AS product_quantity FROM Order_Items AS oi JOIN Orders ON oi.order_id = o.order_id
SELECT o.order_id, COUNT(oi.product_quantity) AS total_products FROM Order_Items AS oi JOIN Orders ON oi.order_id = o.order_id GROUP BY o.order_id
SELECT oi.product_id, COUNT(DISTINCT oi.order_id) AS num_orders FROM Order_Items AS oi GROUP BY oi.product_id
SELECT oi.product_id, COUNT(DISTINCT oi.order_id) AS num_orders FROM Order_Items AS oi GROUP BY oi.product_id
SELECT o.order_id, COUNT(oi.product_id) AS product_count FROM orders JOIN Order_Items AS oi ON o.order_id = oi.order_id GROUP BY o.order_id
SELECT o.order_id, COUNT(DISTINCT oi.product_id) AS num_products FROM Order_Items AS oi JOIN Orders ON oi.order_id = o.order_id GROUP BY o.order_id
SELECT o.order_id, SUM(CAST(oi.product_quantity AS FLOAT)) AS total_quantity FROM Order_Items AS oi JOIN Orders ON oi.order_id = o.order_id GROUP BY o.order_id
SELECT o.order_id, COUNT(oi.product_quantity) AS total_product_quantity FROM Order_Items AS oi JOIN Orders ON oi.order_id = o.order_id GROUP BY o.order_id
SELECT COUNT(DISTINCT Products.product_id) AS number_of_products FROM Products WHERE NOT Products.product_id IN (SELECT OrderItem.product_id FROM Products AS OrderItems)
SELECT COUNT(*) AS total_products FROM Products WHERE NOT product_id IN (SELECT DISTINCT order_detail.product_id FROM orders JOIN order_detail ON orders.product_name = order_detail.product_name)
SELECT COUNT(*) FROM church WHERE open_date < '1850-01-01'
SELECT c.name, TO_CHAR(c.open_date, 'YYYY-MM-DD') AS open_date, COALESCE(org.organized_by, 'Unknown') AS organized_by FROM church AS c LEFT JOIN organ ON c.church_id = org.continuation_of
SELECT c.name FROM church AS c ORDER BY c.open_date DESC NULLS LAST
SELECT DATE_PART(YEAR, Open_Date) AS church_opening_year FROM church GROUP BY church_opening_year HAVING COUNT(Church_ID) >= 2
SELECT church.organized_by, church.name FROM church WHERE church.open_date BETWEEN 1830 AND 1840
SELECT DATE_PART('year', c.open_date) AS YEAR, COUNT(*) AS total_churches FROM church AS c GROUP BY YEAR ORDER BY YEAR NULLS FIRST
SELECT c.name, TO_CHAR(c.open_date, 'YYYY') AS open_year FROM church AS c WHERE c.open_date IN (SELECT MAX(open_date) FROM church GROUP BY name HAVING COUNT(*) > 2)
SELECT COUNT(*) FROM people WHERE age > 30 AND is_male = 'female'
SELECT people.country FROM people WHERE people.age > '30' AND people.age < '25' AND people.is_male = 'Yes'
SELECT MIN(people.age) AS min_age, MAX(people.age) AS max_age, AVG(people.age) AS avg_age FROM people
SELECT p.name, p.country FROM people AS p WHERE p.age < (SELECT AVG(age) FROM people)
SELECT p.name, CAST(p.age AS FLOAT) FROM people AS p WHERE p.is_male = 'Male' AND NOT p.people_id IN (SELECT w.people_id FROM weddings)
SELECT c.name FROM church AS c LEFT JOIN wedding ON c.church_id = w.church_id AND DATE_PART(YEAR, w.open_date) = 2015 WHERE w.church_id IS NULL
SELECT COUNT(*) AS number_of_weddings FROM wedding WHERE year = 2016
SELECT people.country, COUNT(people.people_id) AS total_people FROM people GROUP BY people.country
SELECT COUNT(DISTINCT Church_ID) AS number_of_churches FROM wedding WHERE Year = 2016

COUNT(artist.artist_id) AS total_artists FROM artist;
                        
                        ```SELECT COUNT(*) AS total_artists FROM artist
SELECT a."Name", a.Age, a.Country FROM artist AS a ORDER BY a.Year_Join DESC NULLS LAST
SELECT a.name, CAST(a.age AS FLOAT) AS age, c.country FROM artist AS a JOIN country ON a.country = c.artist_id ORDER BY a.year_join DESC NULLS LAST
SELECT DISTINCT artist.country FROM artist
SELECT artist.country FROM artist GROUP BY artist.country
SELECT a."Name", a.Year_Join FROM artist AS a WHERE a."Country" <> 'United States'
SELECT artist.name, CAST(artist.year_join AS FLOAT) AS year_join FROM artist WHERE artist.country <> 'United States'
SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990
SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990
 SELECT AVG(Age) AS average_age, MIN(Age) AS min_age FROM artist WHERE "Country" ILIKE '%United%States%'
                        ``` SELECT AVG(Age) AS average_age, MIN(Age) AS min_age FROM artist WHERE "Country" ILIKE '%United%States%'
                        ```
                        ```SELECT a."Name" FROM artist AS a ORDER BY a.year_join DESC NULLS LAST LIMIT 1
SELECT COUNT(Year) FROM exhibition WHERE Year >= 2005
SELECT COUNT(*) FROM exhibition WHERE year >= 2005
SELECT exhibition.theme, exhibition.year FROM exhibition WHERE exhibition.ticket_price < 15
SELECT exhibition.theme, CAST(exhibition.year AS TEXT) FROM exhibition WHERE exhibition.ticket_price < 15
SELECT artist.name FROM artist WHERE NOT artist.artist_id IN (SELECT exhibition.artist_id FROM exhibition)
SELECT a.name FROM artist AS a LEFT JOIN exhibition_artist ON a.artist_id = ea.artist_id WHERE ea.artist_id IS NULL
SELECT AVG(Ticket_Price), MIN(Ticket_Price), MAX(Ticket_Price) FROM exhibition WHERE Year < 2009
SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE year < 2009
SELECT exhibition.theme, exhibition.year FROM exhibition ORDER BY exhibition.ticket_price DESC NULLS LAST
SELECT exhibition.theme, exhibition.year FROM exhibition ORDER BY exhibition.ticket_price DESC NULLS LAST
SELECT a.name FROM artist AS a LEFT JOIN exhibition_artist ON a.artist_id = ea.artist_id WHERE ea.artist_id IS NULL
SELECT a.name FROM artist AS a LEFT JOIN exhibition ON a.artist_id = e.artist_id AND DATE_PART(YEAR, e.year_join) = 2004 WHERE e.artist_id IS NULL
 SELECT i_id FROM item WHERE title ilike '%orange%'
                        ```SELECT i_id, title FROM item
SELECT COUNT(*) AS total_reviews FROM review
COUNT(DISTINCT useracct.u_id) AS total_users
SELECT AVG(rating) AS average_rating, MAX(rank) AS max_rank FROM review
SELECT MAX(rank) AS max_rank FROM review
SELECT COUNT(DISTINCT review.u_id) AS number_of_users FROM review
SELECT COUNT(DISTINCT review.i_id) AS number_of_items_reviewed FROM review
SELECT COUNT(*) AS total_items FROM item
SELECT u.name FROM useracct LEFT JOIN useracct AS r ON u.u_id = r.u_id WHERE r.u_id IS NULL
SELECT item.title FROM item ORDER BY item.title ASC NULLS FIRST
 SELECT item.title FROM item WHERE item.i_id NOT IN (SELECT review.item_id FROM review);
                        ```SELECT useracct.name FROM useracct WHERE NOT useracct.u_id IN (SELECT reviewer.u_id FROM useracct)
SELECT COUNT(*) AS total_users FROM useracct
SELECT COUNT(*) AS total_items_without_reviews FROM item
SELECT COUNT(*) AS total_players FROM player
SELECT player.player_name FROM player ORDER BY player.votes ASC NULLS FIRST
SELECT player.gender, player.occupation FROM player
SELECT player.player_name, player.residence FROM player WHERE "Occupation" ILIKE '%Researcher%' AND "occupation" ILIKE '%not%Researcher%'
SELECT player.sponsor_name FROM player WHERE (player.residence = 'Brandon' OR player.residence = 'Birtle')
SELECT p.player_name FROM player AS p ORDER BY p.votes DESC NULLS LAST LIMIT 1
SELECT player.occupation, COUNT(*) AS total_play FROM player GROUP BY player.occupation
SELECT player.occupation, COUNT(*) AS frequency FROM player GROUP BY player.occupation ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT DISTINCT player.residence FROM player GROUP BY player.residence HAVING COUNT(player_id) >= 2
SELECT player.player_name FROM player LEFT JOIN player ON player.player_id = coach.sponsor_name WHERE coach.sponsor_name IS NULL
SELECT DISTINCT residence FROM player WHERE gender IN ('M', 'F')
SELECT COUNT(Gymnast_ID) AS total_gymnasts FROM gymnast
SELECT COUNT(*) FROM gymnast
SELECT gymnast.gymnast_id, SUM(gymnast.total_points) AS total_points FROM gymnast GROUP BY gymnast.gymnast_id ORDER BY total_points DESC NULLS LAST
SELECT gymnast.gymnast_id, SUM(gymnast.total_points) AS total_points FROM gymnast GROUP BY gymnast.gymnast_id ORDER BY total_points DESC NULLS LAST
SELECT gymnast.gymnast_id, gymnast.floor_exercise_points FROM gymnast ORDER BY gymnast.floor_exercise_points DESC NULLS LAST
SELECT gymnast.gymnast_id, gymnast.floor_exercise_points, gymnast.total_points FROM gymnast ORDER BY gymnast.floor_exercise_points DESC NULLS LAST
SELECT AVG(gymnast.horizontal_bar_points) AS average_horizontal_bar_points FROM gymnast
SELECT AVG(gymnast.horizontal_bar_points) AS average_horizontal_bar_points FROM gymnast
SELECT people.name FROM people ORDER BY people.name ASC NULLS FIRST
SELECT p.name FROM people AS p ORDER BY p.name ASC NULLS FIRST
SELECT MAX(people.age) AS oldest_person_age FROM people
SELECT people.age, people.height FROM people ORDER BY people.height DESC NULLS LAST LIMIT 1
SELECT p.name FROM people AS p ORDER BY p.age DESC NULLS LAST LIMIT 5
SELECT p.name FROM people AS p ORDER BY p.age DESC NULLS LAST LIMIT 5
SELECT DISTINCT people.name FROM people WHERE NOT people.name IN (SELECT gymnasts.hometown FROM people)
SELECT people.age FROM people WHERE people.age IS NULL
SELECT p.height FROM people AS p WHERE p.age > 23 AND p.age < 20
SELECT DISTINCT people.hometown FROM people WHERE age > 23 AND age < 20
SELECT COUNT(DISTINCT people.hometown) AS num_homes FROM people
SELECT COUNT(DISTINCT people.hometown) AS num_homes FROM people
SELECT COUNT(*) AS total_accounts FROM ACCOUNTS
SELECT COUNT(*) AS account_count FROM ACCOUNTS
SELECT SUM(checking.balance) AS total_flow FROM CHECKING
SELECT SUM(checking.balance) AS total_balance FROM CHECKING
SELECT AVG(checking.balance) AS average_flow FROM CHECKING
SELECT AVG(checking.balance) AS average_balance FROM CHECKING
SELECT COUNT(*) AS account_count FROM SAVINGS WHERE balance > (SELECT AVG(balance) FROM SAVINGS)
SELECT COUNT(*) FROM SAVINGS WHERE savings.custid > (SELECT AVG(savings.custid) FROM savings)
SELECT accounts.name FROM ACCOUNTS ORDER BY accounts.name ASC NULLS FIRST
SELECT accounts.name FROM ACCOUNTS ORDER BY accounts.name ASC NULLS FIRST
SELECT COUNT(*) FROM browser WHERE market_share >= 5
SELECT browser.name FROM browser ORDER BY browser.market_share DESC NULLS LAST
SELECT browser.id AS "Browser ID", browser.name AS "Browser Name", browser.market_share AS "Market Share" FROM browser
SELECT MAX(market_share) AS max_market_share, MIN(market_share) AS min_market_share, AVG(market_share) AS avg_market_share FROM browser WHERE name IN ('Internet Explorer', 'Firefox', 'Safari')
 SELECT browser.id, browser.market_share FROM browser WHERE browser.name ilike '%Safari%'
                        ```SELECT Web_client_accelerator.name, Web_client_accelerator.operating_system FROM Web_client_accelerator WHERE Web_client_accelerator.connection <> 'Broadband'
SELECT COUNT(DISTINCT Web_client_accelerator.client) AS client_count FROM Web_client_accelerator
SELECT COUNT(*) AS total_incompatible_accelerators FROM Web_client_accelerator WHERE NOT operating_system IN ('Firefox', 'Safari') AND NOT name IN ('Chrome', 'Edge')
SELECT Web_client_accelerator.name, Web_client_accelerator.operating_system FROM Web_client_accelerator WHERE "Operating system" ILIKE '%Opera%' ORDER BY Web_client_accelerator.name
SELECT Web_client_accelerator.name FROM Web_client_accelerator WHERE Web_client_accelerator.name ILIKE '%Opera%'
SELECT Web_client_accelerator.operating_system, COUNT(*) AS total_web_accelerators FROM Web_client_accelerator GROUP BY Web_client_accelerator.operating_system
SELECT COUNT(*) AS total_wrestlers FROM wrestler
SELECT COUNT(*) AS total_wrestlers FROM wrestler
SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held DESC NULLS LAST
SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held DESC NULLS LAST
SELECT wrestler.name FROM wrestler ORDER BY CAST(wrestler.days_held AS FLOAT) ASC NULLS FIRST LIMIT 1
SELECT wrestler.name FROM wrestler ORDER BY CAST(wrestler.days_held AS FLOAT) ASC NULLS FIRST LIMIT 1
SELECT wrestler.reign FROM wrestler WHERE wrestler.location <> 'Tokyo,Japan' GROUP BY wrestler.reign
SELECT wrestler.name, COUNT(wrestler.reign) AS total_reigns FROM wrestler WHERE wrestler.location <> 'Tokyo, Japan' GROUP BY wrestler.name ORDER BY total_reigns DESC NULLS LAST
SELECT wrestler.name, wrestler.location FROM wrestler
SELECT wrestler.name, wrestler.location FROM wrestler
SELECT Eliminations.Elimimations_Move FROM Elimination WHERE Eliminations.Team = 'Team Orton'
SELECT Eliminations.Wrestler_ID, Eliminations.Eliminated_by FROM Elimination WHERE "Team" ILIKE '%Orton%' ORDER BY Eliminations.Wrestler_ID
SELECT Eliminations.Team, COUNT(Eliminations.Eliminations_ID) AS num_eliminations FROM Elimination GROUP BY Eliminations.Team
SELECT e.team, COUNT(e.elimination_id) AS num_eliminations FROM Elimination AS e GROUP BY e.team
SELECT DISTINCT Eliminations.Team FROM Elimination GROUP BY Eliminations.Team HAVING COUNT(Eliminations.Eliminations_ID) > 3
SELECT Eliminations.Team FROM Elimination GROUP BY Eliminations.Team HAVING COUNT(Eliminations.Eliminations_ID) > 3
SELECT wrestler.name, COUNT(wrestler.reign) AS total_reigns, SUM(CAST(wrestler.days_held AS INT)) AS total_days_held FROM wrestler GROUP BY wrestler.name
SELECT wrestler.reign, CAST(wrestler.days_held AS FLOAT) AS days_held FROM wrestler
SELECT wrestler.name FROM wrestler WHERE CAST(wrestler.days_held AS FLOAT) < 100
SELECT wrestler.name FROM wrestler WHERE CAST(wrestler.days_held AS FLOAT) < 100
SELECT wrestler.reign, COUNT(*) AS frequency FROM wrestler GROUP BY wrestler.reign ORDER BY frequency DESC NULLS LAST LIMIT 10
SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT(reign) DESC NULLS LAST LIMIT 1
SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(wrestler.wrestler_id) > 2
SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(wrestler.wrestler_id) > 2
SELECT wrestler.name FROM wrestler WHERE NOT wrestler.event IS NULL
SELECT wrestler.name FROM wrestler WHERE wrestler.reign <> 'eliminated'
SELECT DISTINCT Eliminations.Team FROM Elimination WHERE Eliminations.Eliminated_by ILIKE '%Orton%' AND Eliminations.Eliminated_by ILIKE '%Benjamin%'
SELECT DISTINCT Eliminations.Team FROM Elimination WHERE "Eliminated_by" ILIKE '%Orton%' AND "Eliminated_by" ILIKE '%Benjamin%'
SELECT COUNT(DISTINCT Eliminations.Team) AS num_teams_eliminated FROM Elimination
SELECT COUNT(DISTINCT Eliminations.Team) AS number_of_teams FROM Elimination
SELECT Eliminations.Time FROM Elimination WHERE (Eliminations.Wrestler_ID = 'Punk' OR Eliminations.Wrestler_ID = 'Orton') GROUP BY Eliminations.Time
SELECT Eliminations.Time FROM Elimination WHERE Eliminations.Eliminated_By ILIKE '%Punk%' OR Eliminations.Eliminated_by ILIKE '%Orton%'
SELECT COUNT(*) FROM School
SELECT COUNT(*) FROM School
SELECT School_name FROM School ORDER BY school_name ASC NULLS FIRST
SELECT school.school_name, school.location, school.mascot FROM School
SELECT SUM(Enrollment) AS total_enrollment, AVG(Enrollment) AS average_enrollment FROM School
SELECT school.mascot FROM School WHERE school.enrollment > (SELECT AVG(enrollment) FROM School)
SELECT School.school_name FROM School ORDER BY school.enrollment ASC NULLS FIRST LIMIT 1
SELECT AVG(Enrollment) AS average_enrollment, MAX(Enrollment) AS max_enrollment, MIN(Enrollment) AS min_enrollment FROM School
SELECT COUNT(school_id) AS school_count, SUM(enrollment) AS total_enrollment FROM School GROUP BY county
SELECT endowment.endowment_id, SUM(endowment.amount) AS total_amount FROM endowment GROUP BY endowment.endowment_id ORDER BY total_amount DESC NULLS LAST
SELECT school_name FROM School WHERE LOWER(school_name) = FALSE
SELECT endowment.donator_name FROM endowment WHERE endowment.amount >= 9
SELECT endowment.donator_name, MAX(endowment.amount) AS max_amount FROM endowment GROUP BY endowment.donator_name ORDER BY max_amount DESC NULLS LAST
SELECT COUNT(*) FROM budget WHERE total_budget_percent_invested > 3000 AND year <= 2001
SELECT COUNT(*) FROM budget WHERE year <= 2001 AND budgeted > 3000
SELECT endowment.donator_name FROM endowment
SELECT COUNT(*) FROM budget WHERE budgeted < invested
failure
SELECT COUNT(building_id) AS number_of_buildings FROM building
SELECT building.name, building.street_address, COUNT(building.floors) AS total_floors FROM building GROUP BY building.name, building.street_address ORDER BY total_floors DESC NULLS LAST
SELECT building.name FROM building ORDER BY building.years_as_tallest DESC NULLS LAST LIMIT 1
SELECT AVG(floors) AS average_floors, MAX(floors) AS max_floors, MIN(floors) AS min_floors FROM building
SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(name) FROM building) OR floors > (SELECT AVG(floors) FROM building)
SELECT building.name FROM building WHERE building.height_feet >= 200 AND building.floors >= 20
SELECT Institution.Institution FROM Institution WHERE Institution.founded > '1990' AND Institution.type ILIKE '%Private%'
SELECT Institution.Type, COUNT(Institution.institution_id) AS num_institutions, SUM(institution.enrollment) AS total_enrollment FROM Institution GROUP BY institution.type
SELECT Institution.type, COUNT(Institution_id) AS number_of_institutions FROM Institution GROUP BY Institution.type ORDER BY number_of_institutions DESC NULLS LAST LIMIT 1
SELECT Institution.Type FROM Institution WHERE Institution.Founded > '1990' AND Institution.Enrollment >= 1000
SELECT building.name FROM building LEFT JOIN institution ON building.building_id = institution.building_id WHERE institution.building_id IS NULL
SELECT building.name FROM building WHERE NOT building.years_as_tallest ILIKE '%2003%'
SELECT Institution.Type FROM Institution GROUP BY Institution.Type
SELECT COUNT(*) AS num_institutions_without_protein FROM Institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)
SELECT DISTINCT LOCATION FROM cinema WHERE CAPacity <= 800
SELECT DISTINCT cinema.location FROM cinema WHERE (cinema.openning_year = 2010 OR cinema.openning_year = 2011) AND (cinema.openning_year = 2011 OR cinema.openning_year = 2010)

COUNT(Cinema_ID) AS total_cinemas FROM cinema;
                        
                        ```SELECT COUNT(*) FROM cinema
SELECT c.name, TO_CHAR(TO_TIMESTAMP(c.opening_year), 'YYYY') AS opening_year, c.capacity FROM cinema AS c
SELECT c.name, c.location FROM cinema AS c WHERE c.capacity > (SELECT AVG(capacity) FROM cinema)
SELECT DISTINCT cinema.location FROM cinema
SELECT DISTINCT cinema.location FROM cinema
SELECT c.name, CAST(c.opening_year AS TEXT) AS opening_year FROM cinema AS c ORDER BY c.opening_year DESC NULLS LAST
SELECT c.name, c.location FROM cinema AS c WHERE c.capacity = (SELECT MAX(capacity) FROM cinema)
SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011
SELECT cinema.location, COUNT(cinema.cinema_id) AS number_of_cinemas FROM cinema GROUP BY cinema.location
SELECT cinema.location FROM cinema WHERE cinema.openning_year >= 2010 GROUP BY cinema.location ORDER BY COUNT(cinema.location) DESC NULLS LAST LIMIT 1
SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) >= 2
SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) >= 2
SELECT film.title, film.directed_by FROM film
SELECT film.title, film.directed_by FROM film
SELECT DISTINCT film.directed_by FROM film
SELECT DISTINCT film.directed_by FROM film
SELECT d.production_code, COUNT(f.film_id) AS film_count FROM film AS d JOIN film ON d.title = f.directed_by GROUP BY d.production_code
SELECT film.title, film.directed_by FROM film WHERE number_in_season IS NULL
SELECT DISTINCT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) > 1
SELECT cinema.location FROM cinema WHERE cinema.capacity > 300 GROUP BY cinema.location HAVING COUNT(cinema.cinema_id) > 1
SELECT COUNT(*) FROM film WHERE title ILIKE '%dumb%'
SELECT COUNT(*) FROM film WHERE title ILIKE '%Dummy%'
SELECT p.customer_id, SUM(p.amount_paid) AS total_amount_paid FROM Payments AS p GROUP BY p.customer_id ORDER BY total_amount_paid DESC NULLS LAST
SELECT Products_Booked.product_id FROM Products_Booked WHERE Products_Booked.booked_count >= 3
SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products_for_Hire
SELECT Customers.first_name, Customers.last_name, Customers.gender_mf FROM Customers WHERE "good_or_bad_customer" ILIKE '%Good%' ORDER BY Customers.last_name
SELECT AVG(amount_due) AS average_amount_due FROM Payments
SELECT MAX(booked_count) AS max_booked_count, MIN(booked_count) AS min_booked_count, AVG(booked_count) AS avg_booked_count FROM Products_Booked
SELECT DISTINCT payments.payment_type_code FROM Payments
SELECT Products_for_Hire.product_name, CAST(Products_for_Hire.daily_hire_cost AS FLOAT) AS daily_hire_cost FROM Products_for_Hire WHERE Products_for_Hire.product_name ILIKE '%Book%'
SELECT COUNT(*) FROM Products_for_Hire WHERE daily_hire_cost <= 200
 SELECT Payments.payment_date FROM Payments WHERE (Payments.amount_paid > 300 OR Payments.payment_type_code = 'check')
                        ```SELECT p.product_name, p.product_description FROM Products_for_Hire AS p WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20
SELECT COUNT(Phone_ID) AS total_phones FROM phone
SELECT phone.name FROM phone ORDER BY phone.price ASC NULLS FIRST
SELECT phone.memory_in_g, phone.carrier FROM phone
SELECT DISTINCT phone.carrier FROM phone WHERE phone.memory_in_g > 32
SELECT phone.name FROM phone WHERE phone.carrier IN ('Sprint', 'TMobile')
SELECT phone.carrier FROM phone ORDER BY price DESC NULLS LAST LIMIT 1
SELECT phone.carrier, COUNT(phone.phone_id) AS number_of_phones FROM phone GROUP BY phone.carrier
SELECT phone.carrier, COUNT(phone.phone_id) AS frequency FROM phone GROUP BY phone.carrier ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT DISTINCT phone.carrier FROM phone WHERE (phone.memory_in_g < 32 AND phone.memory_in_g > 64)
SELECT phone.name FROM phone WHERE phone.carrier IS NULL
SELECT COUNT(*) FROM company WHERE main_industry ILIKE '%gas%'
SELECT COUNT(Company_ID) AS total_companies FROM company
SELECT c.company, r.rank FROM company AS c JOIN (SELECT company_id, RANK() OVER (ORDER BY sales_billion DESC NULLS LAST) AS rank FROM company) AS r ON c.company_id = r.company_id
SELECT c.company, ROW_NUMBER() OVER (ORDER BY s.sales_billion DESC NULLS LAST) AS rank FROM company AS c JOIN sales ON c.company_id = s.company_id
SELECT c.company, c.main_industry FROM company AS c WHERE c.headquarters <> 'USA'
SELECT company.company, company.main_industry FROM company WHERE "Headquarters" <> 'United States'
SELECT c.company, c.headquarters FROM company AS c ORDER BY c.market_value DESC NULLS LAST
SELECT company.company, company.headquarters FROM company ORDER BY company.market_value DESC NULLS LAST
SELECT MIN(market_value) AS min_market_value, MAX(market_value) AS max_market_value, AVG(market_value) AS avg_market_value FROM company
WITH company_market AS (SELECT company.company, MAX(company.market_value) AS max_market_value, MIN(company.market_value) AS min_market_value, AVG(company.market_value) AS avg_market_value FROM company GROUP BY company.company), market_capitalization AS (SELECT c.company, mc.max_market_value, mc.min_market_value, mc.avg_market_value FROM company_market JOIN market_cap ON c.company = mc.company) SELECT mc.company, mc.max_market_value, mc.min_market_value, mc.avg_market_value FROM market_capitalis
SELECT company.main_industry FROM company
SELECT company.main_industry FROM company GROUP BY company.main_industry
SELECT headquarters, COUNT(*) AS company_count FROM company GROUP BY headquarters
SELECT headquarters, COUNT(*) AS company_count FROM company GROUP BY headquarters
SELECT company.main_industry, SUM(company.market_value) AS total_market_value FROM company GROUP BY company.main_industry
SELECT company.main_industry, SUM(company.market_value) AS total_market_value FROM company GROUP BY company.main_industry
SELECT company.main_industry, SUM(company.market_value) AS total_market_value, COUNT(*) AS number_of_companies FROM company GROUP BY company.main_industry ORDER BY total_market_value DESC NULLS LAST, number_of_companies DESC NULLS LAST LIMIT 1
WITH industry_market AS (SELECT main_industry, MAX(market_value) AS max_market_value FROM company GROUP BY main_industry), company_count AS (SELECT main_industry, COUNT(company_id) AS total_companies FROM company GROUP BY main_industry) SELECT industry_market.main_industry, company_count.total_companies FROM industry_market JOIN company_count ON industry_market.main_industry = company_count.main_industry
SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ILIKE '%banking%' GROUP BY company.headquarters HAVING COUNT(company.company_id) >= 2
SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ILIKE '%banking%' GROUP BY company.headquarters HAVING COUNT(company.company_id) >= 2
SELECT g.station_id, g.location, g.manager_name FROM gas_station AS g ORDER BY g.open_year
SELECT g.station_id, g.location, g.manager_name FROM gas_station AS g ORDER BY g.open_year
SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
SELECT COUNT(*) AS total_gas_stations FROM gas_station WHERE open_year BETWEEN 2000 AND 2005
SELECT g.location, COUNT(*) AS station_count FROM gas_station AS g GROUP BY g.location ORDER BY h.location
SELECT gas_station.location, COUNT(*) AS station_count FROM gas_station GROUP BY gas_station.location ORDER BY gas_station.location
SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ILIKE '%banking%' AND company.main_industry ILIKE '%oil and gas%'
SELECT DISTINCT company.headquarters FROM company WHERE company.main_industry ILIKE '%banking%' AND company.main_industry ILIKE '%oil and gas%'
 SELECT headquarters FROM company WHERE main_industry not ilike '%banking%'
                        ```SELECT company.headquarters FROM company WHERE NOT company.main_industry ILIKE '%banking%' AND company.rank IS NULL
SELECT c.company, c.main_industry FROM company AS c WHERE c.assets_billion IS NULL
SELECT company.company, company.main_industry FROM company WHERE NOT company.headquarters ILIKE '%gas%' ORDER BY company.main_industry
SELECT m.manager_name, COUNT(*) AS station_count FROM gas_station AS g JOIN manager ON g.manager_name = m.manager_name WHERE open_year > 2000 GROUP BY m.manager_name ORDER BY representative_name DESC NULLS LAST LIMIT 1
SELECT m.manager_name, COUNT(*) AS number_of_stations FROM gas_station AS g JOIN manager ON g.manager_name = m.manager_name WHERE open_year > 2000 GROUP BY m.manager_name ORDER BY number_of_stations DESC NULLS LAST LIMIT 1
SELECT gas_station.location, gas_station.open_year FROM gas_station ORDER BY gas_station.open_year
SELECT g.location, CAST(g.open_year AS FLOAT) AS open_year FROM gas_station AS g ORDER BY open_year
 SELECT c.company_id, c.company, rank() OVER (PARTITION BY c.main_industry ORDER BY c.sales_billion DESC, c.profits_billion DESC) AS rank, m.market_value FROM company c JOIN market_cap m ON c.market_value = m.market_value AND c.company_id = m.company_id WHERE main_industry ILIKE '%banking%'
                        ```SELECT c.company, c.market_value, c.sales_billion, c.profits_billion, ROW_NUMBER() OVER (PARTITION BY c.company_id ORDER BY c.sales_billion DESC NULLS LAST, c.profits_billion DESC NULLS LAST) AS rank FROM company AS c WHERE main_industry = 'banking'
SELECT COUNT(Region_ID) AS number_of_regions FROM region
SELECT COUNT(*) FROM region
SELECT DISTINCT region.region_name FROM region ORDER BY region.label
SELECT region.region_name FROM region ORDER BY region.label
SELECT COUNT(*) AS total_parties FROM party
SELECT COUNT(DISTINCT party.party_id) AS total_parties FROM party
SELECT party.minister, (party.left_office - party.took_office) AS duration FROM party ORDER BY party.left_office
SELECT party.minister, party.took_office, party.left_office FROM party ORDER BY party.left_office
SELECT party.minister FROM party WHERE CAST(party.took_office AS DATE) > '1961-01-01' AND CAST(party.took_office AS DATE) < '1959-12-31'
SELECT party.minister FROM party WHERE CAST(party.took_office AS DATE) > '1961-01-01' AND CAST(party.took_office AS DATE) < '1959-12-31'
SELECT party.minister FROM party WHERE NOT party.minister ILIKE '%Progress%'
SELECT party.minister FROM party WHERE NOT party.party_name ILIKE '%Progress%'
SELECT p.minister, ROW_NUMBER() OVER (PARTITION BY p.party_id ORDER BY p.took_office DESC NULLS LAST) AS rank FROM party AS p
SELECT p.minister, p.took_office, p.left_office, RANK() OVER (PARTITION BY p.minister ORDER BY p.took_office DESC NULLS LAST) AS rank FROM party AS p
SELECT party.minister FROM party ORDER BY party.left_office DESC NULLS LAST LIMIT 1
SELECT party.minister FROM party ORDER BY party.left_office DESC NULLS LAST LIMIT 1
SELECT p.party_name FROM party LEFT JOIN party AS m ON p.party_id = m.party_id WHERE m.region_id IS NULL
SELECT p.party_name FROM party LEFT JOIN party AS m ON p.party_id = m.party_id WHERE m.region_id IS NULL
SELECT m.member_name FROM member AS m JOIN party_member ON m.member_id = p.member_id WHERE p.party_id IN (3, 1)
SELECT m1.member_name FROM member AS m1 JOIN member AS m2 ON (m1.member_id = m2.member_id AND m1.party_id <> m2.party_id) WHERE m1.party_id IN (3, 1)
SELECT COUNT(*) AS total_events FROM party_events
SELECT COUNT(*) AS total_events FROM party_events
SELECT member.member_name FROM member WHERE NOT member.member_id IN (SELECT event.member_id FROM member)
SELECT member.member_name FROM member WHERE NOT member.member_id IN (SELECT event.member_id FROM member)
SELECT party_events.event_name FROM party_events GROUP BY party_events.event_name HAVING COUNT(party_events.event_id) > 2
SELECT DISTINCT event_name FROM party_events GROUP BY event_name HAVING COUNT(event_id) > 2
SELECT COUNT(pilot_id) AS total_pilots FROM pilot
SELECT pilot.pilot_name FROM pilot ORDER BY pilot.rank ASC NULLS FIRST
SELECT pilot.position, pilot.team FROM pilot
SELECT DISTINCT pilot.position FROM pilot WHERE pilot.age > '30' ORDER BY pilot.position
SELECT pilot.pilot_name FROM pilot WHERE pilot.team IN ('Bradley', 'Fordham')
SELECT MAX(pilot.join_year) AS max_join_year FROM pilot
SELECT pilot.nationality, COUNT(*) AS total_pilots FROM pilot GROUP BY pilot.nationality
SELECT pilot.nationality, COUNT(pilot.nationality) AS frequency FROM pilot GROUP BY pilot.nationality ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT pilot.position FROM pilot WHERE (pilot.join_year > 2005 AND pilot.join_year < 2000) GROUP BY pilot.position HAVING COUNT(pilot.join_year) > 1
SELECT pilot.pilot_name FROM pilot WHERE pilot.pilot_name IS NULL
SELECT Ref_Document_Status.document_status_code FROM Ref_Document_Status
SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status WHERE Ref_Document_Status.document_status_code ILIKE '%working%'
SELECT Ref_Document_Types.document_type_code FROM Ref_Document_Types
SELECT Ref_Document_Types.document_type_description FROM Ref_Document_Types WHERE Ref_Document_Types.document_type_code = 'Paper'
SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents
SELECT Ref_Shipping_Agents.shipping_agent_code FROM Ref_Shipping_Agents
SELECT roles.role_code FROM Roles
SELECT roers.role_description FROM Roles WHERE role.role_code = 'ED'

COUNT(Employees.employee_id) AS total_employees FROM Employees;
                        
                        ```SELECT Documents.document_id, Documents.receipt_date FROM Documents

COUNT(*) filter (WHERE document_status_code = 'done') AS total_documents_with_status_code_done
                        ```SELECT Documents.document_type_code FROM Documents WHERE Documents.document_id = 2
SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = 'done' AND Documents.document_type_code = 'paper'
SELECT Documents.receipt_date FROM Documents WHERE Documents.document_id = 3
SELECT Documents_Mailed.mailing_date FROM Documents_Mailed WHERE Documents_Mailed.document_id = 7
SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = 'done' AND Documents.document_type_code = 'Paper' AND Documents.shipping_agent_code <> 'USPS'
SELECT Documents.document_id FROM Documents WHERE Documents.shipping_agent_code = 'USPS' AND Documents.document_status_code = 'done' AND Documents.document_type_code = 'Paper'
SELECT Document_Drafts.draft_details FROM Document_Drafts WHERE Document_Drafts.document_id = 7
SELECT COUNT(*) AS total_copies FROM Draft_Copies WHERE document_id = 2
SELECT dc.document_id, COUNT(*) AS copy_number FROM Draft_Copies AS dc GROUP BY dc.document_id ORDER BY copy_number DESC NULLS LAST LIMIT 1
SELECT document_id, COUNT(copy_number) AS total_copies FROM Draft_Copies GROUP BY document_id HAVING COUNT(copy_number) > 1
SELECT e.employee_name FROM Employees LEFT JOIN Employees AS d ON e.employee_id = d.employee_id WHERE d.employee_id IS NULL
SELECT c.document_id, COUNT(DISTINCT ch.employee_id) AS total_employees FROM Circulation_History AS ch JOIN Copy ON ch.copy_number = c.copy_number GROUP BY c.document_id
SELECT d.dname FROM department AS d ORDER BY d.mgr_start_date
SELECT dependent.dependent_name FROM dependent WHERE dependent.relationship ILIKE '%spouse%' AND NOT dependent.essn IS NULL
SELECT COUNT(*) FROM dependent WHERE sex = 'Female'
SELECT employee.fname, employee.lname FROM employee WHERE employee.salary > '30000'
SELECT employee.sex, COUNT(*) AS total_employees FROM employee WHERE salary < 50000 GROUP BY employee.sex
SELECT employee.lname, employee.fname, employee.address FROM employee ORDER BY employee.bdate ASC NULLS FIRST
SELECT p.participant_id, p.participant_type_code, p.participant_details FROM Participants AS p
SELECT COUNT(*) AS total_organizers FROM Participants WHERE Participant_Type_Code ILIKE '%Organizer%'
SELECT Services.Service_Type_Code FROM Services ORDER BY Services.Service_Type_Code ASC NULLS FIRST
SELECT Events.service_id, Events.event_details FROM Events
SELECT Participants.Participant_Type_Code, COUNT(*) AS frequency FROM Participants GROUP BY Participants.Participant_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(Participant_ID) DESC NULLS LAST LIMIT 1
 SELECT Events.Event_ID FROM Events WHERE "Event Details" NOT ILIKE '%Kenyatta%Kushn%'
                        ```SELECT COUNT(*) AS num_events_without_participants FROM Events WHERE Event_Details IS NULL
SELECT DISTINCT Participants_in_Events.Participant_ID FROM Participants_in_Events
SELECT races.name FROM races ORDER BY races.date DESC NULLS LAST LIMIT 1
SELECT races.name FROM races ORDER BY races.date DESC NULLS LAST LIMIT 1
SELECT races.name, races.date FROM races ORDER BY races.year DESC NULLS LAST LIMIT 1
SELECT races.name, MAX(races.date) AS most_recent_race FROM races GROUP BY races.name ORDER BY most_recent_race DESC NULLS LAST LIMIT 1
SELECT name FROM races WHERE year = 2017
SELECT races.name FROM races WHERE races.year = 2017
SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2014 AND 2017
SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2014 AND 2017
SELECT COUNT(DISTINCT drivers.driverId) AS total_drivers FROM results LEFT JOIN race_results ON drivers.driverId = race_results.driverId AND race_results.raceId IN (SELECT raceId FROM races WHERE number = 2009) WHERE race_results.driverId IS NULL
SELECT COUNT(DISTINCT drivers.driverId) AS number_of_drivers FROM results WHERE NOT drivers.driverId IN (SELECT results.driverId FROM races WHERE DATE_PART(YEAR, races.raceDate) = 2009)
SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality ILIKE '%German%'
SELECT forename, surname FROM drivers WHERE nationality = 'German' ORDER BY forename ASC NULLS FIRST, surname ASC NULLS FIRST
SELECT nationality, COUNT(*) AS total_constructors FROM constructors GROUP BY nationality ORDER BY total_constructors DESC NULLS LAST
SELECT nationality, COUNT(DISTINCT constructorId) AS num_constructors FROM constructors GROUP BY nationality
SELECT c.constructorId, COUNT(r.raceId) AS race_count FROM constructorStandings AS c JOIN race ON c.raceId = r.raceId GROUP BY c.constructorId
SELECT c.constructorId, COUNT(r.raceId) AS race_count FROM constructorStandings AS c JOIN races ON c.raceId = r.raceId GROUP BY c.constructorId
SELECT p.basketId, COUNT(*) AS total_drivers FROM pitStops AS p WHERE CAST(p.duration AS FLOAT) < (SELECT MIN(CAST(duration AS FLOAT)) FROM pitStops WHERE raceId = 841) GROUP BY p.basketId
 SELECT p.id AS "Pit Stop Id", ps.stop AS "Stop Number" FROM pitStops p JOIN (SELECT MIN(duration) AS minDuration FROM pitStops WHERE raceId = 841) minDur FROM pitStops ON p.duration > minDur.minDuration;
                        ```SELECT DISTINCT pitStops.basketId FROM pitStops WHERE (pitStops.stop) > (SELECT MIN(pitStops2.stop) FROM pitStops AS pitStops2 WHERE pitStops2.raceId = 841)
SELECT p.driverId, p.duration FROM pitStops AS p WHERE p.raceId = 841 AND p.stop > (SELECT MIN(stop) FROM pitStops WHERE raceId = 841)
SELECT DISTINCT drivers.forename FROM drivers ORDER BY drivers.forename ASC NULLS FIRST
SELECT drivers.forename FROM drivers GROUP BY drivers.forename ORDER BY drivers.forename ASC NULLS FIRST
SELECT DISTINCT races.name FROM races ORDER BY races.name DESC NULLS LAST
SELECT REVERSE(name) AS name FROM races ORDER BY name
SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN 2009 AND 2011
SELECT races.name FROM races WHERE races.year BETWEEN 2009 AND 2011
SELECT races.name FROM races WHERE (CAST(races.time AS TIME) > '12:00:00' OR CAST(races.time AS TIME) < '09:00:00') AND races.year = 2021
SELECT races.name FROM races WHERE (CAST(races.time AS TIME) > '12:00:00' OR CAST(races.time AS TIME) < '09:00:00') AND races.year = 2020
SELECT DISTINCT c.name FROM circuits AS c WHERE c.country IN ('UK', 'malaysia') ORDER BY c.name
SELECT circuits.name FROM circuits WHERE (circuits.country ILIKE '%UK%' OR circuits.country ILIKE '%malaysia%')
SELECT circuits.circuitId, circuits.location FROM circuits WHERE circuits.country IN ('France', 'Belgium') ORDER BY circuits.circuitId
 SELECT c.circuitId, c.location FROM circuits c WHERE c.country IN ('France', 'Belgium')
                        ```SELECT COUNT(*) AS total_technicians FROM technician
SELECT COUNT(*) AS total_technicians FROM technician
SELECT technician.name FROM technician ORDER BY technician.age ASC NULLS FIRST
SELECT technician.name FROM technician ORDER BY technician.age ASC NULLS FIRST
SELECT technician.team, technician.starting_year FROM technician
SELECT t.team, CAST(t.starting_year AS FLOAT) AS starting_year FROM technician AS t
SELECT technician.name FROM technician WHERE technician.team <> 'NYY'
SELECT technician.name FROM technician WHERE technician.team <> 'NYY'
SELECT technician.name FROM technician WHERE (technician.age = '36' OR technician.age = '37') AND NOT technician.age IS NULL
SELECT technician.name FROM technician WHERE technician.age = '36' OR technician.age = '37'
SELECT MIN(technician.starting_year) AS earliest_starting_year FROM technician
SELECT MIN(technician.starting_year) AS earliest_starting_year FROM technician
SELECT technician.team, COUNT(*) AS total_technicians FROM technician GROUP BY technician.team
SELECT t.team, COUNT(*) AS total_technicians FROM technician AS t GROUP BY t.team
SELECT technician.team FROM technician GROUP BY technician.team ORDER BY COUNT(technician.team) DESC NULLS LAST LIMIT 1
SELECT t.team, COUNT(*) AS total_technicians FROM technician AS t GROUP BY t.team ORDER BY total_technicians DESC NULLS LAST
SELECT DISTINCT technician.team FROM technician GROUP BY technician.team HAVING COUNT(technician.team) >= 2
SELECT DISTINCT technician.team FROM technician GROUP BY technician.team HAVING COUNT(technician.team) >= 2
SELECT technician.name FROM technician WHERE NOT technician.technician_id IN (SELECT machine_repair.technician_id FROM technician)
SELECT t.name FROM technician LEFT JOIN technician AS mt ON t.technician_id = mt.technician_id WHERE mt.technician_id IS NULL
SELECT technician.starting_year FROM technician WHERE technician.team IN ('CLE', 'CWS')
SELECT technician.starting_year FROM technician WHERE technician.team IN ('CLE', 'CWS')
SELECT COUNT(*) AS total_entrepreneurs FROM entrepreneur
SELECT COUNT(*) AS total_entrepreneurs FROM entrepreneur
SELECT entrepreneur.company FROM entrepreneur ORDER BY entrepreneur.money_requested DESC NULLS LAST
SELECT entrepreneur.company FROM entrepreneur ORDER BY entrepreneur.money_requested DESC NULLS LAST
SELECT entrepreneur.company, entrepreneur.investor FROM entrepreneur
SELECT e.investor AS investor_company, e.company AS company_name, c.people_id AS customer_id FROM entrepreneur JOIN entrepreneur AS c ON e.people_id = c.people_id
SELECT AVG(money_requested) AS average_money_requested FROM entrepreneur
 AVG(entrepreneur.money_requested) AS average_money_requested FROM entrepreneur;
                        ```SELECT people.name FROM people ORDER BY people.weight ASC NULLS FIRST
SELECT people.name FROM people ORDER BY people.weight ASC NULLS FIRST
SELECT MIN(people.weight) AS minimum_weight FROM people
SELECT MIN(people.weight) AS minimum_weight FROM people
SELECT entrepreneur.investor AS investor_name, COUNT(entrepreneur.people_id) AS num_entrepreneurs FROM entrepreneur GROUP BY entrepreneur.investor
SELECT entrepreneur.investor, CAST(COUNT(entrepreneur.people_id) AS FLOAT) / NULLIF((SELECT COUNT(DISTINCT people_id) FROM entrepreneur), 0) AS fraction_of_total_entrepreneurs FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY fraction_of_total_entrepreneurs DESC NULLS LAST
SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY COUNT(entrepreneur.people_id) DESC NULLS LAST LIMIT 1
SELECT entrepreneur.investor, COUNT(entrepreneur.people_id) AS num_investments FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY num_investments DESC NULLS LAST LIMIT 1
SELECT DISTINCT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(entrepreneur.entrepreneur_id) >= 2
SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(entrepreneur.entrepreneur_id) >= 2
SELECT p.name FROM people WHERE NOT p.people_id IN (SELECT e.date_of_birth FROM people AS e)
SELECT p.name FROM people WHERE NOT p.people_id IN (SELECT e.date_of_birth FROM people AS e)
SELECT entrepreneur.investor FROM entrepreneur WHERE (entrepreneur.money_requested > 140000 OR entrepreneur.money_requested < 120000) GROUP BY entrepreneur.investor
SELECT DISTINCT entrepreneur.investor FROM entrepreneur WHERE (entrepreneur.money_requested > 140000 AND entrepreneur.money_requested < 120000) GROUP BY entrepreneur.investor HAVING COUNT(DISTINCT entrepreneur.people_id) > 1
SELECT COUNT(DISTINCT entrepreneur.company) AS number_of_companies FROM entrepreneur
SELECT COUNT(DISTINCT entrepreneur.company) AS num_companies FROM entrepreneur
SELECT COUNT(Perpetrator_ID) AS total_perpetrators FROM perpetrator
SELECT p.date FROM perpetrator AS p ORDER BY p.killed DESC NULLS LAST
SELECT perpetrator.people_id FROM perpetrator ORDER BY perpetrator.injured ASC NULLS FIRST
SELECT AVG(injured) AS average_injuries FROM perpetrator
SELECT p.location FROM perpetrator AS p WHERE p.killed = (SELECT MAX(killed) FROM perpetrator)
SELECT people.name FROM people ORDER BY people.height ASC NULLS FIRST
SELECT p.country, COUNT(*) AS total_perpetrators FROM perpetrator AS p GROUP BY p.country
SELECT p.country, COUNT(p.perpetrator_id) AS total_perpetrations FROM perpetrator AS p GROUP BY p.country ORDER BY total_perpetrations DESC NULLS LAST LIMIT 1
SELECT country FROM perpetrator GROUP BY country HAVING COUNT(People_ID) >= 2
SELECT p.name FROM people AS p WHERE p.weight IS NULL
SELECT p.country FROM perpetrator AS p WHERE p.injured > 50 AND p.injured < 20 GROUP BY p.country
SELECT COUNT(DISTINCT Location) AS number_of_locations FROM perpetrator
SELECT MAX(perpetrator.year) AS latest_year FROM perpetrator
SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
 SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ```SELECT Campuses.Campus FROM Campuses WHERE "Location" ILIKE '%Chico%'
SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Chico%'
SELECT Campuses.Location FROM Campuses WHERE Campuses.Year = '1958'
SELECT Campus FROM Campuses WHERE Year = '1958'
SELECT Campus FROM Campuses WHERE Year < 1800
SELECT Campuses.Campus FROM Campuses WHERE Campuses.year < '1800' ORDER BY Campuses.campus
 SELECT Campuses.Campus FROM Campuses WHERE (Campuses.year >= '1935'::FLOAT AND Campuses.year <= '1939'::FLOAT)
                        ```SELECT Campus FROM Campuses WHERE Year BETWEEN 1935 AND 1939
SELECT Campus FROM Campuses WHERE "Location" ILIKE '%Northridge%' OR "Location" ILIKE '%Los%Angeles%' OR "Location" ILIKE '%San%Francisco%'
SELECT Campus FROM Campuses WHERE "Location" ILIKE '%Northridge%' OR "Location" ILIKE '%Los%Angeles%' OR "Location" ILIKE '%San%Francisco%'
SELECT COUNT(*) FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes)
SELECT COUNT(*) FROM csu_fees WHERE Campus > (SELECT AVG(Campus) FROM csu_tes)
SELECT COUNT(*) FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes)
SELECT COUNT(*) AS number_of_universities FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_tes)
SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%' AND "Year" > '1950'
SELECT Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%' AND "Year" > '1950'
SELECT degrees.year, COUNT(degrees.campus) AS total_campuses FROM degrees GROUP BY degrees.year ORDER BY total_campuses DESC NULLS LAST LIMIT 1
SELECT MAX(Year) AS max_year FROM degrees

                        SELECT c.campus_name, COUNT(d.degrees) AS total_degrees FROM campuses c JOIN degrees d ON c.campus_code = d.campus WHERE c.active = TRUE GROUP BY c.campus_name ORDER BY total_degrees DESC NULLS LAST LIMIT 1;
                        
                        ```
                        SELECT c.campus_name, COUNT(d.degrees) AS total_degrees FROM campuses c JOIN degrees d ON c.campus_code = d.campus WHERE c.active = TRUE GROUP BY c.campus_name ORDER BY total_degrees DESC NULLS LAST LIMIT 1;
                        
                        ```SELECT AVG(csuf_fees.campusfee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = '1996'
SELECT AVG(csuf_fees.campusfee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = '1996'
SELECT AVG(csuf_fees.campusfee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = 2005
SELECT AVG(csuf_fees.campusfee) AS average_campus_fee FROM csu_fees WHERE csu_tes.year = 2005
 SELECT COUNT(*) FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
                        ```SELECT COUNT(*) FROM Campuses WHERE County = 'LA'
SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
SELECT Campuses.Campus FROM Campuses WHERE "County" ILIKE '%Los%Angeles%'
SELECT COUNT(faculty) AS total_faculty FROM faculty WHERE year = 2002
SELECT COUNT(faculty) AS total_faculty FROM faculty WHERE year = 2002
SELECT COUNT(*) AS number_of_campuses FROM Campuses WHERE "Campus" ILIKE '%CSU%'
SELECT COUNT(*) AS total_campuses FROM Campuses
SELECT COUNT(Candidate_ID) AS total_candidates FROM candidate
SELECT COUNT(*) AS total_candidates FROM candidate
SELECT candidate.poll_source, COUNT(candidate.candidate_id) AS total_candidates FROM candidate GROUP BY candidate.poll_source ORDER BY total_candidates DESC NULLS LAST LIMIT 1
SELECT candidate.poll_source FROM candidate GROUP BY candidate.poll_source ORDER BY COUNT(candidate.people_id) DESC NULLS LAST LIMIT 1
SELECT candidate.support_rate FROM candidate ORDER BY candidate.support_rate DESC NULLS LAST LIMIT 3
SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC NULLS LAST LIMIT 3
SELECT MIN(candidate.oppose_rate) AS min_oppose_rate, c.candidate_id FROM candidate AS c GROUP BY c.candidate_id
SELECT MIN(candidate.oppose_rate) AS min_oppose_rate, c.candidate_id FROM candidate AS c GROUP BY c.candidate_id
SELECT candidate.candidate_id, candidate.people_id, (support_rate / NULLIF(consider_rate + support_rate, 0)) AS support_to_consider_ratio, (consider_rate / NULLIF(unsure_rate + consider_rate, 0)) AS consider_to_unsure_ratio, (consider_rate / NULLIF(support_rate + consider_rate, 0)) AS oppose_to_support_ratio FROM candidate ORDER BY unsure_rate ASC NULLS FIRST
SELECT candidate.poll_source, candidate.date, (candidate.support_rate / NULLIF(SUM(candidate.support_rate), 0)) AS support_rate, (candidate.consider_rate / NULLIF(SUM(candidate.consider_rate), 0)) AS consider_rate, (candidate.oppose_rate / NULLIF(SUM(candidate.oppose_rate), 0)) AS oppose_rate FROM candidate GROUP BY poll_source, date ORDER BY support_rate ASC NULLS FIRST
SELECT candidate.poll_source FROM candidate ORDER BY candidate.oppose_rate DESC NULLS LAST LIMIT 1
SELECT candidate.poll_source FROM candidate WHERE candidate.oppose_rate = (SELECT MAX(candidate.oppose_rate) FROM candidate)
SELECT people.name FROM people ORDER BY people.date_of_birth ASC NULLS FIRST
SELECT people.name FROM people ORDER BY people.date_of_birth
SELECT AVG(Height) AS average_height, AVG(Weight) AS average_weight FROM people WHERE Sex = 'M'
SELECT AVG(Height), AVG(Weight) FROM people WHERE Sex = 'M'
SELECT people.name FROM people WHERE people.height > 200 OR people.height < 190
SELECT p.name FROM people AS p WHERE p.height > 200 OR p.height < 190
SELECT people.sex, AVG(people.weight) AS average_weight, MIN(people.weight) AS min_weight FROM people GROUP BY people.sex
SELECT Sex, AVG(Weight) AS average_weight, MIN(Weight) AS min_weight FROM people GROUP BY Sex
SELECT p.name FROM people LEFT JOIN people AS s ON p.people_id = s.people_id WHERE s.people_id IS NULL
SELECT p.name FROM people LEFT JOIN people AS s ON p.people_id = s.people_id WHERE s.people_id IS NULL
SELECT sex, COUNT(*) AS total_people FROM people WHERE weight > 85 GROUP BY sex
SELECT people.sex, COUNT(*) AS total_people FROM people WHERE people.weight > 85 GROUP BY people.sex
WITH total_support AS (SELECT candidate.candidate_id, SUM(candidate.support_rate) AS total_support FROM candidate GROUP BY candidate.candidate_id), total_consider AS (SELECT candidate.candidate_id, MIN(candidate.consider_rate) AS total_consider FROM candidate GROUP BY candidate.candidate_id), total_oppose AS (SELECT candidate.candidate_id, MAX(candidate.oppose_rate) AS total_oppose FROM candidate GROUP BY candidate.candidate_id) SELECT ts.candidate_id, tc.total_consider, tos.total_oppose FROM total_support JOIN total_consider ON ts.candidate_id = tc.candidate_id JOIN total_oppose ON ts.candidate_id = tos.candidate_id
SELECT MAX(support_rate) AS max_support_rate, MIN(consider_rate) AS min_consider_rate, MIN(oppose_rate) AS min_oppose_rate FROM candidate
SELECT p.name FROM people AS p WHERE p.height < (SELECT AVG(height) FROM people)
SELECT p.name FROM people AS p WHERE p.height < (SELECT AVG(height) FROM people)
SELECT p.people_id, p.name, TO_NUMBER(p.weight, '9999D99') AS weight, TO_DATE(p.date_of_birth, 'YYYY-MM-DD') AS date_of_birth FROM people AS p
SELECT p.name, CAST(p.weight AS FLOAT) / NULLIF(h.height, 0) AS weight_to_height_ratio FROM people JOIN people AS h ON p.people_id = h.people_id
SELECT COUNT(*) AS total_movies FROM Movie WHERE director ILIKE '%Steven%Spielberg%'
SELECT Movie.title FROM Movie WHERE Movie.director ILIKE '%Steven%Spielberg%'
SELECT Movie.title FROM Movie WHERE Movie.year > 2000 AND Movie.director ILIKE '%James%Cameron%'
SELECT Movie.title FROM Movie WHERE Movie.director ILIKE '%James%Cameron%' AND Movie.year > '2000'
SELECT COUNT(*) AS number_of_movies FROM Movie WHERE year < 2000
SELECT COUNT(*) FROM Movie WHERE year < 2000
SELECT Movie.director FROM Movie WHERE Movie.title ILIKE '%Avatar%'
SELECT AVG(year) AS average_year FROM Movie WHERE director ILIKE '%Avatar%'

COUNT(Reviewer.rID) AS total_reviewers FROM Reviewer;
                        
                        ```
COUNT(Reviewer.rID) AS total_reviewers FROM Reviewer;
                        
                        ```SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Mike%'
SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Mike%'
SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Daniel%Lewis%'
 SELECT Reviewer.rID FROM Reviewer WHERE Reviewer.name ILIKE '%Daniel%Lewis%'
                        ```SELECT COUNT(*) AS total_ratings FROM Rating WHERE stars > 3
SELECT COUNT(*) FROM Rating WHERE stars > 3
SELECT MIN(stars) AS lowest_star_rating, MAX(stars) AS highest_star_rating FROM Rating
SELECT MIN(stars) AS minimum_stars, MAX(stars) AS maximum_stars FROM Rating
SELECT COUNT(title) AS total_titles FROM Movie WHERE year IS NULL
SELECT Movie.title FROM Movie WHERE NOT Movie.mID IN (SELECT Rating.director FROM Rating)
SELECT Movie.title FROM Movie ORDER BY Movie.year DESC NULLS LAST LIMIT 1
SELECT Movie.title FROM Movie ORDER BY Movie.year DESC NULLS LAST LIMIT 1
SELECT m.title FROM Movie AS m WHERE m.year > (SELECT MAX(m2.year) FROM Movie AS m2 WHERE m2.director ILIKE '%Steven%Spielberg%') ORDER BY m.title
SELECT m.title FROM Movie AS m JOIN (SELECT MAX(year) AS max_year FROM Movie WHERE director ILIKE '%Steven%Spielberg%') AS ssp ON m.year > ssp.max_year
SELECT r.name AS reviewer_name, m.rid AS movie_title FROM Reviewer CROSS JOIN Reviewer AS m
 SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Review ON Reviewer.rID = Review.reviewer_id JOIN Movie ON Review.movie_id = Movie.mid;
                        ```SELECT COUNT(*) AS total_movies FROM Movie WHERE director <> 'Chris Jackson'
 SELECT Movie.title FROM Movie WHERE Movie.mID NOT IN (SELECT Review.movie_id FROM Review JOIN User ON Review.user_id = User.uid WHERE User.name ILIKE '%Chris%Jackson%') ;
                        ```SELECT DISTINCT Movie.director FROM Movie GROUP BY Movie.director HAVING COUNT(Movie.mID) = 1
SELECT DISTINCT Movie.director FROM Movie
SELECT DISTINCT Movie.director FROM Movie WHERE NOT Movie.director IS NULL AND (SELECT COUNT(Movie.mID) FROM Movie WHERE Movie.director = Movie.director) = 1
SELECT DISTINCT Movie.director FROM Movie WHERE NOT Movie.director IS NULL AND Movie.director <> 'NULL'
SELECT AVG(Rating.stars) AS average_rating FROM Rating JOIN Rating ON Rating.mID = Movie.mID WHERE NOT Movie.rid ILIKE '%Brittany%Harris%' GROUP BY Movie.rid
 SELECT m.mID AS movie_id, AVG(r.stars) AS average_rating FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID AND r.rID IN (SELECT rID FROM Reviewer WHERE name ilike '%Brittany%Harris%') GROUP BY movie_id;
                        ```SELECT m.mID FROM Rating AS m LEFT JOIN Rating ON m.mID = r.mID AND r.rID = 107570 WHERE r.mID IS NULL
SELECT m.mID FROM Rating AS m LEFT JOIN Rating ON m.mID = r.mID AND NOT r.rID IS NULL WHERE r.rID IS NULL
SELECT AVG(r.stars) AS average_rating FROM Rating AS r GROUP BY r.mID HAVING COUNT(r.rID) >= 2
SELECT m.ratingdate, AVG(r.stars) AS average_rating FROM Rating AS m JOIN Rating ON m.mID = r.mID GROUP BY m.ratingdate HAVING COUNT(r.rID) > 3
SELECT reviewer.rID FROM Rating WHERE reviewer.stars <> 4
SELECT reviewer.rID FROM Rating WHERE reviewer.stars <> 4
 SELECT r.rID FROM Rating r WHERE NOT EXISTS (SELECT * FROM Rating f WHERE f.stars = 4 AND r.rID = f.rID)
                        ```SELECT u.mid FROM User LEFT JOIN Rating AS r ON u.mid = r.rID AND r.stars >= 4 WHERE r.rID IS NULL
SELECT title FROM Movie WHERE year < 1980 OR director = 'James Cameron'
SELECT Movie.title FROM Movie WHERE (Movie.year < CAST('1980' AS DECIMAL(38, 0)) OR Movie.director ILIKE '%James%Cameron%')
SELECT COUNT(*) FROM county_public_safety
SELECT COUNT(*) FROM county_public_safety
SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population DESC NULLS LAST
SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population DESC NULLS LAST
SELECT DISTINCT county_public_safety.police_force FROM county_public_safety WHERE NOT county_public_safety.location ILIKE '%east%'
SELECT DISTINCT county_public_safety.police_force FROM county_public_safety WHERE NOT county_public_safety.location ILIKE '%East%' ORDER BY county_public_safety.police_force
SELECT MIN(Crime_rate) AS min_crime_rate, MAX(Crime_rate) AS max_crime_rate FROM county_public_safety
SELECT MIN(Crime_rate) AS min_crime_rate, MAX(Crime_rate) AS max_crime_rate FROM county_public_safety
SELECT county_public_safety.name, county_public_safety.crime_rate FROM county_public_safety ORDER BY county_public_safety.police_officers ASC NULLS FIRST
SELECT county_public_safety.name, COUNT(county_public_safety.police_officers) AS police_officers_count, SUM(county_public_safety.crime_rate) AS total_crimes FROM county_public_safety GROUP BY county_public_safety.name ORDER BY police_officers_count ASC NULLS FIRST
SELECT city.name FROM city ORDER BY city.name ASC NULLS FIRST
SELECT city.name FROM city ORDER BY city.name ASC NULLS FIRST
SELECT CAST(Hispanic AS FLOAT) / NULLIF((Black - 10), 0) AS ratio FROM city WHERE Black > 10
SELECT city.name, (CAST(city.hispanic AS FLOAT) / NULLIF((SELECT SUM(hispanic) FROM city WHERE black > 10), 0)) AS hispanic_ratio FROM city WHERE black > 10
SELECT c.name AS county_name, COUNT(p.population) AS total_population FROM county_public_safety AS c JOIN police_force ON c.county_id = p.county_id GROUP BY c.name ORDER BY total_population DESC NULLS LAST LIMIT 1
SELECT c.name AS county_name, COUNT(p.population) AS total_population FROM county_public_safety AS c JOIN police_force ON c.county_id = p.county_id GROUP BY c.name ORDER BY total_population DESC NULLS LAST LIMIT 1
SELECT c.name FROM city AS c WHERE c.white > (SELECT MAX(c2.white) FROM city AS c2) / 100 * 5 ORDER BY c.white DESC NULLS LAST LIMIT 5
SELECT c.name FROM city AS c WHERE c.white = (SELECT MAX(white) FROM city)
SELECT city.name FROM city WHERE city.county_id = (SELECT MAX(city.county_id) FROM city)
SELECT city.name FROM city JOIN police_officer ON city.county_id = police_officer.county_id GROUP BY city.name ORDER BY COUNT(police_officer.city_id) DESC NULLS LAST
SELECT COUNT(DISTINCT city.name) AS number_of_cities FROM city WHERE city.white > 20000
SELECT COUNT(DISTINCT city.name) AS number_of_cities FROM city JOIN county ON city.county_id = county.county_id WHERE county.white > 20000
SELECT county_public_safety.police_force, COUNT(county_id) AS number_of_counties FROM county_public_safety GROUP BY county_public_safety.police_force
SELECT county_public_safety.police_force, COUNT(county_id) AS number_of_counties FROM county_public_safety GROUP BY county_public_safety.police_force
SELECT county_public_safety.location, COUNT(county_public_safety.name) AS name_count FROM county_public_safety GROUP BY county_public_safety.location ORDER BY name_count DESC NULLS LAST LIMIT 1
SELECT county_public_safety.location, COUNT(county_public_safety.name) AS name_count FROM county_public_safety GROUP BY county_public_safety.location ORDER BY name_count DESC NULLS LAST LIMIT 1
SELECT county_public_safety.name FROM county_public_safety WHERE county_public_safety.location IS NULL
SELECT county_public_safety.name FROM county_public_safety WHERE county_public_safety.location IS NULL
SELECT county_public_safety.location, COUNT(DISTINCT county_public_safety.county_id) AS county_id_count FROM county_public_safety WHERE county_public_safety.location ILIKE '%east%' OR county_public_safety.location ILIKE '%west%' GROUP BY county_public_safety.location
SELECT DISTINCT county_public_safety.police_force FROM county_public_safety WHERE (county_id IN (SELECT county_id FROM county_public_safety WHERE name ILIKE '%East%') AND (county_id IN (SELECT county_id FROM county_public_safety WHERE name ILIKE '%West%')))
SELECT city.name FROM city WHERE city.county_id IN (SELECT county.county_id FROM county WHERE county.city_id < '100')
SELECT city.name FROM city WHERE city.county_id IN (SELECT county.county_id FROM county WHERE county.city_id < TO_NUMBER('100', '99999D99'))
SELECT county_public_safety.name, SUM(county_public_safety.case_burden) AS total_cases FROM county_public_safety GROUP BY county_public_safety.name ORDER BY SUM(county_public_safety.case_burden) DESC NULLS LAST
SELECT county_public_safety.name, COUNT(*) AS number_of_cases FROM county_public_safety GROUP BY county_public_safety.name ORDER BY number_of_cases DESC NULLS LAST
SELECT Rooms.roomName FROM Rooms WHERE (Rooms.basePrice < 160 AND Rooms.beds = 2) AND (Rooms.decor ILIKE '%modern%')
SELECT Rooms.roomName FROM Rooms WHERE Rooms.basePrice < '160' AND Rooms.beds = '2'
SELECT Rooms.roomId, Rooms.roomName FROM Rooms WHERE (CAST(Rooms.basePrice AS FLOAT)) > 160 AND (CAST(Rooms.maxoccupancy AS FLOAT)) > 2
SELECT Rooms.roomId, Rooms.roomName FROM Rooms WHERE (Rooms.baseFeet > CAST('160' AS FLOAT) AND Rooms.maxoccupancy > '2')

SELECT COUNT(Kids) AS total_kids FROM Reservations WHERE "FirstName" ILIKE '%ROY%SWEAZY%'
                        
                        ```SELECT COUNT(Kids) AS total_kids FROM Reservations WHERE "FirstName" ILIKE '%ROY%SWEAZ%' AND NOT "Room" IS NULL
SELECT COUNT(*) AS number_of_reservations FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'
SELECT COUNT(*) FROM Reservations WHERE "FirstName" ILIKE '%roy%sweazym%' AND "LastName" ILIKE '%roy%sweazym%'
SELECT COUNT(Adults) AS total_adults FROM Reservations WHERE "Room" ILIKE '%CONRAD%SELBIG%' AND "CheckIn" ILIKE '%Oct%23,%2010%'
SELECT Reservations.Adults FROM Reservations WHERE "Room" ILIKE '%CONRAD%SELBIG%' AND "CheckIn" ILIKE '%Oct%23,%2010%'
SELECT COUNT(Kids) AS total_kids FROM Reservations WHERE "CheckIn" ILIKE '%Sep%21,%2010%' AND "Room" ILIKE '%DAMIEN%TRACHSEL%'
SELECT Reservations.Kids FROM Reservations WHERE Reservations.Checkin ILIKE '%Sep%21,%2010%' AND Reservations.lastname ILIKE '%DAMIEN%TRACHSEL%'
SELECT CAST(SUM(CASE WHEN bedType = 'King' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_of_king_beds FROM Rooms
SELECT SUM(CASE WHEN bedType = 'King' THEN 1 ELSE 0 END) AS total_king_beds FROM Rooms
SELECT Rooms.roomName, Rooms.decor FROM Rooms WHERE Rooms.bedType ILIKE '%king%' ORDER BY Rooms.basePrice
SELECT Rooms.roomName, Rooms.decor FROM Rooms WHERE "bedType" ILIKE '%king%' ORDER BY Rooms.basePrice
SELECT Rooms.roomName, MIN(Rooms.basePrice) AS min_base_price FROM Rooms GROUP BY Rooms.roomName
SELECT Rooms.roomName, Rooms.basePrice FROM Rooms ORDER BY Rooms.basePrice ASC NULLS FIRST LIMIT 1
 SELECT Rooms.decor FROM Rooms WHERE Rooms.roomName ilike '%Recluse%and%defiance%'
                        ``` SELECT Rooms.decor FROM Rooms WHERE Rooms.roomName ILIKE '%recluse%and%defiance%'
                        ```SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType
SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType
SELECT COUNT(*) AS total_people FROM Rooms WHERE bedType ILIKE '%modern%'
SELECT COUNT(DISTINCT Rooms.RoomId) AS total_modern_rooms FROM Rooms WHERE decor ILIKE '%modern%'
SELECT COUNT(*) AS total_rooms FROM Rooms

                        ```SELECT COUNT(*) FROM Rooms WHERE bedType = 'king'
SELECT COUNT(*) FROM Rooms WHERE bedType = 'king'
SELECT Rooms.bedType, COUNT(Rooms.RoomId) AS room_count FROM Rooms GROUP BY Rooms.bedType
SELECT Rooms.bedType, COUNT(Rooms.RoomId) AS room_count FROM Rooms GROUP BY Rooms.bedType
SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.maxoccupancy DESC NULLS LAST LIMIT 1
SELECT Rooms.roomName, MAX(Rooms.maxoccupancy) AS max_occupancy FROM Rooms GROUP BY Rooms.roomName ORDER BY max_occupancy DESC NULLS LAST LIMIT 1
SELECT Rooms.RoomId, Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 1
SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 1
SELECT Rooms.bedType, Rooms.roomName FROM Rooms WHERE (Rooms.baseFee IS NULL OR Rooms.baseFee = 0) AND (Rooms.maxOccupancy IS NULL OR Rooms.maxoccupancy <= 1)
SELECT Rooms.bedType, Rooms.roomName FROM Rooms WHERE "decor" ILIKE '%traditional%'
SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE bedType = 'king' GROUP BY Rooms.decor
SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE Rooms.bedType = 'king' GROUP BY Rooms.decor
SELECT decor, AVG(basePrice) AS average_price, MIN(baseFees) AS min_price FROM Rooms GROUP BY decor
SELECT Rooms.decor, AVG(Rooms.basePrice) AS average_price, MIN(Rooms.beds) AS min_beds FROM Rooms GROUP BY Rooms.decor
SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice
SELECT Rooms.roomName FROM Rooms ORDER BY Rooms.basePrice
SELECT decor, COUNT(*) AS room_count FROM Rooms WHERE baseFeet > 120 GROUP BY decor
SELECT Rooms.decor, COUNT(*) AS room_count FROM Rooms WHERE Rooms.baseFeet > 120 GROUP BY Rooms.decor ORDER BY room_count DESC NULLS LAST
SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_price FROM Rooms GROUP BY Rooms.bedType
SELECT Rooms.bedType, AVG(Rooms.basePrice) AS average_base_price FROM Rooms GROUP BY Rooms.bedType
SELECT Rooms.roomName FROM Rooms WHERE (Rooms.bedType ILIKE '%king%' OR Rooms.bedType ILIKE '%que%') AND (Rooms.bedType ILIKE '%que%' OR Rooms.bedType ILIKE '%que%')
SELECT Rooms.roomName FROM Rooms WHERE (Rooms.bedType ILIKE '%king%' OR Rooms.bedType ILIKE '%queen%')
SELECT COUNT(DISTINCT Rooms.bedType) AS number_of_bed_types FROM Rooms
SELECT COUNT(DISTINCT Rooms.bedType) AS total_bed_types FROM Rooms
SELECT Rooms.roomName, Rooms.RoomId FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 3
SELECT Rooms.roomName, Rooms.RoomId FROM Rooms ORDER BY Rooms.basePrice DESC NULLS LAST LIMIT 3
SELECT Rooms.roomName FROM Rooms WHERE Rooms.basePrice > (SELECT AVG(Rooms.baseFees) FROM Rooms)
SELECT Rooms.roomName FROM Rooms WHERE Rooms.baseFeet > (SELECT AVG(Rooms.baseFeet) FROM Rooms)
SELECT COUNT(*) AS total_rooms FROM Rooms WHERE roomName IS NULL
SELECT COUNT(*) FROM Rooms WHERE NOT RoomId IN (SELECT roomname FROM bookings)
SELECT Rooms.roomName FROM Rooms WHERE Rooms.basePrice BETWEEN 120 AND 150
SELECT Rooms.roomName FROM Rooms WHERE (Rooms.basePrice >= 120 AND Rooms.baseCost <= 150)
SELECT COUNT(DISTINCT source_system_code) AS number_of_source_system_codes FROM CMI_Cross_References
SELECT cmi_details FROM Customer_Master_Index ORDER BY cmi_details DESC NULLS LAST
SELECT p.council_tax_id, COUNT(pf.cmi_cross_ref_id) AS number_of_parking_fines FROM Parking_Fines AS pf JOIN Parking_Fines AS p ON p.council_tax_id = pf.council_tax_id GROUP BY p.council_tax_id
SELECT COUNT(*) AS total_council_taxes FROM Rent_Arrears
SELECT CMI_Cross_References.cmi_cross_ref_id FROM CMI_Cross_References WHERE NOT CMI_Cross_References.cmi_cross_ref_id IN (SELECT Parking_Taxes.master_customer_id FROM Parking_Taxes) ORDER BY CMI_Cross_References.cmi_cross_ref_id
SELECT DISTINCT CMI_Cross_References.source_system_code FROM CMI_Cross_References WHERE CMI_Cross_References.source_system_code ILIKE '%en%'
SELECT COUNT(*) AS total_parties FROM party
SELECT COUNT(*) AS total_parties FROM party
SELECT party_theme, COUNT(*) AS total_parties FROM party GROUP BY party_theme ORDER BY total_parties ASC NULLS FIRST
SELECT party.party_theme, COUNT(*) AS number_of_hosts FROM party GROUP BY party_theme ORDER BY number_of_hosts ASC NULLS FIRST
SELECT party.first_year, party.last_year, party.location FROM party
SELECT p.party_theme, p.location FROM party AS p
SELECT party.first_year, party.last_year FROM party WHERE party.party_theme IN ('Spring', 'Teqnology')
SELECT party.first_year, party.last_year FROM party WHERE party.party_theme IN ('Spring', 'Teqnology')
SELECT AVG(number_of_hosts) AS average_number_of_hosts FROM party
SELECT AVG(number_of_hosts) AS average_number_of_hosts FROM party
SELECT p.location FROM party AS p WHERE p.number_of_hosts = (SELECT MAX(number_of_hosts) FROM party)
SELECT p.location FROM party AS p ORDER BY p.number_of_hosts DESC NULLS LAST LIMIT 1
SELECT host.nationality, COUNT(host.host_id) AS total_hosts FROM host GROUP BY host.nationality
SELECT host.nationality, COUNT(*) AS total_hosts FROM host GROUP BY host.nationality
SELECT host.nationality FROM host GROUP BY host.nationality ORDER BY COUNT(host.nationality) DESC NULLS LAST LIMIT 1
SELECT host.nationality, COUNT(host.host_id) AS number_of_hosts FROM host GROUP BY host.nationality ORDER BY number_of_hosts DESC NULLS LAST LIMIT 1
SELECT host.nationality FROM host WHERE CAST(host.age AS FLOAT) > 45 AND CAST(host.age AS FLOAT) < 35 GROUP BY host.nationality
SELECT host.nationality FROM host WHERE (CAST(host.age AS FLOAT) > 45 AND CAST(host.age AS FLOAT) < 35) GROUP BY host.nationality HAVING COUNT(host.name) > 1
SELECT h.name, h.nationality FROM host AS h ORDER BY CAST(h.age AS FLOAT) ASC NULLS FIRST LIMIT 1
SELECT host.name, host.nationality FROM host WHERE host.age = (SELECT MAX(host.age) FROM host)
SELECT h.name FROM host AS h LEFT JOIN party_host ON h.host_id = ph.host_id WHERE ph.host_id IS NULL
SELECT h.name FROM host AS h LEFT JOIN party ON h.host_id = p.host_id WHERE p.nationality IS NULL

COUNT(region.region_id) AS region_count FROM region;
                        
                        ```SELECT COUNT(*) FROM region
SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code
SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code NULLS FIRST
SELECT region.region_name FROM region ORDER BY region.region_name ASC NULLS FIRST
SELECT region.region_name FROM region ORDER BY region.region_name ASC NULLS FIRST
SELECT region.region_name FROM region WHERE NOT region.region_name ILIKE '%Denmark%' ORDER BY region.region_name
SELECT region.region_name FROM region WHERE region.region_name <> 'Denmark'
SELECT COUNT(*) FROM storm WHERE number_deaths > 0
SELECT COUNT(*) FROM storm WHERE number_deaths >= 1
SELECT s.name, TO_DATE(s.dates_active, 'YYYY-MM-DD') AS date_active, SUM(CASE WHEN v.damage_millions_usd = 'Yes' THEN 1 ELSE 0 END) AS has_victim, COUNT(*) OVER (PARTITION BY s.storm_id) AS total_deaths FROM storm AS s JOIN victim ON s.storm_id = v.storm_id GROUP BY s.name, date_active
SELECT s.name, TO_DATE(s.dates_active, 'YYYY-MM-DD') AS date_active, CAST(s.number_deaths AS FLOAT) / NULLIF(COUNT(*), 0) AS death_ratio FROM storm AS s GROUP BY s.name, s.dates_active HAVING COUNT(*) >= 1
SELECT AVG(Damage_millions_usd), MAX(damage_millions_usd) FROM storm WHERE max_speed > 1000
SELECT AVG(Damage_millions_usd), MAX(damage_millions_usd) FROM storm WHERE max_speed > 1000
SELECT SUM(storm.number_deaths) AS total_deaths, SUM(storm.damage_millions_usd) AS total_damage FROM storm WHERE storm.max_speed > (SELECT AVG(storm.max_speed) FROM storm)
SELECT SUM(Number_Deaths) AS total_deaths, SUM(Damage_millions_USD) AS total_damage FROM storm WHERE MAX_speed > AVG(MAX_speed)
SELECT s.name, s.max_speed, s.number_deaths, s.damage_millions_usd FROM storm AS s ORDER BY s.max_speed DESC NULLS LAST
SELECT s.name, TO_CHAR(CAST(s.max_speed AS FLOAT), 'FM999990D0') AS max_speed_fm, TO_CHAR(CAST(s.damage_millions_usd AS FLOAT), 'FM999999D99') AS damage_millions_usd_fm FROM storm AS s ORDER BY s.max_speed DESC NULLS LAST
SELECT COUNT(Region_id) AS number_of_regions FROM affected_region
SELECT COUNT(DISTINCT region_id) AS number_of_regions FROM affected_region
SELECT region.region_name FROM region WHERE NOT region.region_name ILIKE '%unaffected%'
SELECT region.region_name FROM region WHERE NOT region.region_id IN (SELECT region_id FROM region)
SELECT storm.name FROM storm WHERE storm.damage_millions_usd IS NULL
SELECT s.name FROM storm AS s WHERE s.damage_millions_usd = 0
SELECT s.name FROM storm AS s WHERE (s.damage_millions_usd > 10000000) OR (s.number_deaths > 5)
SELECT s.name FROM storm AS s WHERE s.damage_millions_usd = (SELECT MIN(storm_id) FROM storm)
SELECT COUNT(*) AS total_counties FROM county
SELECT COUNT(*) AS total_counties FROM county
SELECT county.county_name, COUNT(*) AS population FROM county GROUP BY county.county_name
SELECT c.county_name, c.population FROM county AS c
SELECT AVG(Population) FROM county
SELECT AVG(population) FROM county
SELECT MAX(Population) AS max_population, MIN(Population) AS min_population FROM county
SELECT MAX(Population) AS max_population, MIN(Population) AS min_population FROM county
SELECT DISTINCT District FROM election
SELECT DISTINCT election.district FROM election
SELECT county.zip_code FROM county WHERE county.county_name ILIKE '%Howard%'
SELECT county.zip_code FROM county WHERE county.county_name ILIKE '%Howard%'
SELECT Delegate FROM election WHERE District = 1
SELECT election.delegate FROM election WHERE election.district = 1
SELECT election.delegate, election.committee FROM election
SELECT e.election_id, e.delegate, e.committee FROM election AS e
SELECT COUNT(DISTINCT Governor) AS number_of_governors FROM party
SELECT COUNT(DISTINCT Governor) AS number_of_governors FROM party
SELECT party.lieutenant_governor, party.comptroller FROM party WHERE party.party = 'Democratic'
SELECT party.lieutenant_governor, party.comptroller FROM party WHERE party.party = 'democratic'
SELECT DISTINCT party.year FROM party WHERE party.governor ILIKE '%Eliot%Spitzer%' ORDER BY party.year
SELECT DISTINCT party.year FROM party WHERE party.governor ILIKE '%Eliot%Spitzer%' ORDER BY party.year
 SELECT e.election_id, e.first_elected, p.party, d.district, c.committee FROM election AS e JOIN party AS p ON e.party = p.party_code JOIN district AS d ON e.district = d.district_code JOIN committee AS c ON e.committee = c.committee_code;
                        ```SELECT e.election_id, e.first_elected, e.counties_represented, e.district, e.party, e.delegate, e.committee FROM election AS e
SELECT county.county_name FROM county ORDER BY county.population ASC NULLS FIRST
SELECT county.county_name FROM county ORDER BY county.population ASC NULLS FIRST
SELECT county.county_name FROM county ORDER BY county.county_name DESC NULLS LAST
SELECT county.county_name FROM county ORDER BY county.county_name DESC NULLS LAST
SELECT county.county_name, SUM(population) AS total_population FROM county GROUP BY county.county_name ORDER BY total_population DESC NULLS LAST LIMIT 1
SELECT county.county_name FROM county ORDER BY county.population DESC NULLS LAST LIMIT 1
SELECT county.county_name, county.population FROM county ORDER BY county.population ASC LIMIT 3
SELECT COUNTY.county_name FROM county ORDER BY POPULATION ASC LIMIT 3
SELECT p.party FROM party AS p GROUP BY p.party HAVING COUNT(p.party_id) >= 2
SELECT p.party FROM party AS p GROUP BY p.party HAVING COUNT(p.party_id) >= 2
SELECT p.governor, COUNT(*) AS num_times_governor FROM party AS p GROUP BY p.governor ORDER BY num_times_governor DESC NULLS LAST
SELECT p.governor, COUNT(*) AS frequency FROM party AS p GROUP BY p.governor ORDER BY frequency DESC NULLS LAST
SELECT party.comptroller, COUNT(party.comptroller) AS num_times FROM party GROUP BY party.comptroller ORDER BY num_times DESC NULLS LAST
SELECT party.governor, COUNT(*) AS frequency FROM party GROUP BY party.governor ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT party.governor FROM party WHERE party.year IS NULL
SELECT p.party FROM party AS p WHERE p.year IS NULL
SELECT COUNT(journalist_id) AS total_journalists FROM journalist
SELECT journalist.name FROM journalist ORDER BY journalist.years_working ASC NULLS FIRST
SELECT journalist.nationality, CAST(journalist.age AS FLOAT) FROM journalist
SELECT journalist.name FROM journalist WHERE journalist.nationality ILIKE '%England%' OR journalist.nationality ILIKE '%Wales%'
SELECT AVG(journalist.years_working) AS average_years_working FROM journalist
SELECT journalist.nationality FROM journalist ORDER BY journalist.years_working DESC NULLS LAST LIMIT 1
SELECT journalist.nationality, COUNT(*) AS total_journalists FROM journalist GROUP BY journalist.nationality
SELECT journalist.nationality, COUNT(journalist.nationality) AS frequency FROM journalist GROUP BY journalist.nationality ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT journalist.nationality FROM journalist WHERE (journalist.years_working > 10 AND journalist.years_working < 3) GROUP BY journalist.nationality HAVING COUNT(*) >= 2
SELECT event.date, event.venue, event.name FROM event ORDER BY event.event_attendance DESC NULLS LAST
SELECT journalist.name FROM journalist WHERE NOT journalist.journalist_id IN (SELECT reporter.journalist_id FROM journalist JOIN reporter ON event.age = reporter.age)
SELECT AVG(event_attendance) AS average_attendance, MAX(event_attendance) AS max_attendance FROM event
SELECT venue, name, event_attendance FROM event ORDER BY event_attendance DESC NULLS LAST LIMIT 2
SELECT Restaurant.ResName, Restaurant.Rating FROM Restaurant
SELECT Restaurant.Address FROM Restaurant WHERE Restaurant.ResName ILIKE '%Subway%'

SELECT CAST(Rating AS FLOAT) AS Rating FROM Restaurant WHERE ResName = 'Subway'
                        
                        ```SELECT Restaurant_Type.ResTypeName FROM Restaurant_Type
SELECT Restaurant_Type.ResTypeDescription FROM Restaurant_Type WHERE Restaurant_Type.ResTypeName ILIKE '%Sandwich%'
SELECT Restaurant.ResName, MAX(Restaurant.Rating) AS max_rating FROM Restaurant GROUP BY Restaurant.ResName ORDER BY max_rating DESC NULLS LAST
SELECT Student.Age FROM Student WHERE Student.LName ILIKE '%linda%smith%'
SELECT Student.Sex FROM Student WHERE Student.LName ILIKE '%linda%smith%' AND Student.Fname ILIKE '%linda%'
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Major = '600'
SELECT Student.city_code FROM Student WHERE Student.LName ILIKE '%linda%smith%' AND NOT Student.city_code IS NULL
SELECT COUNT(*) AS number_of_students FROM Student WHERE Advisor = 1121
SELECT s.advisor, COUNT(*) AS student_count FROM Student AS s GROUP BY s.advisor ORDER BY student_count DESC NULLS LAST LIMIT 1
SELECT Major, COUNT(*) AS student_count FROM Student GROUP BY Major ORDER BY student_count ASC NULLS FIRST LIMIT 1
SELECT Major, COUNT(*) AS student_count FROM Student GROUP BY Major HAVING COUNT(*) BETWEEN 2 AND 30
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age > '18' AND Student.Major = '600'
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age > '18' AND Student.Sex = 'female' AND Student.Major <> '600'
SELECT actual_order_id FROM Actual_Orders WHERE order_status_code = 'success'
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(DISTINCT customers.payment_method) FROM Customers
SELECT Trucks.truck_licence_number, Trucks.truck_details FROM Trucks ORDER BY Trucks.truck_id ASC NULLS FIRST
SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC NULLS LAST LIMIT 1
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_email ILIKE '%california%'
SELECT Customers.customer_name, Customers.customer_email FROM Customers WHERE payment_method = 'Visa'
SELECT a.state_province_county FROM Addresses AS a LEFT JOIN Employee ON a.state_province_county = e.address_details WHERE e.address_id IS NULL
SELECT customers.customer_name, customers.customer_phone, customers.customer_email FROM Customers ORDER BY customers.date_became_customer
SELECT customers.customer_name FROM Customers ORDER BY customers.customer_name ASC NULLS FIRST LIMIT 5
SELECT Customers.payment_method, COUNT(Customers.payment_method) AS frequency FROM Customers GROUP BY Customers.payment_method ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT route_name FROM Delivery_Routes ORDER BY route_name ASC NULLS FIRST
SELECT COUNT(*) AS total_authors FROM Authors
SELECT COUNT(*) AS total_authors FROM Authors
SELECT COUNT(*) AS number_of_institutions FROM Inst
SELECT COUNT(*) FROM Inst
SELECT COUNT(*) AS total_papers FROM Papers
SELECT COUNT(*) AS total_papers FROM Papers
SELECT COUNT(*) AS total_papers FROM Papers WHERE title ILIKE '%ML%'
SELECT Papers.title FROM Papers WHERE Papers.title ILIKE '%ML%'
SELECT Papers.title FROM Papers WHERE Papers.title ILIKE '%database%'
SELECT Papers.title FROM Papers WHERE Papers.title ILIKE '%database%'
SELECT Authors.fname FROM Authors WHERE Authors.lname ILIKE '%Ueno%'
SELECT Authors.fname FROM Authors WHERE Authors.lname ILIKE '%Ueno%'
SELECT Authors.lname FROM Authors WHERE Authors.fname ILIKE '%Amal%'
SELECT Authors.lname FROM Authors WHERE Authors.fname ILIKE '%Amal%' ORDER BY Authors.lname
SELECT Authors.fname FROM Authors ORDER BY Authors.fname ASC NULLS FIRST
SELECT Authors.fname FROM Authors ORDER BY Authors.fname ASC NULLS FIRST
SELECT Authors.lname FROM Authors ORDER BY Authors.lname ASC NULLS FIRST
SELECT Authors.lname FROM Authors ORDER BY Authors.lname ASC NULLS FIRST
SELECT Authors.fname, Authors.lname FROM Authors ORDER BY Authors.lname ASC NULLS FIRST
SELECT a.fname, a.lname FROM Authors AS a ORDER BY a.lname ASC NULLS FIRST
SELECT COUNT(DISTINCT actor.last_name) AS number_of_last_names FROM actor
SELECT COUNT(DISTINCT actor.last_name) AS num_last_names FROM actor
SELECT actor.first_name, COUNT(actor.actor_id) AS total_actor_ids FROM actor GROUP BY actor.first_name ORDER BY last_name DESC NULLS LAST LIMIT 1
SELECT actor.first_name FROM actor GROUP BY actor.first_name ORDER BY COUNT(actor.first_name) DESC NULLS LAST LIMIT 1
SELECT a.first_name, a.last_name, COUNT(*) AS total_movies FROM actor AS a GROUP BY a.first_name, a.last_name ORDER BY total_movies DESC NULLS LAST LIMIT 1
SELECT actor.first_name, actor.last_name FROM actor GROUP BY actor.first_name, actor.last_name ORDER BY COUNT(actor.actor_id) DESC NULLS LAST LIMIT 1
SELECT DISTINCT address.district FROM address GROUP BY address.district HAVING COUNT(address.address_id) >= 2
SELECT DISTINCT address.district FROM address GROUP BY address.district HAVING COUNT(address.district) >= 2
SELECT address.phone, address.postal_code FROM address WHERE address.address = '1031 Daugavpings Parkway'
SELECT address.phone, address.postal_code FROM address WHERE address.address = '1031 Daugavpings Parkway'
SELECT COUNT(*) FROM address WHERE district = 'California'
SELECT COUNT(*) FROM address WHERE district = 'California'
SELECT film.title, film.film_id FROM film WHERE rental_rate = '0.99' AND length < '3'
SELECT film.title, film.film_id FROM film WHERE film.rental_rate = '0.99' AND film.length < '3'
SELECT payment_date FROM payment WHERE amount > 10 AND staff_id = 577071.7823
 SELECT payment.payment_date FROM payment WHERE payment.amount > 10 AND payment.staff_id = 577071.staff_first_name ILIKE '%Elsa%'
                        ```SELECT COUNT(*) FROM customer WHERE active = TRUE

COUNT(customer.active) AS total_active_customers FROM customer;
                        ```SELECT film.title, MAX(film.rental_rate) AS max_rental_rate FROM film GROUP BY film.title ORDER BY max_rental_rate DESC NULLS LAST LIMIT 1
SELECT film.title, film.rental_rate FROM film ORDER BY film.rental_rate DESC NULLS LAST LIMIT 1
SELECT inventory.store_id, COUNT(inventory.inventory_id) AS total_items FROM inventory GROUP BY inventory.store_id ORDER BY total_items DESC NULLS LAST LIMIT 1
SELECT MAX(store_id) AS max_store_id FROM inventory
SELECT SUM(payment.amount) AS total_amount FROM payment
SELECT SUM(payment.amount) AS total_amount FROM payment
SELECT COUNT(DISTINCT language_id) AS number_of_languages FROM film
SELECT COUNT(DISTINCT film.language_id) AS number_of_languages FROM film
SELECT film.title FROM film WHERE film.rating = 'R'
SELECT film.title FROM film WHERE film.rating = 'R'
SELECT COUNT(store_id) AS number_of_stores FROM store
SELECT COUNT(*) FROM store
SELECT COUNT(DISTINCT film.rating) AS number_of_ratings FROM film
SELECT COUNT(DISTINCT film.rating) AS number_of_ratings FROM film
SELECT film.title FROM film WHERE 'Deletedansenes' ILIKE '%special_features%'
SELECT COUNT(*) AS number_of_films FROM film WHERE special_features ILIKE '%Deleted%'
SELECT COUNT(inventory_id) AS total_items FROM inventory WHERE store_id = 1
SELECT COUNT(inventory_id) AS total_items FROM inventory WHERE store_id = 1
SELECT MIN(payment_date) AS earliest_payment_date FROM payment
SELECT MIN(payment_date) AS earliest_payment_date FROM payment
SELECT film.title FROM film WHERE (film.length > 100 OR film.rating = 'PG') AND film.replacement_cost <= 200
SELECT film.title FROM film WHERE (film.length > 100 OR film.rating = 'PG') AND film.replacement_cost <= 200
SELECT customer.store_id, COUNT(customer.customer_id) AS total_customers FROM customer GROUP BY customer.store_id ORDER BY total_customers DESC NULLS LAST LIMIT 1
SELECT customer.store_id FROM customer GROUP BY customer.store_id ORDER BY COUNT(customer.store_id) DESC NULLS LAST LIMIT 1
SELECT MAX(payment.amount) AS max_amount FROM payment
SELECT MAX(payment.amount) AS max_amount FROM payment
SELECT customer.first_name FROM customer WHERE customer.create_date <= '2005-08-23 02:06:01' AND NOT customer.customer_id IN (SELECT customer_id FROM rental)
SELECT customer.first_name FROM customer WHERE customer.create_date < '2005-08-23 02:06:01' AND NOT customer.customer_id IN (SELECT rental.customer_id FROM rental)
SELECT COUNT(*) AS total_branches FROM bank
SELECT COUNT(*) AS total_branches FROM bank
SELECT CAST(no_of_customers AS FLOAT) AS number_of_customers FROM bank
SELECT SUM(bank.no_of_customers) AS total_customers FROM bank
 SELECT bank.no_of_customers FROM bank WHERE bank.city ilike '%New%York%City%'
                        ```SELECT SUM(bank.no_of_customers) AS total_customers FROM bank WHERE city ILIKE '%New%York%'
SELECT AVG(no_of_customers) AS average_number_of_customers FROM bank WHERE state = 'Utah' AND city = 'Salt Lake City'
SELECT AVG(bank.no_of_customers) AS average_customers FROM bank WHERE bank.state = 'Utah'
 AVG(bank.no_of_customers) AS average_customers FROM bank;
                        ``` AVG(bank.no_of_customers) AS average_number_of_customers FROM bank;
                        ```SELECT b.city, b.state FROM bank AS b WHERE b.branch_id = 707071
SELECT bank.city, bank.state FROM bank WHERE bank.bname ILIKE '%morningside%'
SELECT bname FROM bank WHERE state = 'New York'
SELECT bname FROM bank WHERE state = 'New York'
SELECT customer.cust_name FROM customer ORDER BY customer.acc_bal ASC NULLS FIRST
SELECT customer.cust_name FROM customer ORDER BY customer.acc_bal DESC NULLS LAST
SELECT customer.state, customer.acc_type, customer.credit_score FROM customer WHERE customer.no_of_loans = 0
SELECT customer.state, customer.acc_type, customer.credit_score FROM customer WHERE customer.no_of_loans = 0
SELECT COUNT(DISTINCT city) AS num_cities FROM bank
SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank
SELECT COUNT(DISTINCT state) AS number_of_states FROM bank
SELECT COUNT(DISTINCT state) AS number_of_states FROM bank
SELECT COUNT(DISTINCT customer.acc_type) AS number_of_account_types FROM customer
SELECT COUNT(DISTINCT customer.acc_type) AS number_of_account_types FROM customer
SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name ILIKE '%a%'
SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name ILIKE '%a%'
SELECT customer.cust_name, SUM(customer.acc_bal) AS total_account_balance FROM customer WHERE customer.state IN ('Utah', 'Texas') GROUP BY customer.cust_name
SELECT state, AVG(acc_bal) AS average_account_balance FROM customer WHERE state IN ('Utah', 'Texas') GROUP BY state
SELECT customer.cust_name FROM customer WHERE customer.acc_type ILIKE '%saving%' AND customer.acc_type ILIKE '%checking%'
SELECT customer.cust_name FROM customer WHERE customer.acc_type ILIKE '%savings%' AND customer.acc_type ILIKE '%checking%'
SELECT customer.cust_name FROM customer WHERE customer.acc_type <> 'saving'
SELECT customer.cust_name FROM customer WHERE customer.acc_type <> 'savings'
SELECT customer.cust_name FROM customer WHERE NOT customer.acc_type ILIKE '%Mortgages%' ORDER BY customer.cust_name
SELECT customer.cust_name FROM customer WHERE customer.no_of_loans IS NULL
SELECT customer.cust_name FROM customer WHERE customer.credit_score < (SELECT AVG(customer.credit_score) FROM customer)
SELECT customer.cust_name FROM customer WHERE customer.credit_score < (SELECT AVG(customer.credit_score) FROM customer)
SELECT b.branch_id FROM bank AS b WHERE b.no_of_customers = (SELECT MAX(c.no_of_customers) FROM bank AS c)
SELECT b.branch_id FROM bank AS b WHERE b.no_of_customers = (SELECT MAX(c.no_of_customers) FROM bank AS c)
SELECT customer.cust_name FROM customer ORDER BY customer.credit_score ASC NULLS FIRST LIMIT 1
SELECT customer.cust_name FROM customer ORDER BY customer.credit_score ASC LIMIT 1
SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer WHERE customer.credit_score = (SELECT MAX(customer.credit_score) FROM customer)
SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer WHERE customer.credit_score = (SELECT MAX(customer.credit_score) FROM customer)
SELECT bank.state, SUM(bank.no_of_customers) AS total_customers FROM bank GROUP BY bank.state ORDER BY total_customers DESC NULLS LAST LIMIT 1
SELECT state, SUM(no_of_customers) AS total_customers FROM bank GROUP BY state ORDER BY total_customers DESC NULLS LAST LIMIT 1
SELECT customer.acc_type, AVG(customer.acc_bal) AS average_account_balance FROM customer WHERE customer.credit_score < 50 GROUP BY customer.acc_type
SELECT customer.acc_type, AVG(customer.acc_bal) AS average_account_balance FROM customer WHERE customer.credit_score < 50 GROUP BY customer.acc_type
SELECT customer.state, SUM(customer.acc_bal) AS total_account_balance FROM customer WHERE customer.credit_score > 100 GROUP BY customer.state
SELECT state, SUM(acc_bal) AS total_account_balance FROM customer WHERE credit_score > 100 GROUP BY state
SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE no_of_loans > 0
SELECT AVG(customer.credit_score) AS average_credit_score FROM customer WHERE customer.no_of_loans > 0
SELECT AVG(credit_score) FROM customer WHERE no_of_loans = 0
SELECT AVG(customer.credit_score) AS average_credit_score FROM customer WHERE customer.no_of_loans = 0
SELECT COUNT(*) AS total_notes FROM Assessment_Notes
SELECT date_of_notes FROM Assessment_Notes
SELECT COUNT(*) FROM Addresses WHERE zip_postcode = '197'
SELECT COUNT(DISTINCT behavior_incident.incident_type_code) AS number_of_incident_type_codes FROM Behavior_Incident
SELECT DISTINCT detention_type_code FROM Detention
SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code ILIKE '%NOISE%' ORDER BY date_incident_start
SELECT Detention.detention_summary FROM Detention
SELECT Students.cell_mobile_number, Students.email_address FROM Students
SELECT Students.email_address FROM Students WHERE Students.first_name ILIKE '%Emma%' AND Students.last_name ILIKE '%Rohan%'
SELECT COUNT(DISTINCT student_id) AS number_of_students FROM Students_in_Detention
SELECT Teachers.gender FROM Teachers WHERE Teachers.last_name ILIKE '%Medehurst%'
SELECT Ref_Incident_Type.incident_type_description FROM Ref_Incident_Type WHERE Ref_Incident_Type.incident_type_code = 'VIOLENCE'
SELECT MIN(monthly_rental) AS min_monthly_rental, MAX(monthly_rental) AS max_monthly_rental FROM Student_Addresses
SELECT Teachers.first_name FROM Teachers WHERE 'man' ILIKE '%Teachers.email_address%'
SELECT Assessment_Notes.date_of_notes, Assessment_Notes.text_of_notes, Assessment_Notes.other_details, Assessment_Notes.student_id, Assessment_Notes.teacher_id FROM Assessment_Notes ORDER BY Assessment_Notes.date_of_notes ASC NULLS FIRST
SELECT DISTINCT Addresses.city FROM Addresses ORDER BY Addresses.city ASC NULLS FIRST
SELECT Teachers.first_name, TEacers.last_name FROM Teachers ORDER BY teachers.last_name ASC NULLS FIRST
SELECT Student_addresses.monthly_rental, Student_addresses.other_details, Student_addresses.student_id, Student_addresses.address_id, Student_addresses.date_address_from, Student_addresses.date_address_to FROM Student_Addresses ORDER BY Student_addresses.monthly_rental DESC NULLS LAST
SELECT COUNT(*) AS total_students FROM students WHERE NOT student_id IN (SELECT student_id FROM Students)
SELECT Teachers.last_name FROM Teachers WHERE NOT Teachers.teacher_id IN (SELECT Detention.teacher_id FROM Teachers)
SELECT DISTINCT Maintenance_Engineers.last_name FROM Maintenance_Engineers
SELECT COUNT(DISTINCT fault_status) AS number_of_fault_status FROM Fault_Log_Parts
SELECT Maintenance_Engineers.first_name, Maintenance_Engineers.last_name FROM Maintenance_Engineers WHERE NOT Maintenance_Engineers.engineer_id IN (SELECT maintenance_visit.engineer_id FROM maintenance_visit)
SELECT a.asset_id, a.asset_details, a.asset_make, a.asset_model FROM Assets AS ASSET
SELECT MIN(asset_acquired_date) AS earliest_acquisition_date FROM Assets
SELECT DISTINCT asset_model FROM Assets
SELECT a.asset_make, a.asset_model, a.asset_details FROM Assets AS a ORDER BY a.asset_disposed_date ASC NULLS FIRST
SELECT parts.part_id, CAST(parts.chargeable_amount AS FLOAT) AS chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1
SELECT Staff.gender FROM Staff GROUP BY Staff.gender ORDER BY COUNT(Staff.gender) DESC NULLS LAST LIMIT 1
SELECT DISTINCT a.asset_model FROM Assets AS a LEFT JOIN fault_logs ON a.asset_id = fl.asset_id WHERE fl.asset_id IS NULL
SELECT station.local_authority, ARRAY_AGG(DISTINCT station.services) AS services FROM station GROUP BY station.local_authority
SELECT t.train_number, t.name FROM train AS t ORDER BY t.time ASC NULLS FIRST
SELECT t.time, CAST(t.train_number AS FLOAT) AS train_number FROM train AS t WHERE t.destination = 'Chennai' ORDER BY t.time
SELECT COUNT(*) FROM train WHERE name ILIKE '%Express%'
SELECT t.train_number, t.time FROM train AS t WHERE t.origin = 'Chennai' AND t.destination = 'Guruvayur'
SELECT train.origin, COUNT(*) AS total_trains FROM train GROUP BY train.origin
SELECT daily_weather.day_of_week, AVG(daily_weather.high_temperature) AS average_high_temperature FROM weekly_weather GROUP BY daily_weather.day_of_week
SELECT COUNT(DISTINCT services) AS number_of_services FROM station
SELECT MIN(daily_weather.low_temperature) AS lowest_temperature, MAX(daily_weather.wind_speed_mph) AS highest_wind_speed FROM weekly_weather
SELECT DISTINCT origin FROM train GROUP BY origin HAVING COUNT(id) > 1
SELECT COUNT(*) AS num_professors FROM CLASS WHERE CLASS_CODE = 'ACCT-211'
SELECT COUNT(*) AS number_of_professors FROM CLASS WHERE class_code = 'ACCT-211'
SELECT DEPARTMENT.SCHOOL_CODE FROM DEPARTMENT WHERE DEPARTMENT.DEPT_NAME ILIKE '%Accounting%'
SELECT DEPARTMENT.SCHOOL_CODE FROM DEPARTMENT WHERE DEPARTMENT.DEPT_NAME ILIKE '%Accounting%'
SELECT COURSE.CRS_CREDIT, COURSE.CRS_DESCRIPTION FROM COURSE WHERE COURSE.CRS_CODE = 'CIS-220'
SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'CIS-220'
SELECT department.dept_address FROM DEPARTMENT WHERE department.dept_name ILIKE '%history%'
SELECT DEPARTMENT.DEPT_ADDRESS FROM DEPARTMENT WHERE DEPARTMENT.DEPT_NAME ILIKE '%History%'
SELECT COUNT(DISTINCT dept_address) AS num_locations FROM DEPARTMENT WHERE dept_code = 'BUS'
SELECT DISTINCT department.dept_address FROM DEPARTMENT WHERE department.school_code = 'BUS'
SELECT SCHOOL_CODE, COUNT(DEPT_ADDRESS) AS num_locations FROM DEPARTMENT GROUP BY SCHOOL_CODE
SELECT SCHOOL_CODE, COUNT(DEPT_ADDRESS) AS num_addresses FROM DEPARTMENT GROUP BY SCHOOL_CODE
SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'QM-261'
SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE WHERE COURSE.CRS_CODE = 'QM-261'
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_count FROM DEPARTMENT GROUP BY SCHOOL_CODE
SELECT SCHOOL_CODE, COUNT(DEPT_NAME) AS dept_count FROM DEPARTMENT GROUP BY SCHOOL_CODE
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_count FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DEPT_CODE) < 5
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS dept_count FROM DEPARTMENT WHERE EMP_NUM < 5 GROUP BY SCHOOL_CODE
SELECT COURSE_NUM, COUNT(CLASS_SECTION) AS num_sections FROM CLASS GROUP BY COURSE_NUM
SELECT COURSE.CRN_ABBREV, COUNT(CLASS_SECTION) AS SECTION_COUNT FROM COURSE JOIN CLASS ON COURSE.CRN_ABBREV = CLASS.CRS_CODE GROUP BY COURSE.CRN_ABBREV
SELECT COURSE.DEPT_CODE, SUM(COURSE.CRS_CREDIT) AS total_credits FROM COURSE GROUP BY COURSE.DEPT_CODE
SELECT COURSE.DEPT_CODE, SUM(COURSE.CRS_CREDIT) AS total_credits FROM COURSE GROUP BY COURSE.DEPT_CODE
SELECT COUNT(*) AS total_classes FROM CLASS WHERE class_room IN (SELECT DISTINCT class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2)
SELECT class_room, COUNT(*) AS num_classes FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2
SELECT EMPLOYEE.EMP_JOBCODE, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY EMPLOYEE.EMP_JOBCODE ORDER BY COUNT DESC NULLS LAST LIMIT 1
SELECT e.emp_hiredate, COUNT(e.emp_num) AS emp_count FROM EMPLOYEE AS e GROUP BY e.emp_jobcode ORDER BY emp_count DESC NULLS LAST LIMIT 1
SELECT p.dept_code, COUNT(*) AS num_professors FROM PROFESSOR AS p WHERE p.prof_high_degree = 'Ph.D.' GROUP BY p.dept_code
SELECT p.dept_code, CAST(COUNT(CASE WHEN prof_high_degree = 'Yes' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_with_phd FROM PROFESSOR AS p GROUP BY p.dept_code
SELECT dept_code, COUNT(*) AS total_students FROM STUDENT GROUP BY dept_code
SELECT dept_code, COUNT(*) AS total_students FROM STUDENT GROUP BY dept_code
SELECT dept_code, COUNT(*) AS total_hours FROM STUDENT GROUP BY dept_code
SELECT dept_code, total_hours FROM (SELECT s.dept_code, SUM(stu_hrs) AS total_hours FROM STUDENT AS s GROUP BY s.dept_code) AS subquery
SELECT dept_code, MAX(stu_gpa) AS max_gpa, AVG(stu_gpa) AS avg_gpa, MIN(stu_gpa) AS min_gpa FROM STUDENT GROUP BY dept_code
SELECT dept_code, MAX(stu_gpa) AS max_gpa, MIN(stu_gpa) AS min_gpa, AVG(stu_gpa) AS avg_gpa FROM STUDENT GROUP BY dept_code
SELECT COUNT(*) AS total_schools FROM DEPARTMENT
SELECT COUNT(*) AS school_count FROM DEPARTMENT
SELECT COUNT(DISTINCT class_code) AS number_of_classes FROM CLASS
SELECT COUNT(DISTINCT class_code) AS num_classes FROM CLASS
SELECT COUNT(*) AS total_courses FROM CLASS
SELECT COUNT(DISTINCT class_code) AS num_course_codes FROM CLASS
SELECT COUNT(*) AS department_count FROM DEPARTMENT WHERE dept_name ILIKE '%college%'
SELECT COUNT(DISTINCT dept_name) AS number_of_departments FROM DEPARTMENT
SELECT COUNT(*) AS total_sections FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT COUNT(DISTINCT class_section) AS num_class_sections FROM CLASS WHERE crs_code = 'ACCT-211'
SELECT COUNT(*) AS total_employees FROM EMPLOYEE
SELECT COUNT(*) AS total_employees FROM EMPLOYEE
SELECT COUNT(*) FROM PROFESSOR WHERE PROF_HIGH_DEGREE ILIKE '%Ph.D.%'
SELECT COUNT(*) AS total_professors FROM PROFESSOR WHERE prof_high_degree ILIKE '%Ph.D.%'
SELECT department.dept_name FROM DEPARTMENT ORDER BY department.dept_name
SELECT dept_name FROM DEPARTMENT ORDER BY dept_name ASC NULLS FIRST
SELECT class_code FROM CLASS WHERE class_room = 'KLR209'
SELECT DISTINCT class_code FROM CLASS WHERE class_room = 'KLR209'
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE EMPLOYEE.EMP_JOBCODE ILIKE '%PROF%' ORDER BY EMPLOYEE.EMP_DOB
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE EMPLOYEE.EMP_JOBCODE ILIKE '%Professor%' ORDER BY EMPLOYEE.EMP_DOB
SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME FROM EMPLOYEE ORDER BY EMPLOYEE.EMP_HIREDATE ASC NULLS FIRST LIMIT 1
SELECT EMPLOYEE.EMP_INITIAL, EMPLOYEE.EMP_LNAME FROM EMPLOYEE ORDER BY EMPLOYEE.EMP_DOB ASC NULLS FIRST LIMIT 1
SELECT s.stu_fname, s.stu_lname, MIN(s.stu_gpa) AS min_gpa FROM STUDENT AS s WHERE s.stu_gpa > 3.0 GROUP BY s.stu_fname, s.stu_lname ORDER BY min_gpa
SELECT s.stu_fname, s.stu_lname, s.stu_gpa FROM STUDENT AS s WHERE s.stu_gpa > 3 ORDER BY s.stu_dob ASC NULLS FIRST LIMIT 1
SELECT e.emp_fname FROM employee LEFT JOIN EMPLOYEE AS ce ON e.emp_num = ce.emp_num WHERE ce.emp_num IS NULL
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE EMPLOYEE.EMP_JOBCODE <> 'INSTRUCTOR'
SELECT COUNT(*) FROM PROFESSOR WHERE prof_high_degree IN ('Ph.D.', 'MA')
SELECT COUNT(*) FROM PROFESSOR WHERE (PROF_HIGH_DEGREE = 'Ph.D.' OR PROF_HIGH_DEGREE = 'Masters')
SELECT STUDENT.STU_FNAME, STUDENT.STU_GPA, STUDENT.STU_PHONE FROM STUDENT ORDER BY STUDENT.STU_GPA DESC NULLS LAST LIMIT 5
SELECT STU_FNAME, CAST(STU_GPA AS FLOAT), STU_PHONE FROM STUDENT ORDER BY CAST(STU_GPA AS FLOAT) DESC NULLS LAST LIMIT 5
SELECT s.stu_fname, s.stu_gpa FROM STUDENT AS s WHERE s.stu_gpa < (SELECT AVG(stu_gpa) FROM STUDENT)
SELECT s.stu_fname, CAST(AVG(s.stu_gpa) AS FLOAT) AS avg_gpa FROM STUDENT AS s WHERE s.stu_gpa < AVG(s.stu_gpa) GROUP BY s.stu_fname
SELECT COUNT(*) AS total_clubbs FROM club
SELECT COUNT(*) AS total_clubbs FROM club
SELECT DISTINCT club.region FROM club ORDER BY club.region ASC NULLS FIRST
SELECT region FROM club GROUP BY region ORDER BY region ASC NULLS FIRST
SELECT AVG(Gold) AS average_gold FROM club_rank
SELECT AVG(Gold) AS average_gold FROM club_rank
SELECT competition.competition_type, competition.country FROM competition GROUP BY competition.competition_type, competition.country
SELECT competition.competition_type, competition.country FROM competition ORDER BY competition.competition_type, competition.country
SELECT DISTINCT competition.year FROM competition WHERE competition.competition_type <> 'Tournament' ORDER BY competition.year
SELECT DISTINCT competition.year FROM competition WHERE competition.competition_type <> 'tournament'
SELECT MIN(Silver) AS min_silver, MAX(Silver) AS max_silver FROM club_rank
SELECT MIN(Silver) AS min_silver, MAX(Silver) AS max_silver FROM club_rank
SELECT COUNT(*) FROM club_rank WHERE total < 10
SELECT COUNT(*) AS total_clubbs FROM club_rank WHERE total < 10
SELECT c.name FROM club AS c ORDER BY c.start_year ASC NULLS FIRST
SELECT c.name FROM club AS c JOIN (SELECT MIN(start_year) AS min_start_year FROM club) AS min ON c.start_year = min.min_start_year
SELECT c.name FROM club AS c ORDER BY c.name DESC NULLS LAST
SELECT club.name FROM club ORDER BY club.name DESC NULLS LAST
WITH player_position AS (SELECT name, position FROM player), avg_points AS (SELECT position, AVG(Points) AS avg_point FROM player GROUP BY position) SELECT p.name, pp.position, ap.avg_point FROM player_position JOIN player AS ap ON p.position = ap.position
SELECT p.position, AVG(p.points) AS average_points FROM player AS p GROUP BY p.position
SELECT p.position, AVG(p.points) AS average_points FROM player AS p GROUP BY p.position HAVING AVG(p.points) > 20 ORDER BY average_points DESC NULLS LAST
SELECT player.position FROM player WHERE CAST(AVG(player.points) AS FLOAT) > 20
SELECT competition.competition_type, COUNT(*) AS competition_count FROM competition GROUP BY competition.competition_type
SELECT competition.competition_type, COUNT(*) AS competition_count FROM competition GROUP BY competition.competition_type
SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(competition_type) DESC NULLS LAST LIMIT 1
SELECT competition.competition_type, COUNT(*) AS frequency FROM competition GROUP BY competition.competition_type ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT competition.competition_type FROM competition GROUP BY competition.competition_type HAVING COUNT(competition.competition_id) > 5
SELECT competition.competition_type, COUNT(*) AS competition_count FROM competition GROUP BY competition.competition_type HAVING COUNT(*) >= 5 ORDER BY competition_count DESC NULLS LAST LIMIT 1
SELECT c.name FROM club AS c LEFT JOIN player ON c.club_id = p.club_id WHERE p.start_year IS NULL
SELECT club.name FROM club WHERE NOT club.name IN (SELECT player_club.club_id FROM player_club)
SELECT player.position FROM player WHERE (player.points > 20 AND player.points < 10) ORDER BY player.position
SELECT player.position FROM player WHERE (player.points > 20 AND player.points < 10) OR (player.points < -20 AND player.points > -10)
SELECT SUM(Points) AS total_points FROM player
SELECT SUM(Points) AS total_points FROM player
SELECT COUNT(DISTINCT Position) AS number_of_positions FROM player
SELECT COUNT(DISTINCT player.position) AS number_of_positions FROM player
SELECT p.name FROM player AS p WHERE p.points > (SELECT AVG(points) FROM player)
SELECT p.name FROM player AS p WHERE p.points > (SELECT AVG(points) FROM player)
SELECT p.position, COUNT(*) AS player_count FROM player AS p WHERE p.points < '30' GROUP BY p.position
SELECT p.position, CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM player WHERE points >= 30), 0) AS proportion FROM player AS p GROUP BY p.position
SELECT competition.country, COUNT(competition.competition_id) AS num_competitions FROM competition WHERE competition.competition_type ILIKE '%Tournament%' GROUP BY competition.country ORDER BY num_competitions DESC NULLS LAST LIMIT 1
SELECT competition.country, COUNT(competition.competition_id) AS num_competitions FROM competition GROUP BY competition.country ORDER BY num_competitions DESC NULLS LAST LIMIT 1
SELECT DISTINCT competition.country FROM competition WHERE competition.competition_type ILIKE '%friendly%' AND competition.competition_type ILIKE '%tournament%'
SELECT DISTINCT competition.country FROM competition WHERE competition.competition_type IN ('friendly', 'tournament')
 SELECT DISTINCT country FROM competition WHERE competition_type not ilike '%friendly%'
                        ```SELECT DISTINCT competition.country FROM competition WHERE NOT competition.competition_type ILIKE '%friendly%' ORDER BY competition.country
SELECT SUM(furniture.num_of_component) AS total_components FROM furniture
SELECT furniture.name, furniture.furniture_id FROM furniture ORDER BY furniture.market_rate DESC NULLS LAST LIMIT 1
SELECT SUM(furniture.market_rate) AS total_market_rate FROM furniture ORDER BY furniture.market_rate DESC NULLS LAST LIMIT 2
SELECT furniture.num_of_component, furniture.name FROM furniture WHERE furniture.num_of_component > 10
SELECT f.name, f.num_of_component FROM furniture AS f WHERE f.market_rate = (SELECT MIN(f2.market_rate) FROM furniture AS f2)
SELECT m.name, TO_CHAR(TO_TIMESTAMP(m.open_year), 'YYYY') AS open_year FROM manufacturer AS m ORDER BY m.num_of_shops DESC NULLS LAST LIMIT 1
SELECT AVG(manufacturer.num_of_factories) AS average_number_of_factories FROM manufacturer WHERE manufacturer.num_of_shops > 20
SELECT m.name, CAST(m.open_year AS FLOAT) AS open_year FROM manufacturer AS m ORDER BY open_year
SELECT manufacturer.name, manufacturer.open_year FROM manufacturer WHERE (manufacturer.num_of_factories < 10 OR manufacturer.num_of_shops > 10) AND NOT manufacturer.num_of_factories IS NULL AND NOT manufacturer.num_of_shops IS NULL
SELECT AVG(Num_of_Factories), MAX(Num_of_Shops) FROM manufacturer WHERE Open_Year < 1990
SELECT furniture.market_rate, furniture.name FROM furniture WHERE NOT furniture.furniture_id IN (SELECT component.furniture_id FROM furniture)
SELECT first_name, last_name, salary FROM employees WHERE salary < 6000
SELECT first_name, last_name, salary FROM employees WHERE salary < 6000
SELECT e.first_name, d.phone_number FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE e.last_name ILIKE '%McEwen%'
SELECT e.first_name, d.phone_number FROM employees JOIN employees AS d ON e.department_id = d.phone_number WHERE e.last_name ILIKE '%McEwen%'
SELECT first_name, last_name, email, phone_number FROM employees WHERE department_id IS NULL
SELECT first_name, last_name FROM employees WHERE department_id IS NULL
SELECT departments.department_name FROM departments WHERE departments.department_name ILIKE '%Marketing%' ORDER BY departments.department_name
SELECT departments.department_name FROM departments WHERE departments.department_name ILIKE '%Marketing%' ORDER BY departments.department_name
SELECT employees.hire_date FROM employees WHERE NOT employees.first_name ILIKE '%M%' AND NOT employees.first_name ILIKE 'm%'
SELECT employees.hire_date FROM employees WHERE NOT employees.first_name ILIKE '%M%' AND NOT employees.last_name ILIKE '%M%'
SELECT e.first_name, e.last_name, e.hire_date, e.salary, d.phone_number FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE NOT first_name ILIKE '%M%'
SELECT e.last_name, e.first_name, e.hire_date, e.salary, d.department_id FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE NOT e.first_name ILIKE '%M%'
SELECT e.first_name, e.last_name, e.hire_date, e.salary, d.phone_number FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE NOT first_name ILIKE '%M%' ORDER BY d.phone_number ASC NULLS FIRST
SELECT e.first_name, e.last_name, e.hire_date, e.salary, e.department_id FROM employees AS e WHERE NOT e.first_name ILIKE '%M%' ORDER BY e.department_id ASC NULLS FIRST
SELECT COUNT(*) AS total_employees FROM employees WHERE salary BETWEEN 8000 AND 12000
SELECT employees.phone_number FROM employees WHERE employees.salary BETWEEN 8000 AND 12000
 SELECT first_name, last_name, salary, commission_pct, department_id FROM employees WHERE (salary BETWEEN 8000 AND 12000) AND ((commission_pct IS NOT NULL) OR (department_id != 40))
                        ``` SELECT first_name, last_name, salary FROM employees WHERE (salary BETWEEN 8000 AND 12000) AND ((commission_pct IS NOT NULL) OR (department_id != 40))
                        ```SELECT first_name, last_name, salary FROM employees WHERE commission_pct IS NULL
SELECT first_name, last_name, salary FROM employees WHERE commission_pct IS NULL
SELECT FIRST_NAME, LAST_NAME, SALARY FROM employees WHERE FIRST_NAME ILIKE '%m.%' ORDER BY FIRST_NAME
SELECT first_name || ' ' || last_name AS full_name, salary FROM employees WHERE first_name ILIKE '%m.'
SELECT employees.employee_id, employees.hire_date FROM employees WHERE employees.hire_date BETWEEN '2007-11-05' AND '2009-07-05'
SELECT employees.employee_id, employees.hire_date FROM employees WHERE employees.hire_date BETWEEN CAST('2007-11-05' AS TIMESTAMP) AND CAST('2009-07-05' AS TIMESTAMP)
SELECT employees.first_name, employees.last_name FROM employees WHERE employees.department_id IN (70, 90)
SELECT first_name, last_name FROM employees WHERE department_id IN (70, 90)
SELECT e.salary, COUNT(DISTINCT m.manager_id) AS manager_number FROM employees AS e JOIN managers ON e.manager_id = m.employee_id GROUP BY e.salary
SELECT e.salary, m.manager_id FROM employees AS e JOIN employees AS m ON e.manager_id = m.employee_id
SELECT first_name, last_name, hire_date FROM employees WHERE hire_date < '2002-06-21' ORDER BY hire_date
 SELECT first_name, last_name FROM employees WHERE hire_date < '2002-06-21'
                        ```SELECT employees.last_name, employees.first_name, employees.salary FROM employees WHERE (employees.first_name ILIKE 'D%' OR employees.first_name ILIKE 'S%') ORDER BY employees.salary DESC NULLS LAST
SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE (employees.first_name ILIKE 'D%' OR employees.first_name ILIKE 'S%') ORDER BY employees.salary DESC NULLS LAST
 SELECT first_name, last_name FROM employees WHERE hire_date > '1987-09-07'
                        ``` SELECT first_name, last_name FROM employees WHERE hire_date > '1987-09-07'
                        ```SELECT j.job_title FROM jobs AS j WHERE CAST(j.min_salary AS FLOAT) > 9000
SELECT j.job_title FROM jobs AS j WHERE j.max_salary > 9000
SELECT MAX_SALARY - MIN_SALARY AS salary_difference, JOB_TITle FROM jobs WHERE MAX_SALARY BETWEEN 12000 AND 18000
SELECT jobs.job_title, AVG(jobs.max_salary) AS average_max_salary FROM jobs WHERE jobs.max_salary BETWEEN 12000 AND 18000 GROUP BY jobs.job_title
SELECT employees.email FROM employees WHERE employees.commission_pct IS NULL AND employees.salary BETWEEN 7000 AND 12000 AND employees.department_id = 50
SELECT employees.email FROM employees WHERE employees.commission_pct IS NULL AND employees.salary BETWEEN 7000 AND 12000 AND employees.department_id = 50
WITH previous_job AS (SELECT employee_id, start_date, end_date, LAG(end_date) OVER (PARTITION BY employee_id ORDER BY start_date NULLS FIRST) AS previous_end_date FROM role_history), next_job AS (SELECT employee_id, start_date, LEAD(start_date) OVER (PARTITION BY employee_id ORDER BY start_date DESC NULLS LAST) AS next_start_date FROM previous_job WHERE end_date IS NULL) SELECT pj.employee_id, pj.previous_end_date, nj.next_start_date FROM previous_job JOIN job_history AS nj ON pj.employee_id = nj.employee_id
SELECT e.employee_id, j.job_id, ph.start_date, ph.end_date FROM job_history AS e JOIN jobs ON e.job_id = j.job_id JOIN role_history ON e.employee_id = ph.employee_id AND j.job_id = ph.job_id ORDER BY e.employee_id
SELECT department_id FROM employees WHERE commission_pct > 10 GROUP BY department_id HAVING COUNT(employee_id) > 10
SELECT DISTINCT employees.department_id FROM employees WHERE NOT employees.commission_pct IS NULL GROUP BY employees.department_id HAVING COUNT(employees.employee_id) > 10
SELECT DISTINCT department_id FROM employees WHERE manager_id IN (SELECT employee_id FROM employees GROUP BY employee_id HAVING COUNT(employee_id) >= 4)
SELECT DISTINCT employees.department_id FROM employees WHERE employees.manager_id > 3
SELECT departments.department_id, AVG(employees.salary) AS average_salary FROM employes JOIN employees ON employes.department_id = departments.department_id GROUP BY departments.department_id
SELECT AVG(employees.salary) AS average_salary FROM employees WHERE NOT employees.commission_pct IS NULL
SELECT COUNTRY_ID, COUNT(CITY) AS city_count FROM locations GROUP BY COUNTRY_ID
SELECT COUNTRY_ID, COUNT(CITY) AS city_count FROM locations GROUP BY COUNTRY_ID
 SELECT r.job_id FROM (SELECT jh.employee_id, COUNT(*) OVER (PARTITION BY jh.employee_id) AS num_jobs, (jh.end_date - jh.start_date) AS days_worked FROM job_history jh) r WHERE r.num_jobs >= 2 AND r.days_worked > 300;
                        ```SELECT r.job_id FROM (SELECT jh.job_id, COUNT(*) AS num_days FROM job_history WHERE jh.end_date - jh.start_date > 300 GROUP BY jh.job_id) AS r JOIN (SELECT job_history.job_id FROM job_history GROUP BY employment_history.job_id HAVING COUNT(employment_history.job_id) > 1) AS e ON r.job_id = e.job_id
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(job_id) >= 2
SELECT DISTINCT r.employee_id FROM (SELECT e.employee_id, COUNT(j.job_id) AS job_count FROM job_history AS e JOIN job_history ON e.employee_id = j.employee_id GROUP BY e.employee_id HAVING COUNT(j.job_id) >= 2) AS r
SELECT e.first_name, e.last_name FROM employees AS e WHERE e.salary > (SELECT hire_date FROM employees WHERE employee_id = 163)
SELECT e.first_name, e.last_name FROM employees AS e WHERE e.salary > (SELECT salaries.salary FROM employees AS salaries WHERE salaries.employee_id = 163)
SELECT employees.department_id, MIN(employees.salary) AS min_salary FROM employees GROUP BY employees.department_id
SELECT employees.department_id, MIN(employees.salary) AS min_salary FROM employees GROUP BY employees.department_id
SELECT e.first_name, e.last_name, d.department_id FROM employees AS e JOIN (SELECT department_id, MIN(salary) AS min_salary FROM employees GROUP BY department_id) AS d ON e.department_id = d.department_id
SELECT e.first_name, e.last_name, d.department_id FROM employees AS e JOIN (SELECT department_id, MIN(salary) AS min_salary FROM employees GROUP BY department_id) AS d ON e.department_id = d.department_id
SELECT employees.employee_id FROM employees WHERE employees.salary > (SELECT AVG(salary) FROM employees)
SELECT e.employee_id FROM employees AS e WHERE e.salary > (SELECT AVG(salary) FROM employees)
SELECT e.employee_id, e.salary FROM employees AS e WHERE first_name ILIKE '%Payam%'
SELECT e.employee_id, CAST(e.salary AS FLOAT) AS salary FROM employees AS e WHERE e.first_name ILIKE '%Payam%' AND e.last_name ILIKE '%Payam%'
SELECT d.department_name FROM departments AS d WHERE d.department_name ILIKE '%Marketing%'
SELECT departments.department_name FROM departments WHERE departments.department_name ILIKE '%Marketing%' ORDER BY departments.department_name
SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(job_id) >= 2
SELECT DISTINCT r.employee_id FROM (SELECT e.employee_id, COUNT(eh.job_id) AS job_count FROM job_history AS e JOIN employment_history ON e.employee_id = eh.employee_id GROUP BY e.employee_id) AS r WHERE r.job_count >= 2
SELECT DISTINCT employees.department_id FROM employees WHERE employees.manager_id IN (SELECT employee_id FROM employees GROUP BY employee_id HAVING COUNT(employee_id) >= 4)
SELECT DISTINCT employees.department_id FROM employees WHERE (SELECT COUNT(*) FROM employees AS e2 WHERE e2.manager_id = employees.employee_id) >= 4
SELECT employees.jOB_id FROM employees WHERE (SELECT AVG(employees.salary) FROM employees) > 8000
SELECT employees.jOB_id FROM employees WHERE CAST((employees.salary) AS FLOAT) > '8000' GROUP BY employees.jOB_id
SELECT first_name, last_name, salary FROM employees WHERE salary >= (SELECT MIN(salary) FROM employees) AND salary <= 2500
SELECT first_name, last_name, salary FROM employees WHERE salary > (SELECT MIN(salary) FROM employees) AND salary < 2500
SELECT e.employee_id FROM employees AS e WHERE NOT e.manager_id BETWEEN 100 AND 200
SELECT e.employee_id FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE NOT e.manager_id BETWEEN 100 AND 200
SELECT e.first_name, e.last_name, e.hire_date FROM employees AS e JOIN employees AS m ON e.department_id = m.department_id WHERE m.first_name ILIKE '%Clara%'
SELECT e.last_name, e.first_name, e.hire_date FROM employees AS e JOIN employees AS c ON e.department_id = c.department_id WHERE c.first_name ILIKE '%Clara%'
SELECT e.first_name, e.last_name, e.hire_date FROM employees AS e WHERE e.department_id = 757071 AND e.employee_id <> 747071
 SELECT e.first_name, e.last_name, e.hire_date FROM employees e WHERE e.department_id IN (SELECT d.department_id FROM employees d WHERE d.first_name ilike '%Clara%') AND e.first_name not ilike '%Clara%'
                        ```SELECT e.employee_id, e.first_name, e.last_name FROM employees AS e WHERE EXISTS(SELECT 1 FROM employees AS e2 WHERE e2.department_id = e.department_id AND e2.first_name ILIKE '%T%')
SELECT e.employee_id, e.first_name, e.last_name FROM employees JOIN employees AS d ON e.department_id = d.department_id WHERE e.first_name ILIKE '%T%'
SELECT e.employee_id, e.first_name, e.last_name, e.salary FROM employees AS e WHERE e.salary > (SELECT AVG(salary) FROM employees) AND EXISTS(SELECT 1 FROM employees AS e2 WHERE e2.department_id = e.department_id AND e2.first_name ILIKE '%J%')
SELECT e.employee_id, e.first_name, e.last_name, e.salary FROM employees AS e WHERE e.salary > (SELECT AVG(salary) FROM employees) AND e.first_name ILIKE '%J%' AND EXISTS(SELECT 1 FROM employees AS d WHERE d.department_id = e.department_id)
SELECT e.employee_id, e.job_id FROM employees AS e WHERE e.salary < (SELECT MIN(e2.salary) FROM employees AS e2 WHERE e2.hire_date = 'MK_MAN')
SELECT e.employee_id, j.hire_date FROM employees AS e JOIN jobs ON e.job_id = j.job_id WHERE j.hire_date = 'MK_MAN' AND e.salary < (SELECT MIN(salary) FROM employees WHERE job_id = 10)
SELECT e.employee_id, e.first_name, e.last_name, j.hire_date FROM employees AS e JOIN jobs ON e.job_id = j.job_id WHERE e.salary > (SELECT MAX(e2.salary) FROM employees AS e2 WHERE e2.hire_date ILIKE '%Pu_Man%') AND NOT j.hire_date ILIKE '%Pu_Man%' ORDER BY e.employee_id
SELECT e.employee_id, e.first_name, e.last_name, j.hire_date FROM employees AS e JOIN jobs ON e.job_id = j.job_id WHERE j.hire_date = 'PU_MAN' AND e.salary > (SELECT MAX(salary) FROM employees WHERE job_id IN (SELECT job_id FROM employees WHERE job_id = (SELECT MIN(employee_id) FROM employees WHERE job_id = 751071)))
SELECT department_id, COUNT(employee_id) AS number_of_employees, SUM(salary) AS total_salary FROM employees GROUP BY department_id HAVING COUNT(employee_id) >= 2
SELECT departments.department_id, COUNT(employees.salary) AS total_salary FROM employees JOIN employees ON departments.department_id = employees.department_id GROUP BY departments.department_id HAVING COUNT(employees.salary) > 2
SELECT first_name, last_name, hire_date FROM employees WHERE commission_pct IS NULL
SELECT employees.first_name, employees.last_name FROM employees WHERE employees.job_id IS NULL
SELECT e.department_id, e.first_name, e.last_name, e.salary FROM employees AS e WHERE e.salary = (SELECT MAX(e2.salary) FROM employees AS e2 WHERE e2.department_id = e.department_id)
SELECT e.department_id, e.first_name, e.last_name, e.salary FROM employees AS e WHERE e.salary IN (SELECT MAX(e2.salary) FROM employees AS e2 GROUP BY e2.department_id)
SELECT song.song_name FROM song ORDER BY song.releasedate DESC NULLS LAST LIMIT 1
SELECT song.song_name FROM song ORDER BY song.releasedate DESC NULLS LAST LIMIT 1
SELECT files.f_id FROM files ORDER BY LENGTH(files.duration) DESC NULLS LAST LIMIT 1
SELECT files.f_id FROM files ORDER BY CAST(files.duration AS FLOAT) DESC NULLS LAST LIMIT 1
SELECT song.song_name FROM song WHERE song.languages ILIKE '%English%'
SELECT song.song_name FROM song WHERE song.languages ILIKE '%English%' ORDER BY song.song_name
 SELECT f_id FROM files WHERE formats ilike '%mp3%'
                        ``` SELECT f_id FROM files WHERE formats ilike '%mp3%'
                        ```SELECT COUNT(*) AS total_songs_with_duration FROM files WHERE duration = '4'
 SELECT COUNT(*) AS total_songs FROM files WHERE duration ~ '^4$*' AND file_size IS NOT NULL;
                        ```SELECT COUNT(*) AS total_artists FROM artist WHERE country = 'Bangladesh'
SELECT COUNT(*) AS total_bangladeshi_artists FROM artist WHERE country = 'Bangladesh'
SELECT formats FROM files GROUP BY formats ORDER BY COUNT(formats) DESC NULLS LAST LIMIT 1
SELECT formats FROM files GROUP BY formats ORDER BY COUNT(formats) DESC NULLS LAST LIMIT 1
SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english'
SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english'
SELECT files.f_id FROM files WHERE formats ILIKE '%mp4%' AND CAST(file_size AS FLOAT) < 1000
SELECT f_id FROM files WHERE formats ILIKE '%mp4%' AND CAST(file_size AS FLOAT) < 1000
SELECT artist.gender, COUNT(*) AS total_artists FROM artist GROUP BY artist.gender
SELECT gender, COUNT(*) AS COUNT FROM artist GROUP BY gender
SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages
SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages
SELECT files.formats, COUNT(DISTINCT files.artist_name) AS num_artists FROM files GROUP BY files.formats
SELECT formats, COUNT(*) AS number_of_songs FROM files GROUP BY formats
SELECT DISTINCT song.song_name FROM song WHERE song.languages > 'English' AND song.resolution > (SELECT MIN(song.resolution) FROM song WHERE song.languages = 'English')
SELECT song.song_name FROM song WHERE song.languages <> 'English' AND song.resolution > (SELECT MAX(song.resolution) FROM song WHERE song.languages = 'English')
SELECT s.song_name FROM song AS s WHERE s.genre_is <> 'blues' AND EXISTS(SELECT 1 FROM song AS sb WHERE sb.genre_is = 'blues' AND sb.rating < s.rating)
SELECT s.song_name FROM song AS s WHERE s.genre_is <> 'blues' AND EXISTS(SELECT 1 FROM song AS sb WHERE sb.genre_is = 'blues' AND sb.rating < s.rating)
SELECT genre.g_name, CAST(genre.rating AS FLOAT) FROM genre ORDER BY genre.g_name ASC NULLS FIRST
SELECT genre.g_name, CAST(genre.rating AS FLOAT) AS rating FROM genre ORDER BY genre.g_name ASC NULLS FIRST
SELECT song.song_name FROM song ORDER BY song.resolution DESC NULLS LAST
SELECT song.song_name FROM song ORDER BY song.resolution
SELECT f_id FROM files WHERE formats ILIKE '%mp4%' OR CAST(duration AS INT) > 720
SELECT f_id FROM files WHERE formats ILIKE '%mp4%' OR CAST(file_size AS INT) > 720
SELECT languages, COUNT(*) AS frequency FROM song GROUP BY languages ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT languages FROM song GROUP BY languages ORDER BY COUNT(languages) DESC NULLS LAST
SELECT languages, COUNT(*) AS frequency FROM song WHERE resolution > 500 GROUP BY languages ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT song.languages, song.artist_name, COUNT(song.f_id) AS COUNT FROM song WHERE song.resolution > 500 GROUP BY song.languages, song.artist_name ORDER BY COUNT DESC NULLS LAST
SELECT artist.artist_name FROM artist WHERE gender = 'Male' AND country = 'UK'
SELECT artist.artist_name FROM artist WHERE gender = 'male' AND country = 'Britain'
SELECT song.song_name FROM song WHERE (song.genre_is = 'modern' OR song.languages = 'English')
SELECT song.song_name FROM song WHERE (song.languages = 'English' OR song.genre_is LIKE '%modern%') AND song.country IS NULL
SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english'
SELECT artist.artist_name FROM artist WHERE artist.country = 'UK' AND artist.preferred_genre = 'english'
SELECT AVG(song.rating), AVG(song.resolution) FROM song WHERE genre_is ILIKE '%Bangla%'
SELECT AVG(song.rating), AVG(song.resolution) FROM song WHERE genre_is ILIKE '%bangla%'
SELECT song.song_name FROM song WHERE song.languages ILIKE '%English%' AND song.rating < (SELECT MIN(song.rating) FROM song)
SELECT s.song_name FROM song AS s WHERE s.languages ILIKE '%English%' AND s.rating < (SELECT MIN(song.rating) FROM song AS song WHERE song.languages ILIKE '%English%')
SELECT s.song_name FROM song AS s WHERE s.resolution > (SELECT MIN(s2.resolution) FROM song AS s2 WHERE s2.rating < 8)
SELECT s1.song_name FROM song AS s1 JOIN song AS s2 ON (s1.resolution > s2.resolution AND s2.rating < 8) WHERE s1.song_name <> s2.song_name
SELECT s.song_name FROM song AS s WHERE s.genre_is = 'modern' AND s.resolution > (SELECT AVG(artist_name) FROM song)
SELECT s.song_name FROM song AS s WHERE s.genre_is = 'modern' AND s.resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern')
SELECT song.f_id, song.genre_is, song.artist_name FROM song WHERE languages ILIKE '%English%' ORDER BY song.rating DESC NULLS LAST
SELECT s.f_id AS id, s.genre_is AS genre, a.artist_name FROM song JOIN song AS a ON s.artist_name = a.artist_name WHERE languages ILIKE '%English%' ORDER BY rating ASC NULLS FIRST
SELECT song.artist_name FROM song WHERE song.languages ILIKE '%English%' AND song.rating <= '8.000'
SELECT DISTINCT song.artist_name FROM song WHERE song.languages ILIKE '%English%' AND song.rating <= 8
SELECT artist.artist_name FROM artist WHERE artist.country = 'Bangladesh' AND NOT EXISTS(SELECT 1 FROM artist WHERE album_rating.preferred_genre = artist.preferred_genre AND album_rating.gender > 7)
SELECT artist.artist_name FROM artist WHERE artist.country = 'Bangladesh' AND NOT EXISTS(SELECT 1 FROM artist WHERE album.gender = artist.gender GROUP BY album.gender HAVING AVG(album.preferred_genre) > 7)
SELECT DATE_PART('year', inducted) AS YEAR, COUNT(*) AS total_inductees FROM hall_of_fame GROUP BY YEAR
SELECT yearid, COUNT(player_id) AS player_count FROM hall_of_fame GROUP BY yearid ORDER BY yearid
SELECT year, AVG(attendance) AS average_attendance FROM home_game GROUP BY year
SELECT homer_game.year, AVG(homer_game.attendance) AS average_attendance FROM home_game GROUP BY homer_game.year
SELECT COUNT(*) AS number_of_parks FROM park WHERE state = 'NY'
SELECT COUNT(park_id) AS number_of_parks FROM park WHERE state = 'NY'
SELECT p.birth_country, COUNT(p.player_id) AS player_count FROM player AS p GROUP BY p.birth_country ORDER BY player_count ASC LIMIT 3
SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT(player_id) ASC LIMIT 3
 SELECT player.name_first, player.name_last FROM player WHERE (player.birth_year IS NULL OR player.birth_month IS NULL OR player.birth_day IS NULL) AND (player.job_year IS NULL ORplayer.job_month IS NULL ORplayer.job_day IS NULL);
                        ```SELECT player.name_first, player.name_last FROM player WHERE (player.birth_year IS NULL OR player.birth_year = 0) AND (player.birth_month IS NULL OR player.birth_month = 0) AND (player.birth_day IS NULL OR player.birth_day = 0) AND (player.death_year IS NULL OR player.death_year = 0) AND (player.death_month IS NULL OR player.death_month = 0)
SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R'
SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R'
SELECT p.name_first, p.name_last FROM player AS p WHERE p.weight > 220 OR p.height < 75
SELECT p.name_first, p.name_last FROM player AS p WHERE p.weight > 220 OR p.height < 75
failure
failure
SELECT COUNT(*) FROM postseason WHERE year = 1885 AND ties = 1
SELECT COUNT(*) FROM postseason WHERE year = 1885 AND ties = 1
SELECT salary.player_id, salary.salary FROM salary WHERE salary.year = 2001 ORDER BY salary.salary DESC NULLS LAST LIMIT 3
SELECT player_id, SUM(salary) AS total_salary FROM salary WHERE year = 2001 GROUP BY player_id ORDER BY total_salary DESC NULLS LAST LIMIT 3
SELECT year, AVG(salary) AS average_salary FROM salary WHERE year IN (2010, 2001) GROUP BY year
SELECT year, AVG(salary) AS average_salary FROM salary WHERE year IN (2010, 2001) GROUP BY year
SELECT MIN(yearid) AS min_year FROM hall_of_fame
SELECT MIN(yearid) AS min_year FROM hall_of_fame
SELECT COUNT(*) FROM park WHERE city = 'Atlanta'
SELECT COUNT(*) FROM park WHERE city ILIKE '%Atlanta%'
SELECT DISTINCT state FROM park GROUP BY state HAVING COUNT(park_id) > 2
SELECT state FROM park GROUP BY state HAVING COUNT(park_id) > 2
SELECT COUNT(*) FROM team_franchise WHERE active = 'Y'
SELECT COUNT(*) FROM team_franchise WHERE active = 'Y'
SELECT DISTINCT park.city FROM park GROUP BY park.city HAVING COUNT(park.park_id) BETWEEN 2 AND 4
SELECT DISTINCT park.city FROM park GROUP BY park.city HAVING COUNT(park.park_id) BETWEEN 2 AND 4
SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15
SELECT c.brand, c.name, MAX(cl.max_aperture) AS max_aperture FROM camera_lens AS cl GROUP BY c.brand, c.name ORDER BY max_aperture DESC NULLS LAST
SELECT p.id AS photo_id, p.color, c.name AS camera_lens_name, m.name AS mountain_name FROM photos JOIN photos AS c ON p.camera_lens_id = c.id JOIN mountains ON p.mountain_id = m.id
SELECT MAX(height) AS max_height, AVG(height) AS average_height FROM mountain
SELECT AVG(prominence) FROM mountain WHERE country = 'Morocco'
SELECT mountain.name, mountain.height, mountain.prominence FROM mountain WHERE NOT mountain.range ILIKE '%Aberdareen%' ORDER BY mountain.prominence DESC NULLS LAST
SELECT COUNT(DISTINCT camera_lens.brand) AS number_of_brands FROM camera_lens
SELECT COUNT(DISTINCT camera_lens.id) AS number_of_unused_camera_lenses FROM camera_lens
SELECT mountain.name, mountain.prominence FROM mountain WHERE mountain.id <> 'Sigma' ORDER BY mountain.prominence DESC NULLS LAST
SELECT camera_lens.name FROM camera_lens WHERE camera_lenses.name ILIKE '%Digital%'
SELECT p.name FROM channel AS p WHERE p.owner <> 'CCTV'
SELECT p.name FROM channel WHERE p.owner <> 'CCTV'
SELECT p.name FROM channel AS p ORDER BY p.rating_in_percent DESC NULLS LAST
SELECT platform.name FROM channel
SELECT p.owner FROM channel AS p JOIN (SELECT name, MAX(rating_in_percent) AS max_rating FROM channel GROUP BY name) AS q ON p.name = q.name WHERE p.rating_in_percent = q.max_rating
SELECT platform.owner AS FROMplatformORDERBYrating_in_percentDESCLIMIT1
SELECT COUNT(Program_ID) AS number_of_programs FROM program
SELECT COUNT(Program_ID) AS total_programs FROM program
SELECT program.name FROM program ORDER BY program.launch
SELECT p.name FROM program AS p ORDER BY p.launch
SELECT p.name, p.origin, o.owner FROM program JOIN program AS o ON p.owner = o.program_id
SELECT p.name, p.origin, o.owner FROM program JOIN program AS o ON p.owner = o.program_id
SELECT p.name FROM program AS p ORDER BY p.launch DESC NULLS LAST LIMIT 1
SELECT p.name FROM program AS p ORDER BY p.launch DESC NULLS LAST LIMIT 1
SELECT CAST(SUM(CASE WHEN Owner = 'CCTV' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_of_channels_owned_by_cctv FROM channel
SELECT CAST(SUM(CASE WHEN owner = 'CCTV' THEN share_in_percent ELSE 0 END) AS FLOAT) / NULLIF(SUM(share_in_percent), 0) AS total_share FROM channel
SELECT Time_of_day, COUNT(Program_ID) AS program_count FROM broadcast GROUP BY Time_of_day
SELECT TIME_OF_DAY, COUNT(*) AS program_count FROM broadcast GROUP BY TIME_OF_DAY
SELECT COUNT(DISTINCT Program_ID) AS number_of_programs FROM broadcast WHERE Time_of_day = 'Night'
 SELECT COUNT(DISTINCT Program_ID) AS number_of_programs FROM broadcast WHERE Time_of_day ILIKE '%Night%'
                        ```SELECT program.name FROM program WHERE NOT program.launch IN (SELECT CAST(program_id AS INT) FROM schedule WHERE program_id BETWEEN 0 AND 12)
SELECT program.name FROM program WHERE NOT program.launch BETWEEN 5 AND 12
SELECT Origin FROM program ORDER BY Origin ASC NULLS FIRST
SELECT program.origin FROM program ORDER BY program.origin ASC NULLS FIRST
SELECT COUNT(DISTINCT Owner) AS num_owners FROM channel
SELECT COUNT(DISTINCT Owner) AS number_of_owners FROM channel
SELECT program.name FROM program WHERE "Origin" ILIKE '%not%Beijing%' ORDER BY program.name
SELECT p.name FROM program AS p WHERE p.origin <> 'Beijing'
SELECT p.name FROM platform JOIN channel AS c ON p.channel_id = c.channel_id WHERE c.owner IN ('CCTV', 'HBS')
SELECT p.name FROM channel AS p WHERE p.owner IN ('CCTV', 'HBS')
SELECT owner, CAST(SUM(rating_in_percent) AS FLOAT) / NULLIF(SUM(share_in_percent), 0) AS ratio FROM channel GROUP BY owner
SELECT p.owner, SUM(p.rating_in_percent) AS total_rating FROM channel AS p GROUP BY p.owner
SELECT COUNT(course_id) AS total_courses FROM Courses
SELECT COUNT(*) AS total_courses FROM Courses
 SELECT Courses.course_description FROM Courses WHERE Courses.course_name ilike '%Database%'
                        ```SELECT Courses.course_description FROM Courses WHERE Courses.course_name ILIKE '%Database%'
SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name ILIKE '%Cathrine%'
SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name ILIKE '%Cathrine%'
SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors
SELECT Course_Authors_and_Tutors.address_line_1 FROM Course_Authors_and_Tutors
SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors
SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_tutor_atb = 'A'
SELECT Student_Course_Enrolment.date_of_enrolment, Student_Course_Enrolment.date_of_completion FROM Student_Course_Enrolment
SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment
SELECT COUNT(DISTINCT student_id) AS number_of_students FROM Student_Course_Enrolment
SELECT COUNT(DISTINCT student_id) AS total_students FROM Student_Course_Enrolment
SELECT COUNT(DISTINCT course_id) AS number_of_courses FROM Student_Course_Enrolment
SELECT COUNT(DISTINCT course_id) AS num_courses FROM Student_Course_Enrolment
 SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'
                        ``` SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'
                        ```SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail'

COUNT(Student_Tests_Taken.test_result) WHERE Student_Tests_Taken.test_result = 'Fail';
                        
                        ```SELECT Students.login_name FROM Students WHERE Students.family_name ILIKE '%Ward%'
SELECT Students.login_name FROM Students WHERE Students.family_name ILIKE '%Ward%'
SELECT Students.date_of_latest_logon FROM Students WHERE (Students.family_name ILIKE '%Jaskolski%' OR students.family_name ILIKE '%Langosh%') ORDER BY Students.date_of_latest_logon DESC NULLS LAST
SELECT MAX(students.date_of_latest_logon) AS latest_login_date FROM Students WHERE students.family_name ILIKE '%Jaskolski%' OR students.family_name ILIKE '%Langosh%'
SELECT COUNT(*) FROM Students WHERE personal_name ILIKE '%son%'
SELECT COUNT(*) FROM Students WHERE personal_name ILIKE '%son%'
SELECT Subjects.subject_name FROM Subjects
SELECT Subjects.subject_name FROM Subjects
SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors ORDER BY Course_Authors_and_Tutors.personal_name ASC NULLS FIRST
SELECT Course_Authors_and_Tutors.personal_name, Course_Authors_and_Tutors.middle_name, Course_Authors_and_Tutors.family_name FROM Course_Authors_and_Tutors ORDER BY Course_Authors_and_Tutors.personal_name ASC
SELECT Students.personal_name, Students.family_name FROM Students ORDER BY Students.family_name ASC NULLS FIRST
SELECT Students.family_name, Students.personal_name FROM Students ORDER BY Students.family_name ASC NULLS FIRST
SELECT Student_Tests_Taken.test_result, COUNT(Student_Tests_Taken.test_result) AS total_count FROM Student_Tests_Taken GROUP BY Student_Tests_Taken.test_result ORDER BY total_count DESC NULLS LAST
SELECT Student_Tests_Taken.test_result, COUNT(Student_Tests_Taken.registration_id) AS total_students FROM Student_Tests_Taken GROUP BY Student_Tests_Taken.test_result
SELECT Students.personal_name FROM Students WHERE NOT Students.student_id IN (SELECT CourseStuders.student_id FROM Students)
SELECT Students.personal_name FROM Students WHERE NOT Students.student_id IN (SELECT CourseEnrollments.student_id FROM Students)
SELECT COUNT(DISTINCT Students.student_id) AS number_of_students_without_course_enrollments FROM Students
SELECT COUNT(*) AS total_students FROM Students
SELECT Course_Authors_and_Tutors.login_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_tutor_ATB = 'Yes' ORDER BY Course_Authors_and_Tutors.login_name
SELECT Course_Authors_and_Tutors.login_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_id IN (SELECT Student_Course_Authors.author_id FROM Student_Course_Authors) AND Course_Authors_and_Tutors.login_name IN (SELECT Student_Course_Authors.personal_name FROM Student_Course_Authors)
SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.author_id IN (SELECT Student_Course_Authors.author_id FROM Student_Course_Authors) GROUP BY Course_Authors_and_Tutors.personal_name HAVING COUNT(DISTINCT Course_Authors_and_Tutors.author_id) > 1
SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors WHERE Course_Authors_and_Tutors.personal_name IN (SELECT Students.personal_name FROM Students) AND Course_Authors_and_Tutors.personal_name IN (SELECT Course_Authors_and_Tutors.personal_name FROM Course_Authors_and_Tutors)
SELECT Payments.Payment_method_code, Payments.date_payment_made, Payments.amount_payment FROM Payments ORDER BY Payments.date_payment_made ASC NULLS FIRST
SELECT Payments.Payment_method_code, Payments.date_payment_made, Payments.amount_payment FROM Payments ORDER BY Payments.date_payment_made ASC NULLS FIRST
SELECT Claims.Amount_Settled, Claims.Amount_Claimed FROM Claims ORDER BY Claims.Amount_Claimed DESC NULLS LAST LIMIT 1
SELECT Claims.Amount_Settled, Claims.Amount_Claimed FROM Claims ORDER BY Claims.Amount_Claimed DESC NULLS LAST LIMIT 1
SELECT c.amount_claimed, s.amount_settled FROM Claims AS c JOIN settlements ON c.claim_id = s.claim_id ORDER BY s.amount_settled ASC NULLS FIRST LIMIT 1
SELECT c.amount_claimed, s.amount_settled FROM Claims AS c JOIN settlements ON c.claim_id = s.claim_id ORDER BY s.amount_settled ASC LIMIT 1
SELECT c.date_claim_made, c.date_claim_settled, AVG(c.amount_claimed) AS average_amount_claimed, CASE WHEN a.amount_claimed > AVG(c.amount_claimed) THEN 'Yes' ELSE 'No' END AS claim_greater_than_average FROM Claims AS c LEFT JOIN Claims AS a ON c.claim_id = a.claim_id GROUP BY c.date_claim_made, c.date_claim_settled
SELECT c.date_claim_made, c.date_claim_settled FROM Claims AS c WHERE c.amount_claimed > (SELECT AVG(amount_claimed) FROM Claims)
SELECT Claims.Date_Claim_Made FROM Claims WHERE Claims.Amount_Claimed <= AVG(Claims.Amount_Claimed) GROUP BY Claims.Date_Claim_Made
SELECT Claims.Date_Claim_Made FROM Claims WHERE Claims.Amount_Claimed <= (SELECT AVG(Claimed_Amount) FROM Claims)
SELECT MIN(Date_Claim_Made) AS earliest_claim_date FROM Claims
SELECT MIN(Date_Claim_Made) AS earliest_claim_date FROM Claims
SELECT SUM(Amount_Settled) AS total_amount_settled FROM Settlements
SELECT SUM(Amount_Settled) AS total_amount_settled FROM Settlements
SELECT Settlements.date_claim_made AS claim_date, Settlements.date_claim_settled AS settlement_date FROM Settlements
SELECT s.date_claim_made, s.date_claim_settled FROM Settlements AS s
SELECT p.payment_method_code, COUNT(*) AS COUNT FROM Payments AS p GROUP BY p.payment_method_code ORDER BY COUNT DESC NULLS LAST LIMIT 1
SELECT Payments.Paymentment_method_code, COUNT(*) AS frequency FROM Payments GROUP BY Payments.payment_method_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Payments.Paymentment_method_code, COUNT(Payments.payment_id) AS COUNT FROM Payments GROUP BY Payments.payment_method_code ORDER BY COUNT ASC NULLS FIRST LIMIT 1
SELECT Payments.Paymentment_method_code, COUNT(*) AS frequency FROM Payments GROUP BY Payments.payment_method_code ORDER BY frequency ASC LIMIT 1
SELECT SUM(Payments.Amount_payment) AS total_amount_paid FROM Payments
SELECT SUM(Payments.Amount_payment) AS total_amount_paid FROM Payments
SELECT Customers.customer_details FROM Customers
SELECT Customers.customer_details FROM Customers
SELECT policy_type_code, COUNT(*) AS number_of_customers FROM Customer_Policies GROUP BY policy_type_code ORDER BY number_of_customers DESC NULLS LAST LIMIT 1
SELECT policy_type_code, COUNT(*) AS number_of_customers FROM Customer_Policies GROUP BY policy_type_code ORDER BY number_of_customers DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_settlements FROM Settlements
SELECT COUNT(*) AS total_settlements FROM Settlements
SELECT p.payment_id, p.date_payment_made, p.amount_payment FROM Payments AS p WHERE payment_method_code ILIKE '%Visa%' ORDER BY p.payment_id
SELECT Payments.payment_id, Payments.date_payment_made, Payments.amount_payment FROM Payments WHERE Payment_method_code ILIKE '%Visa%'
SELECT Customers.customer_details FROM Customers WHERE NOT Customers.customer_id IN (SELECT policyholders.customer_id FROM policyholders)
SELECT Customers.customer_details FROM Customers WHERE NOT Customers.customer_id IN (SELECT policyholders.customer_id FROM policyholders)
SELECT SUM(Amount_Claimed) AS total_claimed_amount FROM Claims
SELECT SUM(Claims.Amount_Claimed) AS total_amount_claimed FROM Claims
SELECT Department.Name FROM Department WHERE Department.Head = (SELECT MAX(Department.Head) FROM Department)
SELECT Department.Name FROM Department WHERE Department.Head = (SELECT MAX(Department.Head) FROM Department)

SELECT d.head AS head_id FROM Department d JOIN (SELECT departmentid, COUNT(employeeid) AS num_employees FROM Employee GROUP BY departmentid) e ON d.departmentid = e.departmentid ORDER BY e.num_employees ASC LIMIT 1;
                         ```SELECT Department.Head FROM Department ORDER BY COUNT(Employee.EmployeeID) ASC NULLS FIRST LIMIT 1
SELECT MAX(Appointment.appointmentID) AS latest_appointment_id FROM Appointment
SELECT Appointment.AppointmentID FROM Appointment ORDER BY Start DESC NULLS LAST LIMIT 1
SELECT p.name FROM physician LEFT JOIN Physician AS a ON p.employeeid = a.position WHERE a.ssn IS NULL
SELECT p.name FROM physician LEFT JOIN Physician AS a ON p.employeeid = a.position WHERE a.ssn IS NULL
SELECT COUNT(*) AS total_stays FROM Stay WHERE Room = 112
SELECT COUNT(*) AS total_stays FROM Stay WHERE Room = 112
SELECT p.stayid FROM Stay AS p JOIN Stay ON p.patient = s.patient WHERE s.room = 111 ORDER BY s.stayend DESC NULLS LAST LIMIT 1
SELECT s.patient FROM Stay AS s WHERE s.room = 111 ORDER BY s.stayend DESC NULLS LAST LIMIT 1
SELECT DISTINCT Room.BlockCode FROM Room WHERE Room.Unavailable = FALSE
SELECT DISTINCT Room.BlockCode FROM Room WHERE Room.Unavailable = FALSE
SELECT COUNT(DISTINCT RoomType) AS number_of_room_types FROM Room
SELECT COUNT(DISTINCT Room.RoomType) AS total_room_types FROM Room WHERE Room.Unavailable = FALSE
SELECT Physician.name FROM Physician WHERE physician.position ILIKE '%senior%'
SELECT Physician.name FROM Physician WHERE "Position" ILIKE '%senior%'
SELECT p.stay, MAX(u.dateundergoes) AS last_treatment_date FROM Undergoes AS p JOIN undergoes ON p.procedures = u.patient WHERE DATE_TRUNC('MONTH', CURRENT_DATE) - DATE_TRUNC('MONTH', u.dateundergoes) <= 12 GROUP BY p.stay
 SELECT p.name AS patient_name, ph.name AS physician_name, pr.procedure_code, to_char(u.date_undergoes, 'YYYY-MM-DD') AS date_of_service FROM undergoes u JOIN patients p ON p.patient_id = u.patient JOIN physicians ph ON ph.physician_id = u.physician JOIN procedures pr ON pr.procedure_id = u.procedures;
                        ```SELECT Nurse.Name FROM Nurse ORDER BY Nurse.Name ASC NULLS FIRST
SELECT Nurse.name FROM Nurse ORDER BY Nurse.name ASC NULLS FIRST
SELECT medication.name FROM Medication ORDER BY medication.name ASC NULLS FIRST
SELECT medication.brand FROM Medication ORDER BY medication.brand ASC NULLS FIRST
SELECT physician, department FROM Affiliated_With WHERE primaryaffiliation = TRUE
SELECT a.physician AS employee_id, d.department FROM Affiliated_With AS a JOIN (SELECT physician, COUNT(*) AS num_primary_affiliations FROM Affiliated_With GROUP BY physician) AS b ON a.physician = b.physician WHERE b.num_primary_affiliations > 0.5
SELECT n.oncallstart FROM On_Call AS n JOIN on_call ON n.oncallend = oc.nurse WHERE oc.blockfloor = 1 AND oc.blockcode = 1
SELECT nurse FROM On_Call WHERE BlockFloor = 1 AND BlockCode = 1
SELECT MAX(Cost) AS highest_cost, MIN(Cost) AS lowest_cost, AVG(Cost) AS average_cost FROM Procedures
SELECT MAX(Cost) AS highest_cost, MIN(Cost) AS lowest_cost, AVG(Cost) AS average_cost FROM Procedures
SELECT Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST
SELECT Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST
SELECT Procedures.Cost, Procedures.Name FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST LIMIT 3
SELECT Procedures.Name, Procedures.Cost FROM Procedures ORDER BY Procedures.Cost DESC NULLS LAST LIMIT 3
SELECT Procedures.Cost, Procedures.Name FROM Procedures WHERE (Procedures.Cost > 1000 OR Procedures.Code = 'John Wen')
 SELECT Procedures.Cost, Procedures.Name FROM Procedures WHERE (Procedures.Cost > 1000 OR Procedures.Code = 'John Wen')
                        ``` SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND Procedures.Code NOT IN (SELECT Physicians_Trained_In.Code FROM Physicians_Trained_In JOIN Physicians ON Physicians_Trained_In.Physician_id = Physicians.physician_id WHERE Physicians.name ILIKE '%John%Wen%')
                        ``` SELECT Procedures.Cost, Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND Procedures.Code != 'John Wen'
                        ```SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost < '5000' AND Procedures.Code = 'John Wen'
SELECT Procedures.Cost, Procedures.Name FROM Procedures JOIN Procedures ON Procedures.Code = Physicians.Code WHERE Cost < '5000' AND Name ILIKE '%John%Wen%'
SELECT p.name FROM patient WHERE NOT EXISTS(SELECT 1 FROM Patient AS i WHERE i.address ILIKE '%Procrastin-X%' AND i.insuranceid = p.insuranceid)
SELECT p.name FROM Patient AS p WHERE p.pcp <> 757071
SELECT COUNT(*) FROM Patient WHERE PCP <> 7070707070
SELECT COUNT(*) AS total_patients FROM Patient WHERE insuranceid <> 'Procrastin-X'
SELECT COUNT(AppointmentID) AS number_of_appointments FROM Appointment
SELECT COUNT(*) AS total_appointments FROM Appointment

COUNT(ship.ship_id) AS total_ships FROM ship;
                        
                        ```
COUNT(ship.ship_id) AS total_ships FROM ship;
                        
                        ```SELECT ship.name FROM ship ORDER BY ship.tonnage ASC NULLS FIRST
SELECT ship.name FROM ship ORDER BY ship.tonnage ASC NULLS FIRST
SELECT ship.type, ship.nationality FROM ship
SELECT s.type, s.nationality FROM ship AS s
SELECT ship.name FROM ship WHERE ship.nationality <> 'United States'
SELECT ship.name FROM ship WHERE ship.nationality <> 'United States'
SELECT ship.name FROM ship WHERE ship.nationality IN ('United States', 'United Kingdom')
SELECT ship.name FROM ship WHERE ship.nationality IN ('US', 'UK')
SELECT s.name FROM ship AS s WHERE s.tonnage = (SELECT MAX(s2.tonnage) FROM ship AS s2)
SELECT MAX(ship.tonnage) AS max_tonnage, ship.name FROM ship GROUP BY ship.name ORDER BY max_tonnage DESC NULLS LAST LIMIT 1
SELECT ship.type, COUNT(*) AS total_ships FROM ship GROUP BY ship.type
SELECT ship.type, COUNT(*) AS number_of_ships FROM ship GROUP BY ship.type
SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(ship.type) DESC NULLS LAST LIMIT 1
SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(ship.type) DESC NULLS LAST LIMIT 1
SELECT DISTINCT ship.nationality FROM ship GROUP BY ship.nationality HAVING COUNT(ship.ship_id) > 2
SELECT DISTINCT ship.nationality FROM ship GROUP BY ship.nationality HAVING COUNT(ship.name) > 2
SELECT ship.type, AVG(ship.tonnage) AS average_tonnage FROM ship GROUP BY ship.type
SELECT ship.type, AVG(ship.tonnage) AS average_tonnage FROM ship GROUP BY ship.type
SELECT ship.name FROM ship WHERE NOT ship.ship_id IN (SELECT mission.ship_id FROM ship)
SELECT s.name FROM ship LEFT JOIN ship AS ms ON s.ship_id = ms.ship_id WHERE ms.ship_id IS NULL
SELECT DISTINCT s.type FROM ship AS s WHERE s.tonnage > 6000 AND EXISTS(SELECT 1 FROM ship AS s2 WHERE s2.ship_id <> s.ship_id AND s2.tonnage < 4000)
SELECT DISTINCT s.type FROM ship AS s WHERE s.tonnage > 6000 OR s.tonnage < 4000
SELECT COUNT(*) AS total_students FROM list
SELECT COUNT(*) AS total_students FROM list
SELECT list.lastname FROM list WHERE list.classroom = '111'
SELECT list.lastname FROM list WHERE list.classroom = 111
SELECT list.firstname FROM list WHERE list.classroom = '108'
SELECT list.firstname FROM list WHERE list.classroom = '108'
SELECT list.firstname FROM list WHERE list.classroom = '107'
SELECT list.firstname FROM list WHERE list.classroom = '107'
SELECT list.classroom, list.grade FROM list
SELECT list.classroom, list.grade FROM list
SELECT list.grade FROM list WHERE list.classroom = 103
SELECT list.grade FROM list WHERE list.classroom = '103'
SELECT list.grade FROM list WHERE "Classroom" = '105'
SELECT list.grade FROM list WHERE list.classroom = 105
SELECT list.classroom FROM list WHERE list.grade = 4
SELECT classroom FROM list WHERE grade = 4
SELECT list.classroom FROM list WHERE list.grade = '5'
SELECT list.classroom FROM list WHERE list.grade = 5
SELECT teachers.firstname FROM teachers WHERE teachers.classroom = 110
SELECT teachers.firstname FROM teachers WHERE teachers.classroom = 110
SELECT teachers.lastname FROM teachers WHERE teachers.classroom = 109
SELECT teachers.lastname FROM teachers WHERE teachers.classroom = 109
SELECT teachers.firstname, teachers.lastname FROM teachers
SELECT teachers.firstname, teachers.lastname FROM teachers
SELECT list.firstname, list.lastname FROM list
SELECT list.firstname, list.lastname FROM list
SELECT list.grade, COUNT(DISTINCT list.classroom) AS classroom_count, SUM(list.firstname) AS student_total FROM list GROUP BY list.grade
SELECT list.grade, COUNT(DISTINCT list.classroom) AS classroom_count, COUNT(list.firstname) AS student_count FROM list GROUP BY list.grade
SELECT list.classroom, COUNT(list.grade) AS grade_count FROM list GROUP BY list.classroom
SELECT list.classroom, COUNT(DISTINCT list.grade) AS grade_count FROM list GROUP BY list.classroom
SELECT list.classroom FROM list GROUP BY list.classroom ORDER BY COUNT(list.classroom) DESC NULLS LAST LIMIT 1
SELECT list.classroom FROM list GROUP BY list.classroom ORDER BY COUNT(list.classroom) DESC NULLS LAST LIMIT 1
SELECT list.classroom, COUNT(*) AS student_count FROM list GROUP BY list.classroom
SELECT list.classroom, COUNT(list.grade) AS student_count FROM list GROUP BY list.classroom
SELECT list.classroom, COUNT(list.firstname) AS total_students FROM list WHERE list.grade = 0 GROUP BY list.classroom
SELECT list.classroom, COUNT(list.firstname) AS student_count FROM list WHERE list.grade = 0 GROUP BY list.classroom
SELECT list.classroom, COUNT(*) AS total_students FROM list WHERE grade = 4 GROUP BY list.classroom
SELECT list.classroom, COUNT(list.firstname) AS total_students FROM list WHERE grade = 4 GROUP BY list.classroom
SELECT COUNT(*) AS total_students FROM list WHERE Classroom = 1
SELECT COUNT(Student) AS total_students FROM list
SELECT COUNT(*) FROM company WHERE headquarters ILIKE '%US%'
SELECT company.name FROM company ORDER BY company.sales_in_billion ASC NULLS FIRST
SELECT company.headquarters, company.industry FROM company
SELECT company.name FROM company WHERE company.industry ILIKE '%banking%' OR company.industry ILIKE '%retailing%'
SELECT MAX(Market_Value_in_Billion) AS max_market_value, MIN(Market_Value_in_Billion) AS min_market_value FROM company
SELECT company.headquarters FROM company ORDER BY company.sales_in_billion DESC NULLS LAST LIMIT 1
SELECT headquarters, COUNT(company_id) AS company_count FROM company GROUP BY headquarters ORDER BY company_count DESC NULLS LAST
SELECT company.headquarters FROM company GROUP BY company.headquarters ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1
SELECT DISTINCT company.headquarters FROM company GROUP BY company.headquarters HAVING COUNT(company.company_id) >= 2
SELECT DISTINCT company.headquarters FROM company WHERE company.industry ILIKE '%banking%' AND company.industry ILIKE '%oil and gas%'
SELECT p.name FROM people LEFT JOIN people AS e ON p.people_id = e.people_id WHERE e.people_id IS NULL
SELECT c.name FROM company AS c WHERE CAST(sales_in_billion AS FLOAT) > 200 ORDER BY CAST(profits_in_billion AS FLOAT) DESC NULLS LAST, name ASC NULLS FIRST

COUNT(film.film_id) AS total_films FROM film;
                        
                        ```SELECT COUNT(film_id) AS total_films FROM film
SELECT DISTINCT film.director FROM film
SELECT DISTINCT director FROM film
SELECT AVG(gross_in_dollar) AS average_gross_in_dollars FROM film
SELECT AVG(gross_in_dollar) AS average_gross_in_dollars FROM film
SELECT market_id, MIN(low_estimate) AS min_low_estimate, MAX(high_estimate) AS max_high_estimate FROM film_market_estimation GROUP BY market_id
SELECT market_id, MIN(low_estimate) AS min_low_estimate, MAX(high_estimate) AS max_high_estimate FROM film_market_estimation GROUP BY market_id
SELECT film_market_estimation.type FROM film_market_estimation WHERE film_market_estimation.year = '1995'
SELECT film_market_estimation.type FROM film_market_estimation WHERE film_market_estimation.year = '1995'
SELECT MAX(market_id) AS market_with_max_cities, MIN(market_id) AS market_with_min_cities FROM market
SELECT MAX(market_id) AS max_cities, MIN(market_id) AS min_cities FROM market
SELECT COUNT(*) FROM market WHERE number_cities < 300
SELECT COUNT(*) FROM market WHERE number_cities < 300
SELECT market.country FROM market ORDER BY market.country ASC NULLS FIRST
SELECT market.country, COUNT(market.market_id) AS number_of_markets FROM market JOIN market_to_countries ON market.market_id = market_to_countries.market_id GROUP BY market.country ORDER BY number_of_markets DESC NULLS LAST
SELECT market.country, COUNT(market.number_cities) AS number_of_cities FROM market GROUP BY market.country ORDER BY number_of_cities DESC NULLS LAST
 SELECT m.country, COUNT(DISTINCT c.city_name) AS num_cities FROM market AS m JOIN city AS c ON m.market_id = c.market_id GROUP BY m.country ORDER BY num_cities DESC;
                        ```SELECT film.studio, COUNT(film.title) AS total_films, SUM(film.gross_in_dollar) / 1000000 AS total_budget FROM film GROUP BY film.studio
SELECT film.studio, COUNT(film.title) AS number_of_films FROM film GROUP BY film.studio
SELECT studio, COUNT(film_id) AS number_of_films FROM film GROUP BY studio ORDER BY number_of_films DESC NULLS LAST LIMIT 1
SELECT film.studio, COUNT(film.title) AS number_of_films FROM film GROUP BY film.studio ORDER BY number_of_films DESC NULLS LAST LIMIT 1
SELECT studio FROM film GROUP BY studio HAVING COUNT(film_id) >= 2
SELECT DISTINCT film.studio FROM film GROUP BY film.studio HAVING COUNT(film.studio) >= 2
SELECT film.title FROM film WHERE film.gross_in_dollar IS NULL
SELECT film.title FROM film WHERE film.gross_in_dollar IS NULL
SELECT DISTINCT studio FROM film WHERE director ILIKE '%Nicholas%Meyer%' AND director ILIKE '%Walter%Hill%'
SELECT DISTINCT studio FROM film WHERE director ILIKE '%Nicholas%Meyer%' AND director ILIKE '%Walter%Hill%'
SELECT COUNT(*) AS total_films, SUM(gross_in_dollar) AS total_budget FROM film WHERE studio ILIKE '%universal%'
SELECT COUNT(*) AS total_films FROM film WHERE studio ILIKE '%universal%'
SELECT studio FROM film WHERE director <> 'Walter Hill' GROUP BY studio HAVING COUNT(film_id) = 0
SELECT DISTINCT studio FROM film WHERE NOT director ILIKE '%Walter%Hill%' ORDER BY studio
SELECT film.title FROM film WHERE film.gross_in_dollar > 4500000
SELECT studio FROM film WHERE gross_in_dollar > 4500000 GROUP BY studio HAVING AVG(gross_in_dollar) > 4500000
SELECT film.title, film.director FROM film WHERE NOT film.studio ILIKE '%china%' ORDER BY film.title
SELECT film.title, film.director FROM film WHERE NOT film.gross_in_dollar IS NULL AND NOT film.studio IS NULL AND film.studio <> 'China' ORDER BY film.title
SELECT COUNT(*) AS total_items FROM Ref_Calendar
SELECT COUNT(*) AS total_items FROM Ref_Calendar
SELECT Ref_Calendar.Day_Number, Ref_Calendar.Calender_Date FROM Ref_Calendar
SELECT Ref_Calendar.Day_Number, CAST(Ref_Calendar.Calender_Date AS DATE) FROM Ref_Calendar
SELECT COUNT(Ref_Document_Types.Document_Type_Code) AS total_document_types FROM Ref_Document_Types

COUNT(DISTINCT Ref_Document_Types.Document_Type_Code) AS number_of_document_types FROM Ref_Document_Types;
                        
                        ```SELECT Ref_Document_Types.document_type_code, Ref_Document_Types.document_type_name FROM Ref_Document_Types
SELECT Ref_Document_Types.document_type_code, Ref_Document_Types.document_type_name FROM Ref_Document_Types
SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Code = 'RV'
SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Code = 'RV'
SELECT Ref_Document_Types.Document_Type_Code FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ILIKE '%Paper%'
 SELECT Ref_Document_Types.Document_Type_Code FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ilike '%Paper%'
                        ``` SELECT COUNT(*) FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')
                        ``` SELECT COUNT(*) FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')
                        ```
                        SELECT All_Documents.Date_Stored FROMAll_DocumentsWHEREAll_Documents.Document_Name ILIKE '%Mary%CV%' ;
                        
                        ```
                        SELECT All_Documents.Date_Stored FROMAll_DocumentsWHEREAll_Documents.Document_Name ILIKE '%Marry%CV%'ORDERBYall_documents.date_storedNULLS LAST;
                        
                        ```SELECT COUNT(*) FROM Ref_Locations

COUNT(Ref_locations.location_code) AS number_of_locations FROM Ref_locations;
                        
                        ```SELECT Ref_locations.location_code, Ref_locations.location_name FROM Ref_Locations
SELECT Ref_locations.location_code, Ref_locations.location_name FROM Ref_Locations
SELECT Ref_locations.location_name, Ref_locations.location_description FROM Ref_Locations WHERE Ref_locations.location_code = 'x'
SELECT Ref_locations.location_name, Ref_locations.location_description FROM Ref_Locations WHERE Ref_locations.location_code = 'x'
SELECT Ref_locations.location_code FROM Ref_Locations WHERE Ref_locations.location_name ILIKE '%Canada%'
SELECT Ref_locations.location_code FROM Ref_Locations WHERE Ref_locations.location_name ILIKE '%Canada%'
SELECT COUNT(*) AS total_roles FROM Roles
SELECT COUNT(Role.role_name) AS total_roles FROM Roles
SELECT r.role_code, r.role_name, r.role_description FROM Roles AS r
SELECT r.role_code, r.role_name, r.role_description FROM Roles AS r
SELECT r.role_name, r.role_description FROM Roles AS r WHERE r.role_code = 'MG'
SELECT r.role_name, r.role_description FROM Roles AS r WHERE r.role_code = 'MG'
SELECT roles.role_description FROM Roles WHERE role.role_name ILIKE '%proof%reader%'
SELECT roles.role_description FROM Roles WHERE role.role_name ILIKE '%proof%reader%'

COUNT(Employees.Employee_ID) AS total_employees FROM Employees;
                        
                        ```SELECT COUNT(Employee_ID) AS total_employees FROM Employees
SELECT Employees.Employee_Name, Employees.Role_Code, Employees.date_of_birth FROM Employees WHERE "Employee Name" ILIKE '%Armoni%'
SELECT Employees.Employee_Name, Employees.Role_Code, Employees.Date_of_Birth FROM Employees WHERE "Employee Name" ILIKE '%Armoni%'
SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_Name ILIKE '%ebba%'
SELECT Employees.Employee_ID FROM Employees WHERE Employees.Employee_Name ILIKE '%Ebba%'
SELECT Employees.Employee_Name FROM Employees WHERE Employees.Role_Code ILIKE '%HR%'
SELECT Employees.Employee_Name FROM Employees WHERE Employees.Role_Code ILIKE '%HR%'
SELECT Role_Code, COUNT(Employee_ID) AS Employee_Count FROM Employees GROUP BY Role_Code
SELECT Role_Code, COUNT(Employee_ID) AS Employee_Count FROM Employees GROUP BY Role_Code
SELECT Role_Code, COUNT(Employee_ID) AS employee_count FROM Employees GROUP BY Role_Code ORDER BY employee_count DESC NULLS LAST LIMIT 1
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) DESC NULLS LAST LIMIT 1
SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3
SELECT DISTINCT Employees.role_code FROM Employees GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) >= 3
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) ASC LIMIT 1

                        ```SELECT Document_Locations.location_code FROM Document_Locations GROUP BY Document_locations.location_code
SELECT DISTINCT Document_Locations.location_code FROM Document_Locations
SELECT d.location_code, TO_CHAR(d.date_in_location_from, 'YYYY-MM-DD') AS start_date, TO_CHAR(d.date_in_locaton_to, 'YYYY-MM-DD') AS end_date FROM Document_Locations AS d
SELECT d.document_id, l.location_code, d.date_in_location_from, d.date_in_locaton_to FROM Document_Locations AS d JOIN locations ON d.location_code = l.location_code
SELECT Document_locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_Locations GROUP BY Document_locations.location_code
SELECT dl.location_code, COUNT(dl.document_id) AS document_count FROM Document_Locations AS dl GROUP BY dl.location_code
SELECT Document_Locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_Locations GROUP BY Document_locations.location_code ORDER BY document_count DESC NULLS LAST LIMIT 1
SELECT Document_Locations.location_code, COUNT(Document_locations.document_id) AS document_count FROM Document_Locations GROUP BY Document_locations.location_code ORDER BY document_count DESC NULLS LAST LIMIT 1
SELECT Document_Locations.location_code FROM Document_Locations GROUP BY Document_locations.location_code HAVING COUNT(Document_locations.document_id) >= 3
SELECT DISTINCT Document_Locations.location_code FROM Document_Locations GROUP BY Document_locations.location_code HAVING COUNT(Document_locations.document_id) >= 3
SELECT e.destroyed_by_employee_id, COUNT(dd.destruction_authorised_by_employee_id) AS num_documents_destroyed FROM employees JOIN Documents_to_be_Destroyed AS dd ON e.destroyed_by_employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.destroyed_by_employee_id
SELECT e.destroyed_by_employee_id, COUNT(dd.destruction_authorised_by_employee_id) AS total_documents_destroyed FROM employees JOIN Documents_to_be_Destroyed AS dd ON e.destroyed_by_employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.destroyed_by_employee_id
SELECT e.destroyed_by_employee_id, COUNT(dd.document_id) AS document_count FROM employees JOIN Documents_to_be_Destroyed AS dd ON e.destroyed_by_employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.destroyed_by_employee_id
SELECT e.destroyed_by_employee_id, COUNT(dd.document_id) AS total_documents_destroyed FROM employees JOIN Documents_to_be_Destroyed AS dd ON e.destroyed_by_employee_id = dd.destruction_authorised_by_employee_id GROUP BY e.destroyed_by_employee_id
SELECT Employees.Employee_ID FROM Employees WHERE NOT "Role_Code" ILIKE '%Destruction%'
SELECT Employees.Employee_ID FROM Employees WHERE NOT Employees.Employee_ID IN (SELECT Destroy_Authorizer_Employee_IDs.Employee_ID FROM Employees)
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed
SELECT Employees.Employee_ID FROM Employees WHERE NOT Employees.Employee_ID IN (SELECT Destroyed_Documents.Employee_ID FROM Employees)
SELECT Employees.Employee_ID FROM Employees WHERE NOT Employees.Employee_ID IN (SELECT Destroyed_By_Employee.Employee_ID FROM Documents JOIN Employees ON Documents.Document_Id = Destroyed_by_Employee.Document_id)
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID, Documents_to_be_Destroyed.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed
SELECT Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID, Documents_to_be_Destroyed.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed

COUNT(Club.ClubID) AS total_club_count
                        ```SELECT COUNT(*) AS total_clubbs FROM Club
SELECT c.clubname FROM Club AS c
SELECT c.clubname FROM Club AS c
SELECT COUNT(*) AS total_students FROM Student
SELECT COUNT(*) AS total_students FROM Student
SELECT Student.Fname FROM Student
SELECT Student.Fname FROM Student
SELECT Club.ClubDescription FROM Club WHERE Club.ClubName ILIKE '%Tennis%Club%'
SELECT Club.ClubDescription FROM Club WHERE Club.ClubName ILIKE '%Tennis%Club%' ORDER BY Club.ClubDescription
SELECT Club.ClubDescription FROM Club WHERE Club.ClubName ILIKE '%pen%and%paper%gaming%'
SELECT Club.ClubDescription FROM Club WHERE Club.ClubName ILIKE '%pen%and%paper%gaming%'
SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Tennis%Club%'
SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Tennis%Club%'
SELECT Club.ClubLocation FROM Club WHERE "ClubName" ILIKE '%pen%and%paper%gaming%'
SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%pen%and%paper%gaming%'
SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Hopkins%Student%Enterprises%'
SELECT Club.ClubLocation FROM Club WHERE Club.ClubName ILIKE '%Hopkins%Student%Enterprises%'
SELECT Club.ClubName FROM Club WHERE Club.ClubLocation ILIKE '%AKW%'
SELECT Club.ClubName FROM Club WHERE Club.ClubLocation ILIKE '%AKW%' ORDER BY Club.ClubName
SELECT COUNT(*) AS club_count FROM Club WHERE ClubLocation ILIKE '%HHH%'
SELECT COUNT(*) FROM Club WHERE ClubLocation ILIKE '%HHH%'

                        ```SELECT MIN(project_staff.date_from) AS earliest_start_date, MAX(project_staff.date_to) AS latest_end_date FROM Project_Staff WHERE project_staff.other_details ILIKE '%leadership%' GROUP BY project_staff.project_id HAVING COUNT(project_staff.staff_id) > (SELECT COUNT(staff_id) FROM Project_Staff WHERE other_details ILIKE '%leadership%') ORDER BY COUNT(project_staff.staff_id) DESC NULLS LAST LIMIT 1
SELECT Projects.project_details FROM Projects WHERE NOT Projects.project_id IN (SELECT Researchers.project_id FROM Researchers)
SELECT p.project_details FROM Projects AS p LEFT JOIN Staff ON p.project_id = s.project_id AND s.organisation_id = 4 WHERE s.project_id IS NULL
SELECT ps.staff_id, ps.date_from AS start_date, ps.date_to AS end_date, (ps.date_to - ps.date_from) AS duration FROM Project_Staff AS ps WHERE ps.other_details ILIKE '%researcher%' ORDER BY ps.staff_id
SELECT p.project_id, TO_CHAR(p.date_from, 'YYYY-MM-DD') AS project_start_date, TO_CHAR(p.date_to, 'YYYY-MM-DD') AS project_end_date FROM Project_Staff AS p
SELECT COUNT(DISTINCT Project_Staff.role_code) AS number_of_roles FROM Project_Staff
SELECT COUNT(DISTINCT Project_Staff.role_code) AS number_of_roles FROM Project_Staff
SELECT g.organisation_id, SUM(g.grant_amount) AS total_grant_amount FROM Grants AS g GROUP BY g.organisation_id
SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id
SELECT staff_roles.role_description FROM Staff_Roles
SELECT sr.role_description FROM Staff_Roles AS sr WHERE sr.role_code = 'RESEARCHER'

                        ```SELECT MIN(Project_Staff.date_from) AS earliest_start_date FROM Project_Staff
SELECT Projects.project_details FROM Projects WHERE NOT Projects.project_id IN (SELECT Outcomes.project_id FROM Projects)
SELECT p.project_details FROM Projects WHERE NOT p.project_id IN (SELECT o.project_id FROM Projects AS o)
SELECT Document_Types.document_type_code FROM Document_Types WHERE Document_Types.document_description ILIKE 'Initial%'

                        ```SELECT MAX(grant_id) AS max_grant_id, COUNT(document_id) AS total_documents FROM Documents
WITH document_counts AS (SELECT grant_id, COUNT(document_id) AS total_documents FROM Documents GROUP BY grant_id), max_document_count AS (SELECT MAX(total_documents) AS max_count FROM document_counts) SELECT dc.grant_id, dc.total_documents, dg.grant_id AS most_common_grant_id, dg.total_documents AS most_common_total_documents FROM document_counts JOIN max_document_count ON dc.total_documents >= mdc.max_count
SELECT CAST(COUNT(CASE WHEN outcome_code = 'Patent' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion FROM Project_Outcomes
SELECT COUNT(*) AS total_outcomes FROM Project_Outcomes
SELECT COUNT(DISTINCT Project_Staff.staff_id) AS number_of_staff FROM Project_Staff WHERE date_from < '1989-04-24 23:51:54'
SELECT COUNT(DISTINCT staff_id) AS total_staff FROM Project_Staff WHERE date_from < '1989-04-24 23:51:54'
SELECT MAX(date_to) AS latest_date FROM Project_Staff
SELECT MAX(date_to) AS last_date FROM Project_Staff
SELECT p.project_details FROM Projects JOIN Projects AS o ON p.organisation_id = o.organisation_id
 SELECT p.project_details FROM Projects p JOIN Organisations o ON p.organisation_id = o.organisation_id WHERE o.name ILIKE '%The%Firm%' ORDER BY COUNT(p.project_id) DESC NULLS LAST LIMIT 1;
                        ```SELECT Research_Staff.staff_id, Research_Staff.staff_details FROM Research_Staff ORDER BY Research_Staff.staff_id ASC NULLS FIRST
SELECT Research_Staff.staff_details FROM Research_Staff ORDER BY Research_Staff.staff_details ASC NULLS FIRST
SELECT COUNT(*) AS total_tasks FROM Tasks
SELECT COUNT(*) AS total_tasks FROM Tasks
SELECT p.staff_id, ps.role_code FROM Project_Staff AS p JOIN Staff ON p.staff_id = s.staff_id JOIN Project_Staff_Role ON ps.project_id = p.project_id
SELECT Project_Staff.staff_id, Project_Staff.role_code FROM Project_Staff WHERE date_from <= '2003-04-19 15:06:20' AND date_to >= '2016-03-15 00:33:18' ORDER BY Project_Staff.staff_id
SELECT ps.staff_id, ps.project_id, COUNT(*) AS frequency FROM Project_Staff AS ps GROUP BY ps.staff_id, ps.project_id ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT ps.staff_id, ps.project_id, COUNT(*) AS frequency FROM Project_Staff AS ps GROUP BY ps.staff_id, ps.project_id ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT CAST(COUNT(CASE WHEN gender = 'female' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_female FROM Person
SELECT CAST(COUNT(CASE WHEN gender = 'female' THEN 1 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS proportion_female FROM Person
SELECT AVG(age) AS average_age FROM Person
SELECT AVG(age) AS average_age FROM Person
SELECT COUNT(DISTINCT person.city) AS number_of_cities FROM Person
SELECT COUNT(DISTINCT city) AS number_of_cities FROM Person
SELECT COUNT(DISTINCT Person.job) AS number_of_jobs FROM Person
SELECT COUNT(DISTINCT Person.job) AS number_of_jobs FROM Person
SELECT MAX(age) AS max_age, MIN(name) AS youngest_person FROM Person
SELECT Person.name FROM Person ORDER BY Person.age DESC NULLS LAST LIMIT 1
SELECT MAX(p.age) AS oldest_person_with_student_job FROM Person AS p WHERE p.job = 'student'
SELECT Person.name FROM Person ORDER BY Person.age ASC NULLS FIRST LIMIT 1
SELECT MIN(Person.age) AS min_age FROM Person WHERE Person.gender = 'male'
SELECT p.name FROM Person AS p WHERE p.gender = 'male' ORDER BY p.age ASC NULLS FIRST LIMIT 1
SELECT CAST(Person.age AS FLOAT) AS age FROM Person WHERE person.name ILIKE '%Zach%'
SELECT CAST(Person.age AS FLOAT) AS age FROM Person WHERE "name" ILIKE '%Zach%'
SELECT Person.name FROM Person WHERE Person.age < '30'
SELECT Person.name FROM Person WHERE Person.age < '30' AND Person.gender = 'female'
SELECT COUNT(*) FROM Person WHERE age > 30 AND job ILIKE '%engineer%'
SELECT COUNT(*) AS total_engineers FROM Person WHERE age > 30 AND gender = 'male'
SELECT Person.gender, AVG(Person.age) AS average_age FROM Person GROUP BY Person.gender
SELECT Person.gender, AVG(Person.age) AS average_age FROM Person GROUP BY Person.gender
SELECT Person.job, AVG(Person.age) AS average_age FROM Person GROUP BY Person.job
SELECT p.job, AVG(p.age) AS average_age FROM Person AS p GROUP BY p.job
SELECT Person.job, AVG(Person.age) AS average_age FROM Person WHERE Person.gender = 'male' GROUP BY Person.job
SELECT p.gender, p.job, AVG(p.age) AS average_age FROM Person AS p GROUP BY p.gender, p.job
SELECT p.job, MIN(p.age) AS min_age FROM Person AS p GROUP BY p.job
SELECT p.name, p.age, r.gender FROM Person AS p JOIN Role ON p.gender = r.job ORDER BY p.age ASC
SELECT Person.gender, COUNT(*) AS total_people FROM Person WHERE age < 40 GROUP BY Person.gender
SELECT Person.gender, COUNT(*) AS total_people FROM Person WHERE age < 40 GROUP BY Person.gender
SELECT p.name FROM Person WHERE p.age > (SELECT AVG(e.age) FROM Person AS e)
SELECT p.name FROM Person JOIN Person AS e ON p.age = e.age
SELECT COUNT(*) AS total_people FROM person WHERE age > (SELECT AVG(age) FROM Person)
SELECT p.name AS person_name, COUNT(e.name) OVER (PARTITION BY e.age) AS number_of_older_engineers FROM Person JOIN Person AS e ON p.age > e.age
SELECT p.name, p.job FROM Person AS p ORDER BY p.name NULLS FIRST
SELECT p.name, p.gender, p.city, p.age FROM Person AS p ORDER BY p.name ASC NULLS FIRST
SELECT p.name FROM Person AS p ORDER BY p.age DESC NULLS LAST
SELECT p.name FROM Person AS p ORDER BY p.age DESC NULLS LAST
SELECT p.name, p.age FROM Person AS p WHERE gender = 'M'
SELECT p.name, CAST(p.age AS FLOAT) AS age FROM Person AS p WHERE gender = 'M'
SELECT p.name FROM Person AS p LEFT JOIN Student ON p.gender = s.age WHERE s.age IS NULL
SELECT p.name FROM Person LEFT JOIN Person AS f ON p.gender = f.job OR p.gender = f.age WHERE f.gender IS NULL
SELECT PersonFriend.name FROM PersonFriend GROUP BY PersonFriend.name HAVING COUNT(PersonFriend.friend) = 1
SELECT pf.name FROM PersonFriend AS pf WHERE NOT pf.friend IS NULL GROUP BY pf.name HAVING COUNT(pf.friend) = 1
SELECT pf.friend FROM PersonFriend AS pf WHERE pf.name = 'Zach' ORDER BY pf.year DESC NULLS LAST LIMIT 1
SELECT pf.friend FROM PersonFriend AS pf WHERE pf.name = 'Zach' ORDER BY (CURRENT_DATE - TO_DATE(CAST(pf.year AS VARCHAR), 'YYYY')) DESC NULLS LAST LIMIT 1
SELECT pf.name FROM PersonFriend AS pf WHERE pf.friend = 'Alice' ORDER BY pf.year ASC LIMIT 1
SELECT pf.name FROM PersonFriend AS pf WHERE pf.friend = 'Alice' ORDER BY pf.year ASC NULLS FIRST
SELECT p1.name FROM Person AS p1 LEFT JOIN Person AS p2 ON (p1.name = p2.name) WHERE p2.name IS NULL
SELECT p.name FROM Person LEFT JOIN Person AS f ON p.gender = f.age WHERE f.age IS NULL
SELECT COUNT(*) AS total_people_without_austin_friend FROM PersonFriend WHERE NOT 'Austin' IN (SELECT friend FROM PersonFriend WHERE year = 2019)
SELECT COUNT(*) AS total_people_without_friends_in_austin FROM PersonFriend WHERE year IS NULL AND friend IS NULL
SELECT COUNT(member.member_id) AS total_members FROM member
SELECT member.name FROM member ORDER BY member.name ASC NULLS FIRST
SELECT member.name, member.country FROM member
SELECT member.name FROM member WHERE member.country IN ('United States', 'Canada')
SELECT member.country, COUNT(member.member_id) AS total_members FROM member GROUP BY member.country ORDER BY total_members DESC NULLS LAST
SELECT member.country, COUNT(member.member_id) AS total_members FROM member GROUP BY member.country ORDER BY total_members DESC NULLS LAST LIMIT 1
SELECT member.country FROM member GROUP BY member.country HAVING COUNT(member.member_id) > 2
SELECT college.leader_name, college.college_location FROM college
SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT round_member.member_id FROM round_member)
SELECT Documents.document_name, Documents.access_count FROM Documents ORDER BY Documents.document_name ASC NULLS FIRST
SELECT Documents.document_name, Documents.access_count FROM Documents ORDER BY Documents.document_name ASC NULLS FIRST
SELECT documents.document_name, MAX(documents.access_count) AS max_access_count FROM Documents GROUP BY documents.document_name ORDER BY max_access_count DESC NULLS LAST LIMIT 1
SELECT documents.document_name, MAX(documents.access_count) AS max_access_count FROM Documents GROUP BY documents.document_name ORDER BY max_access_count DESC NULLS LAST LIMIT 1
SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_name) > 4
SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_code) >= 2
SELECT SUM(access_count) AS total_access_count FROM Documents WHERE document_type_code = (SELECT MAX(document_type_code) FROM Documents)
SELECT SUM(access_count) AS total_access_count FROM Documents GROUP BY document_type_code ORDER BY total_access_count DESC NULLS LAST LIMIT 1
SELECT AVG(access_count) AS average_access_count FROM Documents
 AVG(Documents.access_count) AS average_access_count FROM Documents;
                        ```SELECT Documents.document_type_code FROM Documents WHERE Documents.document_name ILIKE '%David%CV%' LIMIT 1
 SELECT Documents.document_type_code FROM Documents WHERE Documents.document_name ilike '%David%CV%'
                        ```SELECT Documents.document_code FROM Documents GROUP BY Documents.document_type_code, Documents.access_count HAVING COUNT(Documents.document_type_code) > 3 AND MAX(Documents.access_count) > 3

                        ```SELECT Documents.document_type_code FROM Documents WHERE Documents.access_count > '10000' GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_type_code) > 1
SELECT Documents.document_type_code FROM Documents WHERE Documents.access_count <= 10000 ORDER BY Documents.access_count
SELECT Documents.document_name FROM Documents WHERE NOT Documents.document_name ILIKE '%section%'
SELECT Documents.document_name FROM Documents WHERE Documents.document_structure_code IS NULL
SELECT Users.user_name, Users.password FROM Users ORDER BY Users.role_code DESC NULLS LAST
SELECT Users.user_name, Users.password FROM Users GROUP BY Users.user_name, Users.password ORDER BY COUNT(Users.role_code) DESC NULLS LAST
SELECT Documents.document_name FROM Documents WHERE NOT Documents.document_name ILIKE '%image%'
SELECT Documents.document_name FROM Documents WHERE NOT Documents.document_name ILIKE '%image%' ORDER BY Documents.document_name
SELECT Documents.document_name FROM Documents WHERE Documents.document_name ILIKE '%CV%'
SELECT Documents.document_name FROM Documents WHERE Documents.document_name ILIKE '%CV%'
SELECT CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Users), 0) AS proportion_logged_in FROM Users WHERE user_login = 'admin' AND password = 'password'
SELECT COUNT(*) AS total_users FROM Users WHERE NOT user_login IS NULL
 SELECT r.role_description FROM roles r WHERE r.role_id IN (SELECT u.favorite_role FROM users u);
                        ```
                        SELECT r.role_description FROM roles r WHERE r.role_id IN (SELECT u.role_id FROM users u JOIN sessions s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.session_id) IS NOT NULL);
                        ```SELECT AVG(Documents.access_count) AS average_access_count FROM Documents ORDER BY Documents.document_structure_code ASC LIMIT 1
SELECT AVG(Documents.access_count) AS average_access_count FROM Documents GROUP BY Documents.document_structure_code ORDER BY average_access_count
SELECT images.image_name, images.image_url FROM Images ORDER BY images.image_name
SELECT Images.image_name, Images.image_url FROM Images ORDER BY Images.image_name ASC NULLS FIRST
SELECT Users.role_code, COUNT(*) AS user_count FROM Users GROUP BY Users.role_code
SELECT Users.role_code, COUNT(*) AS user_count FROM Users GROUP BY Users.role_code
SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_code) > 2
SELECT Documents.document_type_code FROM Documents GROUP BY Documents.document_type_code HAVING COUNT(Documents.document_code) > 2
SELECT COUNT(*) FROM Companies
SELECT COUNT(*) FROM Companies
SELECT Companies.name FROM Companies ORDER BY Companies.market_value_billion DESC NULLS LAST
SELECT Companies.name FROM Companies ORDER BY CAST(Comanies.market_value_billion AS FLOAT) DESC NULLS LAST
SELECT Companies.name FROM Companies WHERE "Headquarters" <> 'USA'
 SELECT Companies.name FROM Companies WHERE "Headquarters" ILIKE '%usa%'
                        ```SELECT Companies.name, Companies.assets_billion FROM Companies ORDER BY Companies.name ASC NULLS FIRST
SELECT Companies.name, SUM(Companies_billion) AS total_assets FROM Companies GROUP BY Companies.name ORDER BY Companies.name ASC NULLS FIRST
SELECT AVG(Profits_billion) AS average_profit FROM Companies
SELECT AVG(Companies_billion) AS average_profit FROM Companies
SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking'
SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking'
SELECT COUNT(DISTINCT Companies.Industry) AS number_of_industries FROM Companies
SELECT COUNT(DISTINCT Companies.Industry) AS num_industries FROM Companies
SELECT name FROM buildings ORDER BY Stories DESC NULLS LAST
SELECT b.name FROM buildings AS b ORDER BY b.stories DESC NULLS LAST
SELECT MAX(buildings.stories) AS max_stories FROM buildings
SELECT MAX(buildings.stories) AS max_stories FROM buildings
SELECT b.name FROM buildings AS b WHERE b.status = 'on-hold' ORDER BY b.stories ASC NULLS FIRST
SELECT name FROM buildings WHERE status = 'on-hold' ORDER BY stories ASC NULLS FIRST
SELECT Companies.Industry, COUNT(*) AS num_companies FROM Companies GROUP BY Companies.industry
SELECT Companies.Industry, COUNT(Companies.id) AS num_companies FROM Companies GROUP BY Companies.industry
SELECT Companies.Industry, COUNT(Companies.id) AS company_count FROM Companies GROUP BY Companies.industry ORDER BY company_count DESC NULLS LAST
SELECT Companies.Industry, COUNT(Companies.id) AS company_count FROM Companies GROUP BY Companies.industry ORDER BY company_count DESC NULLS LAST
SELECT Companies.Industry FROM Companies GROUP BY Companies.industry ORDER BY COUNT(Companies.id) DESC NULLS LAST LIMIT 1
SELECT Companies.Industry FROM Companies GROUP BY Companies.industry ORDER BY COUNT(Companies.id) DESC NULLS LAST LIMIT 1
SELECT DISTINCT b.name FROM buildings AS b LEFT JOIN companies_in_buildings ON b.id = cib.city WHERE cib.status IS NULL
SELECT b.name FROM buildings AS b LEFT JOIN offices ON b.id = o.city WHERE o.city IS NULL
SELECT Companies.Industry FROM Companies WHERE Companies.headquarters IN ('USA', 'China') GROUP BY Companies.industry
SELECT DISTINCT Companies.Industry FROM Companies WHERE (Comanies.headquarters ILIKE '%usa%' AND companies.headquarters ILIKE '%china%') GROUP BY companies.industry
 SELECT COUNT(*) FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')
                        ``` SELECT COUNT(*) FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')
                        ```SELECT Companies.Headquarters FROM Companies GROUP BY Companies.Headquarters HAVING COUNT(Companies.id) > 2
SELECT DISTINCT Companies.Headquarters FROM Companies GROUP BY Companies.Headquarters HAVING COUNT(Companies.id) > 2

COUNT(Products.Product_ID) AS total_products FROM Products;
                        
                        ```SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC NULLS FIRST
SELECT p.product_name, pt.product_type_code FROM products JOIN Products AS pt ON p.product_type_code = pt.product_type_code
SELECT Products.Product_Name, Products.Product_Type_Code, Products.Product_ID, Products.Product_Price FROM Products WHERE (Products.Product_Name ILIKE '%Dining%' OR Products.Product_Name ILIKE '%Trading Policy%')
 AVG(Products.Product_Price) AS average_price FROM Products;
                        ```SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC NULLS LAST LIMIT 1
SELECT Products.Product_Type_Code, COUNT(*) AS product_count FROM Products GROUP BY Products.Product_Type_Code
SELECT Products.Product_Type_Code FROM Products GROUP BY Products.Product_Type_Code ORDER BY COUNT(Products.Product_Type_Code) DESC NULLS LAST LIMIT 1
SELECT DISTINCT Products.Product_Type_Code FROM Products GROUP BY Products.Product_Type_Code HAVING COUNT(Products.Product_ID) >= 2
SELECT DISTINCT Products.Product_Type_Code FROM Products WHERE Products.Product_Price > 4500 AND Products.Product_Typed < 3000
SELECT p.product_name FROM products LEFT JOIN Products AS ep ON p.product_id = ep.product_id WHERE ep.product_id IS NULL
SELECT COUNT(*) AS total_artworks FROM artwork
SELECT artwork.name FROM artwork ORDER BY artwork.name ASC NULLS FIRST
SELECT artwork.name FROM artwork WHERE artwork.type <> 'Program Talent Show'
SELECT festival_detail.festival_name, festival_detail.location FROM festival_detail
SELECT festival_detail.chair_name FROM festival_detail ORDER BY festival_detail.year ASC NULLS FIRST
SELECT festival_detail.location FROM festival_detail GROUP BY festival_detail.location ORDER BY festival_detail.num_of_audience DESC NULLS LAST LIMIT 1
SELECT festival_detail.festival_name FROM festival_detail WHERE festival_detail.year = '2007'
SELECT AVG(festival_detail.num_of_audience) AS average_audience FROM festival_detail
SELECT festival_detail.festival_name FROM festival_detail ORDER BY festival_detail.year DESC NULLS LAST LIMIT 3
SELECT artwork.type, COUNT(artwork.artwork_id) AS number_of_artworks FROM artwork GROUP BY artwork.type ORDER BY number_of_artworks DESC NULLS LAST
SELECT artwork.type FROM artwork GROUP BY artwork.type ORDER BY COUNT(artwork.type) DESC NULLS LAST LIMIT 1
SELECT festival_detail.year FROM festival_detail GROUP BY festival_detail.year HAVING COUNT(festival_detail.festival_id) > 1
SELECT artwork.name FROM artwork WHERE NOT artwork.artwork_id IN (SELECT nomination.type FROM nominations)
SELECT SUM(festival_detail.num_of_audience) AS total_audience FROM festival_detail WHERE festival_detail.year IN (2008, 2010)
SELECT SUM(festival_detail.num_of_audience) AS total_audience FROM festival_detail
SELECT festival_detail.year FROM festival_detail WHERE festival_detail.location ILIKE '%United%States%' AND NOT festival_detail.location ILIKE '%United%States%'

COUNT(premises.premise_id) AS total_premises FROM premises;
                        
                        ```SELECT Premises.premise_id FROM Premises GROUP BY Premises.premise_id
SELECT Premises.premise_id, Premises.premise_details FROM Premises ORDER BY Premises.premise_id
SELECT Premises.premise_id, COUNT(*) AS total_premises FROM Premises GROUP BY Premises.premise_id
SELECT product_category, COUNT(mailshot_id) AS total_mailshots FROM Mailshot_Campaigns GROUP BY product_category
SELECT customers.customer_name, customers.customer_phone FROM Customers WHERE customers.customer_email IS NULL
SELECT outcome_code, COUNT(mailshot_id) AS total_mailshots FROM Mailshot_Customers GROUP BY outcome_code
SELECT DISTINCT address_type_code FROM Customer_Addresses
SELECT order_shipping_charges, customer_id FROM Customer_Orders WHERE order_status_code IN ('Cancelled', 'Paid')
SELECT COUNT(Course.CID) AS total_courses FROM Course
SELECT COUNT(Course.CID) AS total_courses FROM Course
SELECT COUNT(*) FROM Course WHERE Credits > 2
SELECT COUNT(*) FROM Course WHERE Credits > 2
SELECT Course.CName FROM Course WHERE Course.Credits = '1'
SELECT Course.CName FROM Course WHERE Course.Credits = '1'
SELECT Course.CName FROM Course WHERE Course.Days ILIKE '%MTW%' ORDER BY Course.CName
SELECT Course.CName FROM Course WHERE Course.Days ILIKE '%MTW%'
SELECT COUNT(*) FROM Department WHERE Division = 'AS'
SELECT COUNT(*) FROM Department WHERE Division ILIKE '%AS%'
SELECT Department.DPhone FROM Department WHERE "Room" ILIKE '%268%'
SELECT Department.DPhone FROM Department WHERE "Room" ILIKE '%268%'
SELECT COUNT(DISTINCT Enrolled_in.StuID) AS num_students FROM Enrolled_in WHERE Enrolled_in.Grade ILIKE '%B%'
SELECT COUNT(DISTINCT Enrolled_in.StuID) AS number_of_students FROM Enrolled_in WHERE Enrolled_in.Grade = 'B'
SELECT MAX(gradepoint) AS max_gradepoint, MIN(gradepoint) AS min_gradepoint FROM Gradeconversion WHERE "lettergrade" ILIKE '%All%' OR "lettergrade" ILIKE '%A%'
SELECT MAX(gradeconversion.gradepoint) AS max_grade_points, MIN(gradeconversion.gradepoint) AS min_grade_points FROM Gradeconversion
SELECT Student.Fname FROM Student WHERE Student.Fname ILIKE '%a%'
SELECT Student.Fname FROM Student WHERE Student.Fname ILIKE '%a%'
SELECT faculty.fname, faculty.lname FROM Faculty WHERE faculty.building = 'NEB' AND faculty.sex = 'M'
SELECT faculty.lname, faculty.fname FROM Faculty WHERE faculty.sex = 'M' AND faculty.building ILIKE '%NEB%'
SELECT faculty.room FROM Faculty WHERE faculty.building = 'NEB' AND faculty.rank = 'professor'
SELECT faculty.room FROM Faculty WHERE faculty.building = 'NEB' AND faculty.rank = 'Professor'
SELECT Department.DName FROM Department WHERE Department.Building ILIKE '%Mergenthaler%'
SELECT Department.DName FROM Department WHERE "Building" ILIKE '%Mergenthaler%'
SELECT Course.CName, Course.Credits FROM Course ORDER BY Course.Credits ASC NULLS FIRST
SELECT Course.CName, Course.Credits FROM Course ORDER BY Course.Credits ASC NULLS FIRST
SELECT Course.CName FROM Course ORDER BY Course.Credits DESC NULLS LAST
SELECT Course.CName FROM Course ORDER BY Course.Credits DESC NULLS LAST
SELECT Student.Fname FROM Student ORDER BY Student.Age DESC NULLS LAST
SELECT s.fname FROM Student AS s ORDER BY s.age DESC NULLS LAST
SELECT Student.LName FROM Student WHERE Student.Sex = 'F' ORDER BY Student.Age DESC NULLS LAST
SELECT Student.LName FROM Student WHERE Student.Sex = 'female' ORDER BY Student.Age DESC NULLS LAST
SELECT faculty.lname FROM Faculty WHERE faculty.building = 'Barton' ORDER BY faculty.lname ASC NULLS FIRST
SELECT lname FROM Faculty WHERE building ILIKE '%Barton%' ORDER BY lname
SELECT faculty.fname FROM Faculty WHERE faculty.rank ILIKE '%Professor%' ORDER BY faculty.fname ASC NULLS FIRST
SELECT fname FROM Faculty WHERE rank = 'Professor' ORDER BY fname
SELECT Department.DName FROM Department WHERE Department.Room IS NULL
SELECT Department.DName FROM Department WHERE NOT Department.DName IN (SELECT Student.DName FROM Student)

                        ```SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC NULLS FIRST LIMIT 1
SELECT C.CName FROM Course AS C WHERE (C.Credits IN (3, 1) AND C.Hours = '4') OR (C.Credits IN (3, 1) AND C.Hours > '4')
 SELECT Course.CName FROM Course WHERE (Course.Credits = '3' OR (Course.Credits = '1' AND Course.Hours = '4'))
                        ```SELECT DName FROM Department WHERE "Division" IN ('AS', 'EN') AND "Building" = 'NEB'
SELECT DISTINCT Department.DName FROM Department WHERE (Department.Division = 'AS' OR department.division = 'EN') AND (department.building = 'NEB')
SELECT Student.Fname FROM Student WHERE NOT Student.StuID IN (SELECT CourseStudent.StuID FROM Student)
SELECT Student.Fname FROM Student WHERE NOT Student.StuID IN (SELECT Course.Student_id FROM Student)
SELECT ps.product_id AS product_id, RANK() OVER (ORDER BY ps.total_value_purchased DESC NULLS LAST) AS rank FROM Product_Suppliers AS ps WHERE NOT total_amount_purchased IS NULL AND total_value_purchased > 0 ORDER BY rank ASC NULLS FIRST LIMIT 3
SELECT product_id FROM Product_Suppliers ORDER BY total_value_purchased DESC NULLS LAST LIMIT 3
SELECT p.product_id, pt.product_type_code FROM Products AS p JOIN (SELECT MIN(product_price) AS min_price, product_id FROM Products GROUP BY product_id) AS mp ON p.product_price = mp.min_price
SELECT p.product_id, p.product_type_code FROM Products AS p ORDER BY p.product_price ASC LIMIT 1
SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products
SELECT COUNT(DISTINCT product_type_code) AS number_of_product_types FROM Products
SELECT payment_method_code, COUNT(customer_id) AS number_of_customers FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY payment_method_code
SELECT Order_Items.product_id FROM Order_Items GROUP BY Order_Items.product_id ORDER BY COUNT(Order_Items.product_id) DESC NULLS LAST LIMIT 1
SELECT Order_Items.product_id FROM Order_Items GROUP BY Order_Items.product_id ORDER BY COUNT(Order_Items.order_item_id) DESC NULLS LAST LIMIT 1
SELECT product_type_code, AVG(product_price) AS average_product_price FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code
SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id ORDER BY COUNT(dept_store_id) DESC NULLS LAST LIMIT 2
WITH chain_store_count AS (SELECT dept_store_chain_id, COUNT(dept_store_id) AS store_count FROM Department_Stores GROUP BY dept_store_chain_id), max_store_count AS (SELECT MAX(store_count) AS max_store_count FROM chain_store_count) SELECT ds.dept_store_chain_id, ds.store_name, cs.store_count FROM Department_Stores AS ds JOIN chain_store_count ON ds.dept_store_chain_id = cs.dept_store_chain_id WHERE cs.store_count = (SELECT max_store_count FROM max_store_count)
SELECT MIN(department_id) AS min_department_id FROM Staff_Department_Assignments
SELECT MIN(department_id) AS min_department_id FROM Staff_Department_Assignments
SELECT product_type_code, MIN(product_price) AS min_price, MAX(product_price) AS max_price FROM Products GROUP BY product_type_code
SELECT product_type_code, MIN(product_price) AS min_product_price, MAX(product_price) AS max_product_price FROM Products GROUP BY product_type_code
SELECT p.product_type_code, AVG(p.product_price) AS avg_product_price FROM Products AS p GROUP BY p.product_type_code HAVING AVG(p.product_price) > (SELECT AVG(product_price) FROM Products)
SELECT Products.product_type_code FROM Products GROUP BY Products.product_type_code HAVING AVG(Products.product_price) > (SELECT AVG(product_price) FROM Products)
SELECT p.product_name, CAST(p.product_price AS FLOAT) AS product_price, p.product_id FROM Products AS p WHERE p.product_price BETWEEN 600 AND 700
SELECT p.product_id, p.product_name FROM Products AS p WHERE p.product_price BETWEEN 600 AND 700
SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_status_code = 'Cancelled' AND order_date < CURRENT_DATE ORDER BY customer_id
SELECT DISTINCT a.customer_id FROM Customer_Orders AS a JOIN Customer_Orders AS b ON a.order_id > b.order_id AND b.order_status_code = 'Cancelled' WHERE a.order_status_code <> 'Cancelled'

                        ``` SELECT s.staff_id FROM Staff_Department_assignments s JOIN (SELECT staff_id, MIN(date_assigned_from) AS min_date_assigned_from FROM Staff_department_assignments WHERE department_id IN (SELECT id FROM Departments WHERE dept_name = 'Clerical') GROUP BY staff_id) c ON s.staff_id = c.staff_id AND s.date_assigned_from < c.min_date_assigned_from;
                        ```SELECT Customers.customer_name, Customers.customer_id FROM Customers WHERE Customers.customer_address ILIKE '%TN%'
SELECT customers.customer_name, customers.customer_id FROM Customers WHERE customers.customer_address ILIKE '%TN%'
SELECT Customers.customer_phone FROM Customers
SELECT Customers.customer_phone FROM Customers
SELECT DISTINCT oi.product_id FROM Order_Items AS oi WHERE (SELECT COUNT(*) FROM Order_Items AS oi2 WHERE oi2.product_id = oi.product_id) > 3 OR (SELECT SUM(order_id) FROM Supplier_Products WHERE sp.product_id = oi.product_id) > 80000
SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Order_Items GROUP BY order_item_id HAVING COUNT(order_item_id) > 3) OR product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING CAST(SUM(product_id) AS FLOAT) > 80000)
SELECT product_id, product_name FROM Products WHERE product_price < 600 OR product_price > 900
SELECT product_id, product_name FROM Products WHERE product_price < 600 OR product_price > 900
SELECT supplier_id FROM Product_Suppliers WHERE total_value_purchased > 50000 OR total_value_purchased < 30000
SELECT supplier_id FROM Product_Suppliers WHERE total_value_purchased > 50000 OR total_value_purchased < 30000
SELECT AVG(total_amount_purchased) AS average_total_amount_purchased, AVG(total_value_purchased) AS average_total_value_purchased FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(product_id) DESC NULLS LAST LIMIT 1)
SELECT AVG(total_amount_purchased) AS average_total_amount_purchased, AVG(total_value_purchased) AS average_total_value_purchased FROM Product_Suppliers GROUP BY supplier_id HAVING COUNT(product_id) = (SELECT MAX(COUNT(product_id)) FROM Product_Suppliers)
SELECT MAX(customers.customer_code), MIN(customers.customer_code) FROM Customers
SELECT MIN(customer_code), MAX(customer_code) FROM Customers
SELECT product_type_code, MIN(product_price) AS min_price, MAX(product_price) AS max_price FROM Products GROUP BY product_type_code ORDER BY product_type_code ASC NULLS FIRST
SELECT product_type_code, MIN(product_price) AS min_product_price, MAX(product_price) AS max_product_price FROM Products GROUP BY product_type_code ORDER BY product_type_code
SELECT o.order_id, c.customer_id FROM orders JOIN Customer_Orders AS c ON o.customer_id = c.customer_id WHERE o.order_status_code = 'Cancelled' ORDER BY o.order_date DESC NULLS LAST
SELECT o.order_id, c.customer_id FROM Customer_Orders AS o JOIN customers ON o.customer_id = c.customer_id
SELECT customer_id, customer_name FROM Customers WHERE customer_address ILIKE '%WY%' AND payment_method_code <> 'credit card'
SELECT Customers.customer_id, Customers.customer_name FROM Customers WHERE Customers.customer_address ILIKE '%WY%' AND Customers.payment_method_code <> 'credit card'
 AVG(Products.product_price) AS average_product_price FROM Products WHERE product_type_code ilike '%clothes%'
                        ```SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'clothes'
SELECT Products.product_name FROM Products WHERE Products.product_type_code = 'Hardware' ORDER BY Products.product_price DESC NULLS LAST LIMIT 1
SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_aircraft FROM aircraft
SELECT COUNT(*) AS total_aircraft FROM aircraft
SELECT a.description FROM aircraft AS a
SELECT a.description FROM aircraft AS a
SELECT AVG(International_passengers) AS average_international_passengers FROM airport
SELECT AVG(International_passengers) AS average_international_passengers FROM airport
 SELECT CAST(International_passengers AS FLOAT) / NULLIF(total_passengers, 0) AS fraction_international_passengers, CAST(domestic_passengers AS FLOAT) / NULLIF(total_passengers, 0) AS fraction_domestic_passengers FROM airport WHERE airport_name ILIKE '%London%Heathrow%'
                        ``` SELECT CAST(International_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_international_passengers, CAST(domestic_passengers AS FLOAT) / NULLIF(total_passengers, 0) * 100 AS percentage_domestic_passengers FROM airport WHERE airport_name ILIKE '%London%Heathrow%'
                        ```SELECT SUM(airport.domestic_passengers) AS total_domestic_passengers FROM airport WHERE airport.airport_name ILIKE '%London%'
SELECT SUM(domestic_passengers) AS total_domestic_passengers FROM airport WHERE airport_name ILIKE '%London%'
SELECT MAX(Transit_Passengers) AS max_transit_passengers, MIN(Transit_Passengers) AS min_transit_passengers FROM airport
WITH total_transit AS (SELECT Airport_ID, SUM(Transit_Passengers) AS total_passengers FROM airport GROUP BY Airport_ID), max_transit AS (SELECT MAX(total_passengers) AS max_total_passengers FROM total_transit) SELECT a.airport_name, t.total_passengers FROM airport AS a JOIN total_transit ON a.airport_id = t.airport_id WHERE t.total_passengers = (SELECT max_total_passengers FROM max_transit)
SELECT pilot.name FROM pilot WHERE pilot.age >= 25 AND pilot.age <= 30
SELECT p.name FROM pilot AS p WHERE p.age >= 25
SELECT pilot.name FROM pilot ORDER BY pilot.name ASC NULLS FIRST
SELECT pilot.name FROM pilot ORDER BY pilot.name ASC NULLS FIRST
SELECT pilot.name FROM pilot WHERE pilot.age >= 30 ORDER BY pilot.name DESC NULLS LAST
SELECT pilot.name FROM pilot WHERE pilot.age >= 30 ORDER BY pilot.name DESC NULLS LAST
SELECT p.name FROM pilot AS p ORDER BY p.age DESC NULLS LAST
SELECT pilot.name FROM pilot ORDER BY pilot.age DESC NULLS LAST
SELECT a.aircraft FROM aircraft AS a WHERE NOT a.aircraft IN (SELECT m.aircraft_id FROM matches)
SELECT aircraft.aircraft FROM aircraft WHERE NOT aircraft.aircraft_id IN (SELECT aircraft_id FROM matches)
SELECT a.airport_name, TO_CHAR(a.total_passengers, '999999999') AS total_passengers FROM airport AS a WHERE a.international_passengers = (SELECT MAX(b.international_passengers) FROM airport AS b)
SELECT a.airport_name, CAST(a.international_passengers AS FLOAT) / NULLIF(b.total_passengers, 0) AS ratio FROM airport AS a JOIN (SELECT airport_id, COUNT(*) AS total_passengers FROM passenger GROUP BY airport_id) AS b ON a.airport_id = b.airport_id ORDER BY ratio DESC NULLS LAST LIMIT 1
 SELECT p.name FROM pilot p JOIN race_pilot rp ON p.pilot_id = rp.pilot_id WHERE rp.race_id NOT IN (SELECT race_id FROM race WHERE country_code = 'AUS');
                        ``` SELECT p.name FROM pilot p WHERE p.pilot_id NOT IN (SELECT g.pilot_id FROM grand_prix g JOIN race r ON g.race_id = r.race_id WHERE r.country_code = 'AUS');
                        ```SELECT COUNT(DISTINCT Status_of_Thing_Code) AS number_of_status_codes FROM Timed_Status_of_Things
SELECT o.organization_id FROM Organizations AS o WHERE o.parent_organization_id IS NULL
SELECT MAX(date_moved_in) AS last_move_in_date FROM Residents
SELECT Residents.other_details FROM Residents WHERE Residents.other_details ILIKE '%Miss%'
SELECT customer_events.customer_event_id, customer_events.date_moved_in, customer_events.property_id FROM Customer_Events
SELECT COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customers LEFT JOIN Events ON Customers.customer_id = Events.customer_id WHERE Events.customer_id IS NULL
SELECT date_moved_in FROM Residents GROUP BY date_moved_in
SELECT COUNT(*) FROM school
SELECT COUNT(*) FROM school
SELECT school.location FROM school ORDER BY school.enrollment ASC NULLS FIRST
SELECT school.location FROM school ORDER BY school.enrollment ASC NULLS FIRST
SELECT school.location FROM school ORDER BY school.founded DESC NULLS LAST
SELECT school.location FROM school ORDER BY school.founded DESC NULLS LAST
SELECT school.enrollment FROM school WHERE school.denomination <> 'Catholic'
SELECT school.school_id, SUM(school.enrollment) AS total_enrollment FROM school WHERE school.denomination <> 'Catholic' GROUP BY school.school_id
SELECT AVG(Enrollment) AS average_enrollment FROM school
SELECT AVG(Enrollment) AS average_enrollment FROM school
SELECT DISTINCT player.team FROM player ORDER BY player.team ASC NULLS FIRST
SELECT p.player_id, p.team FROM player AS p ORDER BY p.team ASC NULLS FIRST
SELECT COUNT(DISTINCT player.position) AS number_of_positions FROM player
SELECT COUNT(DISTINCT Position) AS total_positions FROM player
SELECT MAX(player.age), player.team FROM player GROUP BY player.team ORDER BY player.team
SELECT MAX(player.age) AS max_age, player.team FROM player GROUP BY player.team ORDER BY max_age DESC NULLS LAST LIMIT 1
SELECT p.team, MAX(p.age) AS max_age FROM player AS p GROUP BY p.team ORDER BY max_age DESC NULLS LAST LIMIT 5
SELECT player.team FROM player ORDER BY player.age DESC NULLS LAST LIMIT 5
SELECT school.denomination, COUNT(*) AS number_of_schools FROM school GROUP BY school.denomination ORDER BY number_of_schools DESC NULLS LAST
SELECT school.denomination, COUNT(*) AS number_of_schools FROM school GROUP BY school.enrollment ORDER BY number_of_schools DESC NULLS LAST
SELECT school.denomination, COUNT(school.school_id) AS total_schools FROM school GROUP BY school.denomination ORDER BY total_schools DESC NULLS LAST
SELECT school.denomination, COUNT(school.school_id) AS school_count FROM school GROUP BY school.denomination ORDER BY school_count DESC NULLS LAST
SELECT MAX(school_colors) FROM school
SELECT school_colors FROM school WHERE enrollment = (SELECT MAX(enrollment) FROM school)
SELECT school.location FROM school WHERE NOT school.school_id IN (SELECT player.school_id FROM school)
SELECT school.location FROM school WHERE NOT school.school_id IN (SELECT team.school_id FROM team)
SELECT school.denomination FROM school WHERE (school.founded < CAST('1890' AS DATE)) OR (school.founded > CAST('1900' AS DATE))
SELECT school.denomination FROM school WHERE (school.founded < '1890' AND school.founded > '1900') OR (school.founded > '1900' AND school.founded < '1890')
SELECT school_details.nickname FROM school_details WHERE school_details.division <> '1'
SELECT school_details.nickname FROM school_details WHERE school_details.division <> '1'
SELECT s.denomination FROM school AS s WHERE s.school_id IN (SELECT school_id FROM school GROUP BY school_id HAVING COUNT(school_id) > 1)
SELECT COUNT(DISTINCT School_id) AS number_of_schools FROM school WHERE enrollment > 1
SELECT d.district_name FROM district AS d ORDER BY d.city_area DESC NULLS LAST
SELECT district.district_name FROM district ORDER BY district.city_area DESC NULLS LAST
SELECT DISTINCT product.max_page_size FROM product WHERE product.product_id > 3
SELECT MAX(product.max_page_size) AS max_page_size FROM product WHERE product.pages_per_minute_color > 3
SELECT district.district_name, district.city_population FROM district WHERE district.city_population BETWEEN 200000 AND 2000000
SELECT d.district_name, c.city_population FROM district JOIN district AS c ON d.headquartered_city = c.city_area WHERE d.city_population BETWEEN 200000 AND 2000000
SELECT district.district_name FROM district WHERE district.city_area > 10 OR district.city_population > 100000
SELECT district.district_name FROM district WHERE district.city_area > 10 OR district.city_population > 100000
SELECT district.district_name, SUM(district.city_population) AS total_population FROM district GROUP BY district.district_name ORDER BY total_population DESC NULLS LAST LIMIT 1
SELECT d.district_name, COUNT(*) AS total_population FROM district AS d GROUP BY d.district_name ORDER BY total_population DESC NULLS LAST LIMIT 1
SELECT district.district_name, district.city_area FROM district ORDER BY district.city_area ASC NULLS FIRST LIMIT 1
SELECT d.district_name FROM district AS d ORDER BY d.city_area ASC NULLS FIRST LIMIT 1
SELECT district.district_name, SUM(district.city_population) AS total_population FROM district GROUP BY district.district_name ORDER BY district.city_area DESC NULLS LAST LIMIT 3
SELECT district.district_name, SUM(district.city_population) AS total_population FROM district GROUP BY district.district_name ORDER BY district.city_area DESC NULLS LAST LIMIT 3
SELECT store.type, COUNT(*) AS total_stores FROM store GROUP BY store.type
SELECT store.type, COUNT(*) AS number_of_stores FROM store GROUP BY store.type
SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product
SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product
SELECT product_id, product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5
SELECT product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < '5'
 SELECT product_id, product FROM product WHERE (max_page_size = 'A4' OR pages_per_minute_color < 5)
                        ``` SELECT product FROM product WHERE (max_page_size = 'A4' OR pages_per_minute_color < 5)
                        ```SELECT product FROM product WHERE product ILIKE '%Scanner%'
SELECT product FROM product WHERE product ILIKE '%Scanner%'
SELECT MAX(product.max_page_size) AS max_page_size FROM product
SELECT MAX_PAGE_SIZE FROM product GROUP BY MAX_PAGE_SIZE ORDER BY COUNT(MAX_PAGE_SIZE) DESC NULLS LAST LIMIT 1
SELECT product.product FROM product WHERE product.max_page_size <> (SELECT MAX(product.max_page_size) FROM product)
SELECT product.product FROM product WHERE product.max_page_size <> (SELECT MAX(product.max_page_size) FROM product)
SELECT SUM(district.city_population) AS total_population FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district)
SELECT SUM(district.city_population) AS total_population FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district)
SELECT SUM(college.enr) AS total_enrollment FROM College
SELECT CAST(SUM(college.enr) AS FLOAT) / 1000000 AS total_students FROM College
SELECT AVG(enr) AS average_enrollment FROM College
SELECT cName, AVG(enr) AS avg_students FROM College GROUP BY cName
SELECT COUNT(*) AS total_colleges FROM College
SELECT COUNT(DISTINCT cName) AS num_colleges FROM College
SELECT COUNT(*) FROM Player WHERE HS > 1000
SELECT COUNT(DISTINCT p.pName) AS num_players FROM Player AS p WHERE CAST(p.HS AS FLOAT) > 1000
SELECT COUNT(*) FROM College WHERE enr > 15000
SELECT COUNT(*) AS num_colleges FROM College WHERE enr > 15000
SELECT AVG(pid) AS average_training_hours FROM Player

SELECT AVG(hours) AS average_hours FROM (SELECT p.pName, COUNT(t.time) AS hours FROM Player p JOIN Training t ON p.pID = t.playerId GROUP BY p.pName) subquery;
                        ```SELECT pName, HS FROM Player WHERE HS < '1500'
SELECT pName, SUM(HS) AS total_hours FROM Player WHERE SUM(HS) < 1500 GROUP BY pName
SELECT COUNT(DISTINCT cName) AS number_of_colleges FROM Tryout
SELECT COUNT(DISTINCT cName) AS num_colleges FROM Tryout
SELECT DISTINCT pPos FROM Tryout
SELECT DISTINCT pPos FROM Tryout
SELECT COUNT(*) AS num_students_accepted FROM Tryout WHERE decision = 'Accepted'
SELECT COUNT(DISTINCT pID) AS number_of_students FROM Tryout WHERE decision = 'yes'
SELECT COUNT(*) AS total_students FROM Tryout WHERE pPos = 'goalie'
SELECT CAST(COUNT(DISTINCT (t.pID)) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Tryout), 0) AS ratio_of_students_playing_tryout FROM tryout
SELECT MAX(pid) AS max_training_hours, AVG(pid) AS average_training_hours, MIN(pid) AS min_training_hours FROM Player
SELECT AVG(pid) AS average_hours, MAX(pid) AS max_hours, MIN(pid) AS min_hours FROM Player
SELECT AVG(college.enr) AS average_enrollment FROM College WHERE college.state = 'FL'
SELECT AVG(enr) AS average_students FROM College WHERE state = 'Florida'
 SELECT Player.pName FROM Player WHERE (Player.HS >= 500 AND Player.HS <= 1500)
                        ```SELECT Player.pName FROM Player WHERE (Player.HS / 365) BETWEEN 500 AND 1500
SELECT pName FROM Player WHERE pName ILIKE '%a%'
SELECT pName FROM Player WHERE pName ILIKE '%a%'
SELECT college.cName, college.enr FROM College WHERE college.state = 'LA' AND CAST(college.enr AS FLOAT) > 10000
SELECT college.cName, college.enr FROM College WHERE college.state = 'Louisiana' AND college.enr > 10000
SELECT cName, state, enr FROM College ORDER BY enr ASC NULLS FIRST
SELECT college.cName, college.state, college.enr FROM College ORDER BY college.enr ASC NULLS FIRST
SELECT cName FROM College WHERE enr > '18000' ORDER BY cName
SELECT cName FROM College WHERE enr > '18000' ORDER BY cName ASC NULLS FIRST
SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC NULLS LAST
SELECT pName FROM Player WHERE NOT yCard IS NULL ORDER BY HS DESC NULLS LAST
SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC NULLS FIRST
SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC NULLS FIRST
SELECT t.pPos AS POSITION, COUNT(*) AS number_of_players FROM Tryout AS t GROUP BY t.pPos ORDER BY decision DESC NULLS LAST LIMIT 1
SELECT t.cName, COUNT(*) AS total_tryouts FROM Tryout AS t GROUP BY t.cName ORDER BY total_tryouts DESC NULLS LAST LIMIT 1
SELECT cName, COUNT(pID) AS total_students FROM Tryout GROUP BY cName ORDER BY total_students DESC NULLS LAST
SELECT cName, COUNT(pID) AS total_students FROM Tryout GROUP BY cName
SELECT cName FROM College ORDER BY enr DESC NULLS LAST LIMIT 3
SELECT college.cName FROM College WHERE enr IN (SELECT MAX(enr) FROM College GROUP BY state ORDER BY MAX(enr) DESC NULLS LAST LIMIT 3)
 SELECT c.state, MIN(c.enr) AS min_enrollment, m.school_name FROM college c JOIN schools m ON c.sname = m.sname GROUP BY c.state;
                        ```SELECT cName FROM College ORDER BY state NULLS FIRST, enr ASC LIMIT 1
SELECT cName FROM Tryout WHERE decision = 'Yes' AND pPos = 'Goalie'
SELECT cName FROM Tryout WHERE decision = 'Yes' AND pPos = 'Goalie'
SELECT college.cName FROM College WHERE (college.state = 'AZ' AND college.enr < 13000) OR (college.state <> 'AZ' AND college.enr > 15000)
SELECT college.cName FROM College WHERE (college.state = 'CA' AND college.enr < 13000) OR (college.state = 'LA' AND college.enr > 15000)
SELECT DISTINCT t.cName FROM Tryout AS t WHERE t.pPos IN ('goalie', 'mid')
SELECT t.cName AS school_name FROM Tryout AS t WHERE t.pPos = 'goal' AND t.decision = 'mid'
failure
failure
SELECT DISTINCT t.cName FROM Tryout AS t WHERE t.pPos = 'Midfield' AND NOT EXISTS(SELECT 1 FROM Tryout AS t2 WHERE t2.cName = t.cName AND t2.pPos = 'Goalie')
SELECT DISTINCT t.cName FROM Tryout WHERE t.pPos = 'Midfield' AND NOT EXISTS(SELECT 1 FROM Tryout AS g WHERE g.pID = t.pID)
failure
failure
SELECT college.state FROM College WHERE college.enr < (SELECT MAX(college.enr) FROM College) GROUP BY college.state
SELECT c.state FROM College AS c WHERE c.enr < (SELECT MIN(c2.enr) FROM College AS c2)
SELECT c.cName FROM College AS c WHERE c.state = 'FL' AND c.enr > (SELECT MIN(d.enr) FROM College AS d WHERE d.state = 'FL')
SELECT c.cName FROM College AS c WHERE c.state <> 'Florida' AND c.enr > (SELECT MAX(d.enr) FROM College AS d WHERE d.state = 'Florida')
SELECT college.cName FROM College WHERE college.state <> 'FL' AND college.enr > (SELECT MAX(college.enr) FROM College WHERE college.state = 'FL')
SELECT c.cName FROM College AS c WHERE c.state <> 'Florida' AND c.enr > (SELECT MAX(enr) FROM College WHERE state = 'Florida')
SELECT SUM(college.enr) AS total_enrollment FROM College WHERE college.state <> 'NY' AND college.state <> 'NC'
SELECT COUNT(*) AS total_students FROM College WHERE state IS NULL
SELECT state FROM College GROUP BY state HAVING AVG(enr) < (SELECT MAX(enr) FROM College)
SELECT state FROM College GROUP BY state HAVING COUNT(*) > (SELECT AVG(COUNT(*)) FROM College)
SELECT state FROM College GROUP BY state HAVING AVG(enr) > enr
SELECT state FROM College GROUP BY state HAVING AVG(enr) > enr

COUNT(device.device_id) AS total_devices FROM device;
                        
                        ```SELECT COUNT(*) AS total_devices FROM device
SELECT device.carrier FROM device ORDER BY device.carrier ASC NULLS FIRST
SELECT DISTINCT device.carrier FROM device ORDER BY device.carrier ASC NULLS FIRST
SELECT device.carrier FROM device WHERE device.software_platform <> 'Android'
SELECT DISTINCT device.carrier FROM device WHERE device.software_platform <> 'Android'
SELECT shop.shop_name FROM shop ORDER BY shop.open_year ASC NULLS FIRST
SELECT shop.shop_name FROM shop ORDER BY shop.open_year ASC NULLS FIRST
SELECT AVG(Quantity) AS average_quantity FROM stock
 AVG(stock.quantity) AS average_quantity FROM stock;
                        ```SELECT shop.shop_name, shop.location FROM shop ORDER BY shop.shop_name ASC NULLS FIRST
SELECT shop.shop_name, shop.location FROM shop ORDER BY shop.shop_name ASC NULLS FIRST
SELECT COUNT(DISTINCT Software_Platform) AS number_of_platforms FROM device
SELECT COUNT(DISTINCT Software_Platform) FROM device
SELECT shop.open_date FROM shop WHERE shop.shop_name ILIKE '%apple%' ORDER BY shop.open_year
 SELECT CAST(open_year AS VARCHAR) AS open_year, open_date FROM shop WHERE "shop_name" ILIKE '%apple%'
                        ```SELECT s.shop_name FROM shop AS s WHERE s.open_year = (SELECT MAX(open_year) FROM shop)
SELECT MAX(open_year) AS latest_opening_year, shop_name FROM shop GROUP BY shop_name ORDER BY latest_opening_year DESC NULLS LAST LIMIT 1
SELECT device.software_platform, COUNT(device.device_id) AS number_of_devices FROM device GROUP BY device.software_platform ORDER BY number_of_devices DESC NULLS LAST
SELECT device.software_platform, COUNT(device.device_id) AS number_of_devices FROM device GROUP BY device.software_platform ORDER BY number_of_devices DESC NULLS LAST
SELECT device.software_platform, COUNT(device.device_id) AS COUNT FROM device GROUP BY device.software_platform ORDER BY COUNT DESC NULLS LAST
SELECT device.software_platform, COUNT(*) AS frequency FROM device GROUP BY device.software_platform ORDER BY frequency DESC NULLS LAST
SELECT device.software_platform FROM device GROUP BY device.software_platform ORDER BY COUNT(device.software_platform) DESC NULLS LAST LIMIT 1
SELECT device.software_platform, COUNT(*) AS frequency FROM device GROUP BY device.software_platform ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT shop.shop_name FROM shop WHERE NOT shop.shop_id IN (SELECT device.shop_id FROM shop)
SELECT shop.shop_name FROM shop WHERE NOT shop.shop_id IN (SELECT device_stock.shop_id FROM shop)
SELECT DISTINCT shop.location FROM shop WHERE (shop.open_year > 2012 AND shop.open_year < 2008) ORDER BY shop.location
SELECT DISTINCT shop.location FROM shop WHERE (open_year > 2012 AND open_year < 2008) OR (open_year < 2008 AND open_year > 2012)
SELECT device.carrier FROM device WHERE device.device_id IS NULL
SELECT device.carrier FROM device WHERE NOT device.device_id IN (SELECT stock.device_id FROM stock)

COUNT(Bookings.booking_id) AS total_bookings
                        ```SELECT COUNT(*) AS total_bookings FROM Bookings
SELECT Bookings.Order_Date FROM Bookings
SELECT Bookings.Order_Date, ROW_NUMBER() OVER (ORDER BY Bookings.Order_Date NULLS FIRST) AS order_rank FROM Bookings
SELECT Bookings.Planned_Delivery_Date, Bookings.Actual_delivery_date FROM Bookings
SELECT bookings.booking_id, bookings.planned_delivery_date, bookings.actual_delivery_date FROM Bookings
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(Customers.customer_id) AS total_customers FROM Customers
SELECT customers.customer_phone, customers.customer_email_address FROM Customers WHERE customers.customer_name ILIKE '%Harold%'
SELECT customers.customer_phone, customers.customer_email_address FROM Customers WHERE customers.customer_name ILIKE '%Harold%'
SELECT Drama_Workshop_Groups.Store_Name FROM Drama_Workshop_Groups
SELECT Drama_Workshop_Groups.Store_Name FROM Drama_Workshop_Groups
SELECT MIN(order_quantity) AS min_order_quantity, AVG(CAST(order_quantity AS FLOAT)) AS avg_order_quantity, MAX(order_quantity) AS max_order_quantity FROM Invoices
SELECT MIN(CAST(order_quantity AS FLOAT)) AS min_quantity, AVG(CAST(order_quantity AS FLOAT)) AS avg_quantity, MAX(CAST(order_quantity AS FLOAT)) AS max_quantity FROM Invoices
SELECT DISTINCT Invoices.payment_method_code FROM Invoices
SELECT DISTINCT Invoices.payment_method_code FROM Invoices
SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'
SELECT Marketing_Regions.Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_regions.Marketing_Region_Code = 'CHN'
SELECT DISTINCT Products.Product_Name FROM Products WHERE Products.Product_Price > (SELECT AVG(Products.Product_Cost) FROM Products)
SELECT DISTINCT Products.Product_Name FROM Products WHERE Products.Product_Cost > (SELECT AVG(Product_Cost) FROM Products)
SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC NULLS LAST LIMIT 1
SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price DESC NULLS LAST LIMIT 1
SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC NULLS FIRST
SELECT Products.Product_Name FROM Products ORDER BY Products.Product_Price ASC NULLS FIRST
SELECT Performers.customer_phone FROM Performers WHERE Performers.customer_name ILIKE '%Ashley%'
SELECT Performers.customer_phone FROM Performers WHERE Performers.customer_name ILIKE '%Ashley%'
SELECT invoices.payment_method_code, COUNT(invoices.order_id) AS order_quantity FROM Invoices GROUP BY invoices.payment_method_code
SELECT invoices.payment_method_code, COUNT(invoices.order_id) AS order_quantity FROM Invoices GROUP BY invoices.payment_method_code
SELECT Invoices.payment_method_code, COUNT(Invoices.order_id) AS order_count FROM Invoices GROUP BY Invoices.payment_method_code ORDER BY order_count DESC NULLS LAST LIMIT 1
SELECT Invoices.payment_method_code, COUNT(*) AS frequency FROM Invoices GROUP BY Invoices.payment_method_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Products.Product_Name, AVG(Products.Product_Price) AS average_price FROM Products GROUP BY Products.Product_Name
SELECT Products.Product_Name, AVG(Products.Product_Price) AS average_product_price FROM Products GROUP BY Products.Product_Name
SELECT Products.Product_Name FROM Products WHERE Products.Product_Price < '1000000' ORDER BY Products.Product_Name
SELECT Products.Product_Name FROM Products WHERE Products.Product_Price < '1000000' ORDER BY Products.Product_Name
SELECT COUNT(DISTINCT Drama_Workshop_Groups.Currency_Code) AS number_of_currencies FROM Drama_Workshop_Groups
SELECT COUNT(DISTINCT Currency_Code) AS number_of_currency_codes FROM Drama_Workshop_Groups
SELECT Drama_Workshop_Groups.Marketing_Region_Code, COUNT(Drama_Workshop_Groups.Workshop_Group_ID) AS number_of_workshop_groups FROM Drama_Workshop_Groups GROUP BY Drama_Workshop_Groups.Marketing_Region_Code ORDER BY number_of_workshop_groups DESC NULLS LAST LIMIT 1
SELECT Drama_Workshop_Groups.Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Drama_Workshop_Groups.Marketing_Region_Code ORDER BY COUNT(Drama_Workshop_Groups.Marketing_Region_Code) DESC NULLS LAST LIMIT 1
SELECT Status_Code, COUNT(*) AS frequency FROM Bookings GROUP BY Status_Code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Status_Code, COUNT(*) AS frequency FROM Bookings GROUP BY Status_Code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Clients.customer_name FROM Clients WHERE customer_name IS NULL
SELECT Clients.customer_name FROM Clients WHERE NOT customer_phone IN (SELECT booking.client_id FROM booking)
 AVG(cast(invoices.order_quantity AS FLOAT)) filter (WHERE invoices.payment_method_code = 'Mastercard')
                        ```SELECT AVG(CAST(order_quantity AS FLOAT)) AS average_order_quantity FROM Invoices WHERE payment_method_code ILIKE '%mastercard%'
SELECT Invoices.Product_ID FROM Invoices GROUP BY Invoices.Product_ID ORDER BY COUNT(Invoices.Order_ID) DESC NULLS LAST LIMIT 1
SELECT Invoices.Product_ID FROM Invoices GROUP BY Invoices.Product_ID ORDER BY COUNT(Invoices.Product_ID) DESC NULLS LAST LIMIT 1

COUNT(Band.Id) AS number_of_bands FROM Band;
                        
                        ```SELECT COUNT(*) AS total_bands FROM Band
SELECT Albums.label FROM Albums
SELECT DISTINCT Albums.label FROM Albums
SELECT Albums.Title FROM Albums WHERE Albums.Year = '2012'
SELECT a.year, a.title, a.type, a.label, a.aid FROM Albums AS a WHERE a.year = 2012
SELECT COUNT(SongId) AS total_songs FROM Songs
SELECT COUNT(SongId) AS total_songs FROM Songs
SELECT COUNT(DISTINCT label) AS number_of_labels FROM Albums
SELECT DISTINCT Albums.label FROM Albums
SELECT a.label, COUNT(a.aid) AS num_albums FROM Albums AS a GROUP BY a.label ORDER BY num_albums DESC NULLS LAST LIMIT 1
SELECT a.label, COUNT(a.aid) AS num_albums FROM Albums AS a GROUP BY a.label ORDER BY num_albums DESC NULLS LAST LIMIT 1
SELECT Songs.Title FROM Songs WHERE Songs.Title ILIKE '%the%'
SELECT Songs.Title FROM Songs WHERE Songs.Title ILIKE '%the%'
SELECT Instruments.instrument FROM Instruments
SELECT Instruments.Instrument FROM Instruments GROUP BY Instruments.Instrument
SELECT Instruments.instrument FROM Instruments GROUP BY Instruments.instrument ORDER BY COUNT(Instruments.instrument) DESC NULLS LAST LIMIT 1
SELECT Instruments.instrument FROM Instruments GROUP BY Instruments.instrument ORDER BY COUNT(Instruments.instrument) DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS number_of_songs FROM Instruments WHERE Instrument ILIKE '%drums%'
SELECT COUNT(*) AS number_of_songs FROM Instruments WHERE Instrument ILIKE '%drums%'
SELECT v.type, COUNT(*) AS frequency FROM Vocals AS v GROUP BY v.type ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Vocals.type, COUNT(Vocals.type) AS frequency FROM Vocals GROUP BY Vocals.type ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Vocals.type FROM Vocals
SELECT v.type FROM Vocals AS v
SELECT Albums.Title FROM Albums WHERE Albums.Year = '2010'
SELECT COUNT(*) AS total_albums FROM Albums WHERE Year = 2010
SELECT Manufacturers.Founder FROM Manufacturers WHERE "Name" ILIKE '%Sony%'
SELECT Manufacturers.Founder FROM Manufacturers WHERE Manufacturers.Name ILIKE '%Sony%'
SELECT Manufacturers.Headquarter FROM Manufacturers WHERE "Founder" ILIKE '%james%'
SELECT Manufacturers.headquarter FROM Manufacturers WHERE "Founder" ILIKE '%james%'
SELECT Manufacturers.name, Manufacturers.headquarter FROM Manufacturers ORDER BY Manufacturers.revenue DESC NULLS LAST
SELECT Manufacturers.name, Manufacturers.headquarter FROM Manufacturers ORDER BY Manufacturers.revenue DESC NULLS LAST
SELECT AVG(Revenue) AS average_revenue, MAX(Revenue) AS max_revenue, SUM(Revenue) AS total_revenue FROM Manufacturers
SELECT AVG(Revenue) AS average_revenue, MAX(Revenue) AS max_revenue, SUM(Revenue) AS total_revenue FROM Manufacturers
SELECT COUNT(*) FROM Manufacturers WHERE Founder ILIKE '%Andy%'
SELECT COUNT(*) FROM Manufacturers WHERE Founder ILIKE '%Andy%'
SELECT SUM(Revenue) AS total_revenue FROM Manufacturers WHERE Headquarter ILIKE '%Austin%'
SELECT SUM(Revenue) AS total_revenue FROM Manufacturers WHERE Headquarter = 'Austin'
SELECT Manufacturers.Headquarter FROM Manufacturers GROUP BY Manufacturers.Headquarter
SELECT DISTINCT Manufacturers.Headquarter FROM Manufacturers
 SELECT COUNT(*) FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing')
                        ``` SELECT COUNT(*) FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing')
                        ```SELECT Manufacturers.founder FROM Manufacturers WHERE Manufacturers.name ILIKE 'S%'
SELECT Manufacturers.Founder FROM Manufacturers WHERE Manufacturers.Name ILIKE 'S%' ORDER BY Manufacturers.Founder
SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.revenue BETWEEN 100 AND 150
SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.revenue BETWEEN 100 AND 150
SELECT SUM(Revenue) AS total_revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan')
 SELECT SUM(Revenue) AS total_revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan')
                        ```SELECT Manufacturers.name, Manufacturers.headquarter, Manufacturers.founder FROM Manufacturers ORDER BY Manufacturers.revenue DESC NULLS LAST LIMIT 1
SELECT Manufacturers.name, Manufacturers.headquarter, Manufacturers.founder FROM Manufacturers ORDER BY Manufacturers.revenue DESC NULLS LAST LIMIT 1
SELECT Manufacturers.name, Manufacturers.headquarter, Manufacturers.revenue FROM Manufacturers ORDER BY Manufacturers.revenue DESC NULLS LAST
SELECT m.name, m.headquarter, m.revenue FROM Manufacturers AS m ORDER BY m.revenue DESC NULLS LAST
SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.revenue > (SELECT AVG(Manufacturers.revenue) FROM Manufacturers)
SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.revenue > (SELECT AVG(Manufacturers.revenue) FROM Manufacturers)
SELECT Manufacturers.name FROM Manufacturers WHERE Manufacturers.headquarter <> 'Austin' ORDER BY Manufacturers.revenue
SELECT Companies.name FROM Manufacturers WHERE Companies.revenue < (SELECT MIN(Manufacturers.revenue) FROM Manufacturers WHERE Manufacturers.headquarter ILIKE '%Austin%') ORDER BY Companies.name
SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE Manufacturers.headquarter ILIKE '%Austin%' AND Manufacturers.revenue < (SELECT MAX(revenue) FROM Manufacturers)
SELECT SUM(Companies.revenue) AS total_revenue FROM Manufacturers WHERE headquarter = 'Austin' AND revenue > (SELECT MIN(revenue) FROM manufacturers)
SELECT Manufacturers.Founder, SUM(Manufacturers.Revenue) AS total_revenue FROM Manufacturers GROUP BY Manufacturers.Founder
SELECT SUM(Manufacturers.revenue) AS total_revenue FROM Manufacturers WHERE NOT Manufacturers.founder IS NULL
SELECT m.name, m.revenue FROM Manufacturers AS m JOIN (SELECT headquarter, MAX(revenue) AS max_revenue FROM Manufacturers GROUP BY headquarter) AS sub ON m.headquarter = sub.headquarter
SELECT Manufacturers.headquarter, MAX(Manufacturers.revenue) AS max_revenue, ARRAY_AGG(Manufacturers.name) AS company_names FROM Manufacturers GROUP BY Manufacturers.headquarter ORDER BY Manufacturers.headquarter
SELECT m.name, SUM(m.revenue) AS total_revenue FROM Manufacturers AS m GROUP BY m.name
SELECT m.name, SUM(m.revenue) AS total_revenue FROM Manufacturers AS m GROUP BY m.name
SELECT COUNT(*) AS product_count FROM Products WHERE Manufacturer <> 7570016907
SELECT COUNT(*) AS number_of_products FROM Products WHERE Manufacturer <> 7570010900
SELECT Manufacturers.name FROM Manufacturers WHERE NOT Manufacturers.name ILIKE '%DVD%'
SELECT Manufacturers.name FROM Manufacturers WHERE NOT Manufacturers.name ILIKE '%DVD%'
SELECT Products.Name FROM Products
SELECT Products.Name FROM Products
SELECT p.name, p.price FROM Products AS p
SELECT p.name, p.price FROM Products AS p
SELECT Products.Name FROM Products WHERE Products.Price <= 200
SELECT Products.Name FROM Products WHERE Products.Price <= 200
SELECT Products.Price FROM Products WHERE Products.Price BETWEEN 60 AND 120
SELECT Products.Price FROM Products WHERE (Products.Price >= 60 AND Products.Price <= 120)
 AVG(Products.Price) AS average_price FROM Products;
                        ``` AVG(Products.Price) AS average_price FROM Products;
                        ```SELECT AVG(Price) AS average_price FROM Products WHERE Manufacturer = 2
SELECT AVG(Price) AS average_price FROM Products WHERE Manufacturer = 2
SELECT COUNT(*) FROM Products WHERE Price >= 180
SELECT COUNT(*) FROM Products WHERE Price >= 180
SELECT Products.Name, Products.Price FROM Products WHERE Products.Price >= 180 ORDER BY Products.Price DESC NULLS LAST, Products.Name ASC NULLS FIRST
SELECT Products.Name, Products.Price FROM Products WHERE Products.Price >= 180 ORDER BY Products.Price DESC NULLS LAST, Products.Name ASC NULLS FIRST
SELECT Manufacturer, AVG(Price) AS average_price FROM Products GROUP BY Manufacturer
SELECT Manufacturer, AVG(Price) AS average_price FROM Products GROUP BY Manufacturer
SELECT Products.Name, Products.Price FROM Products ORDER BY Products.Price ASC NULLS FIRST LIMIT 1
SELECT Products.Name, Products.Price FROM Products ORDER BY Products.Price ASC NULLS FIRST LIMIT 1
SELECT Products.Code, Products.Price FROM Products WHERE Products.Code IN (SELECT Category.Product_Code FROM Products GROUP BY Category.Product_Code HAVING COUNT(Category.Product_Code) = 1)
SELECT Products.Code, Products.Name FROM Products WHERE Products.Price = (SELECT MIN(Products.Price) FROM Products GROUP BY Products.Category)
SELECT MAX(problem_log.problem_id) AS latest_problem_id FROM Problem_Log
SELECT MAX(problem_log.problem_id) AS latest_problem_id FROM Problem_Log
SELECT MIN(problem_log_id) AS min_problem_log_id, MIN(problem_id) AS min_problem_id FROM Problem_Log
SELECT Problem_Log.problem_log_id, Problem_Log.problem_id FROM Problem_Log ORDER BY Problem_Log.problem_log_id ASC NULLS FIRST LIMIT 1
SELECT Problem_Log.problem_id, Problem_Log.log_entry_date FROM Problem_Log WHERE Problem_Log.problem_id = 10
SELECT p.problem_id, TO_CHAR(p.log_entry_date, 'YYYY-MM-DD') AS log_entry_date FROM Problem_Log AS p WHERE p.problem_id = 10
SELECT p.problem_id, p.log_entry_description FROM Problem_Log AS p
SELECT p.problem_id, pl.log_entry_description FROM Problem_Log JOIN Problem_Log AS p ON p.problem_id = pl.problem_id
 SELECT p.problem_id FROM Problems p WHERE p.date_problem_reported > '1978-06-26'
                        ```SELECT p.problem_id FROM Problems AS p WHERE p.date_problem_reported > '1978-06-26'
SELECT p.problem_id FROM Problems AS p WHERE p.date_problem_reported < '1978-06-26' ORDER BY p.date_problem_reported
 SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26'
                        ```SELECT Product.product_name FROM Product ORDER BY Product.product_name ASC NULLS FIRST
SELECT Product.product_name FROM Product ORDER BY Product.product_name ASC NULLS FIRST
SELECT Product.product_id, Product.product_name FROM Product ORDER BY Product.product_id
SELECT Product.product_id, Product.product_name FROM Product ORDER BY Product.product_id
SELECT COUNT(*) AS num_branches FROM branch WHERE CAST(membership_amount AS FLOAT) > (SELECT AVG(CAST(membership_amount AS FLOAT)) FROM branch)
SELECT COUNT(*) FROM branch WHERE CAST(membership_amount AS FLOAT) > (SELECT AVG(CAST(membership_amount AS FLOAT)) FROM branch)
SELECT branch.name, branch.address_road, branch.city FROM branch ORDER BY branch.open_year ASC NULLS FIRST
SELECT branch.name, branch.address_road, branch.city FROM branch ORDER BY CAST(branch.open_year AS INT) NULLS FIRST
SELECT branch.name, COUNT(branch.membership_amount) AS member_count FROM branch GROUP BY branch.name ORDER BY member_count DESC NULLS LAST LIMIT 3
SELECT branch.name FROM branch GROUP BY branch.name ORDER BY COUNT(branch.membership_amount) DESC NULLS LAST LIMIT 3
SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) >= 100
SELECT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100 GROUP BY branch.city
SELECT DISTINCT branch.open_year FROM branch WHERE branch.branch_id IN (SELECT branch_id FROM branch GROUP BY branch_id HAVING COUNT(branch_id) >= 2)
SELECT DISTINCT branch.open_year FROM branch GROUP BY branch.open_year HAVING COUNT(branch.branch_id) >= 2
SELECT MIN(branch.membership_amount) AS min_membership_amount, MAX(branch.membership_amount) AS max_membership_amount FROM branch WHERE (branch.open_year = '2011' OR branch.city = 'London')
SELECT MIN(branch.membership_amount), MAX(branch.membership_amount) FROM branch WHERE (branch.open_year = '2011' OR branch.city ILIKE '%London%')
SELECT branch.city, COUNT(*) AS total_branches FROM branch WHERE CAST(branch.open_year AS INT) < 2010 GROUP BY branch.city
SELECT branch.city, COUNT(*) AS number_of_branches FROM branch WHERE CAST(branch.open_year AS INT) < 2010 GROUP BY branch.city
SELECT COUNT(DISTINCT level) AS number_of_levels FROM member
SELECT member.level FROM member GROUP BY member.level
SELECT member.card_number, member.name, member.hometown FROM member ORDER BY member.level DESC NULLS LAST
SELECT member.card_number, member.name, member.hometown FROM member ORDER BY member.level DESC NULLS LAST
SELECT member.level, COUNT(member.member_id) AS total_members FROM member GROUP BY member.level ORDER BY total_members DESC NULLS LAST LIMIT 1
SELECT member.level, COUNT(member.member_id) AS total_members FROM member GROUP BY member.level ORDER BY total_members DESC NULLS LAST LIMIT 1
SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT branch.member_id FROM member)
SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT branch.member_id FROM member)
SELECT b.name, b.city FROM branch AS b LEFT JOIN member_branch ON mf.branch_id = b.branch_id WHERE mf.membership_amount IS NULL
SELECT branch.name, branch.city FROM branch WHERE branch.membership_amount IS NULL
SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.open_year AS INT) = 2001 AND CAST(branch.membership_amount AS FLOAT) > 100
SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.open_year AS INT) = 2001 AND CAST(branch.membership_amount AS FLOAT) > 100
SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100
SELECT DISTINCT branch.city FROM branch WHERE CAST(branch.membership_amount AS FLOAT) > 100
SELECT member.card_number FROM member WHERE member.hometown ILIKE '%Kentucky%'
SELECT member.card_number FROM member WHERE member.hometown = 'Kentucky'
SELECT COUNT(*) AS total_students FROM Student
SELECT COUNT(*) AS total_students FROM Student
SELECT COUNT(*) AS total_voting_records FROM Voting_record
SELECT COUNT(*) AS total_voting_records FROM Voting_record
SELECT COUNT(DISTINCT President_Vote) AS total_president_votes FROM Voting_record
SELECT COUNT(DISTINCT President_Vote) AS total_president_votes FROM Voting_record
SELECT MAX(Age) FROM Student
SELECT MAX(Age) AS oldest_age FROM Student
SELECT Student.LName FROM Student WHERE Student.Major = 50
SELECT Student.LName FROM Student WHERE Student.Major = 50
SELECT Student.Fname FROM Student WHERE Student.Age > '22'
SELECT Student.Fname FROM Student WHERE Student.Age > '22'
SELECT Student.Major FROM Student WHERE Student.Sex = 'M'
SELECT s.fname, s.lname, m.major FROM student JOIN Student AS m ON s.major = m.age WHERE sex = 'M'
SELECT AVG(Age) FROM Student WHERE Sex = 'F'
SELECT AVG(Student.Age) FROM Student WHERE Student.Sex = 'female'
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM Student WHERE "Major" = '600'
SELECT MIN(Student.Age) AS min_age, MAX(Student.Age) AS max_age FROM Student WHERE Student.Major = 600
SELECT Student.Fname, Student.LName FROM Student WHERE Student.city_code = 'BAL'
SELECT Student.Advisor FROM Student WHERE Student.city_code = 'BAL'
 SELECT COUNT(DISTINCT Secretary_Vote) AS total_votes FROM Voting_record WHERE "Election Cycle" ILIKE '%fall%'
                        ``` SELECT DISTINCT Secretary_Vote FROM Voting_record WHERE "Election Cycle" ILIKE '%fall%'
                        ```SELECT COUNT(DISTINCT President_Vote) AS total_president_votes FROM Voting_record WHERE "Election Cycle" ILIKE '%2015%' AND "Registration Date" ILIKE '%08/30/%'
SELECT President_Vote FROM Voting_record WHERE "Election Cycle" ILIKE '%2015%' AND "Registration Date" ILIKE '%08/30/%'
SELECT vowing_record.registration_date, vowing_record.election_cycle FROM Voting_record GROUP BY vowing_record.registration_date, vowing_record.election_cycle
SELECT Registration_Date, Election_Cycle FROM Voting_record GROUP BY Registration_Date, Election_Cycle
SELECT President_Vote AS "President's Vote", Vice_President_Vote AS "Vice-President's Vote" FROM Voting_record
SELECT President_Vote AS "President Votes", Vice_President_Vote AS "Vice President Votes" FROM Voting_record
SELECT s.advisor, COUNT(*) AS total_students FROM Student AS s GROUP BY s.advisor
SELECT a.lname AS advisor_name, COUNT(s.stuID) AS number_of_students FROM Student AS a JOIN student ON a.fname = s.advisor GROUP BY a.lname
SELECT s.fname, s.lname FROM Student AS s WHERE s.advisor > 2
SELECT Student.Advisor FROM Student GROUP BY Student.Advisor HAVING COUNT(Student.StuID) > 2
SELECT Major FROM Student GROUP BY Major HAVING COUNT(Major) < 3
SELECT Major FROM Student GROUP BY Major HAVING COUNT(StuID) < 3
SELECT v.election_cycle, COUNT(*) AS total_voting_records FROM Voting_record AS v GROUP BY v.election_cycle
SELECT v.election_cycle, COUNT(*) AS total_votes FROM Voting_record AS v GROUP BY v.election_cycle
SELECT m.fname, COUNT(*) AS student_count FROM student JOIN Student AS m ON s.major = m.city_code GROUP BY m.fname ORDER BY student_count DESC NULLS LAST LIMIT 1
SELECT Student.Major FROM Student GROUP BY Student.Major ORDER BY COUNT(Student.Major) DESC NULLS LAST LIMIT 1
SELECT Student.Major FROM Student WHERE Student.Sex = 'F' GROUP BY Student.Major ORDER BY COUNT(Student.Major) DESC NULLS LAST LIMIT 1
SELECT Student.Major FROM Student WHERE Student.Sex = 'Female' GROUP BY Student.Major ORDER BY COUNT(Student.Major) DESC NULLS LAST LIMIT 1
SELECT Student.city_code FROM Student GROUP BY Student.city_code ORDER BY COUNT(Student.city_code) DESC NULLS LAST LIMIT 1
SELECT Student.city_code FROM Student GROUP BY Student.city_code ORDER BY COUNT(Student.city_code) DESC NULLS LAST LIMIT 1
SELECT DISTINCT Student.Advisor FROM Student GROUP BY Student.Advisor HAVING COUNT(Student.Advisor) > 2
SELECT s.advisor FROM Student AS s GROUP BY s.advisor HAVING COUNT(s.advisor) > 2

COUNT(Products.product_id) AS total_products FROM Products;
                        
                        ```SELECT COUNT(*) AS total_products FROM Products
SELECT COUNT(DISTINCT color_code) AS number_of_colors FROM Ref_Colors
SELECT COUNT(DISTINCT color_code) AS number_of_colors FROM Ref_Colors
SELECT COUNT(characteristic_name) AS number_of_characteristics FROM Characteristics
SELECT COUNT(characteristic_id) AS number_of_characteristics FROM Characteristics
SELECT p.product_name, CAST(p.typical_buying_price AS FLOAT) AS typical_buying_price FROM Products AS p
SELECT p.product_name, CAST(p.typical_buying_price AS FLOAT) AS typical_buying_price FROM Products AS p
SELECT Ref_Colors.color_description FROM Ref_Colors
SELECT ref_colors.color_description FROM Ref_Colors
SELECT Characteristics.characteristic_name FROM Characteristics
SELECT Characteristics.characteristic_name FROM Characteristics GROUP BY Characteristics.characteristic_name
SELECT Products.product_name FROM Products WHERE Products.product_category_code ILIKE '%Spices%'
SELECT product_name FROM Products WHERE product_category_code = 'Spices'
SELECT COUNT(product_id) AS product_count FROM Products WHERE product_category_code ILIKE '%Seeds%'
SELECT COUNT(product_id) AS product_count FROM Products WHERE product_category_code ILIKE '%Seeds%'
SELECT COUNT(*) FROM Products WHERE product_category_code = 'Spices' AND CAST(typical_selling_price AS FLOAT) > 1000
SELECT COUNT(*) FROM Products WHERE product_category_code = 'Spices' AND CAST(typical_buying_price AS FLOAT) > 1000
 SELECT Products.product_category_code, CAST(Products.typical_buying_price AS FLOAT) AS typical_buying_price FROM Products WHERE Products.product_name ILIKE '%cumin%'
                        ```SELECT Products.product_category_code, AVG(CAST(Products.typical_selling_price AS FLOAT)) AS average_price FROM Products WHERE product_name ILIKE '%cumin%' GROUP BY Products.product_category_code
SELECT Products.product_category_code FROM Products WHERE Products.product_name ILIKE '%flax%' LIMIT 1
SELECT Products.product_category_code FROM Products WHERE Products.product_name ILIKE '%flax%'
SELECT Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code ILIKE '%Hersheys%'
SELECT Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_description ILIKE '%herb%'
SELECT Ref_Product_Categories.product_category_description FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code = 'Spices'
SELECT Ref_Product_Categories.product_category_description FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code = 'Spices'
SELECT Ref_Product_Categories.product_category_description, Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE Ref_Product_Categories.product_category_code = 'Herfs'
SELECT Ref_Product_Categories.product_category_description, Ref_Product_Categories.unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herfs'
SELECT Characteristics.characteristic_name, Characteristics.other_characteristic_details, Characteristics.characteristic_data_type FROM Characteristics WHERE NOT Characteristics.characteristic_id IN (SELECT ProductCharacteristics.characteristic_id FROM ProductCharacteristics)
SELECT Characteristics.characteristic_name, Characteristics.other_characteristic_details, Characteristics.characteristic_data_type FROM Characteristics LEFT JOIN Products ON Characteristics.characteristic_id = Products.characteristic_type_code WHERE Products.characteristic_type_code IS NULL
0
                        ```SELECT COUNT(DISTINCT ref_colors.color_code) AS number_of_colors FROM ref_colors LEFT JOIN Ref_Colors ON ref_colors.color_code = product_colors.color_code WHERE product_colors.color_code IS NULL
SELECT COUNT(*) AS event_count FROM event
SELECT event.year, event.name FROM event ORDER BY event.year DESC NULLS LAST
SELECT event.name FROM event WHERE event.year = (SELECT MAX(event.year) FROM event)
SELECT COUNT(*) AS total_stadium FROM stadium
SELECT s.name FROM stadium AS s WHERE s.capacity = (SELECT MAX(s2.capacity) FROM stadium AS s2)
SELECT s.name FROM stadium AS s WHERE s.capacity < (SELECT AVG(capacity) FROM stadium)
SELECT c.name AS Country_name, COUNT(*) AS total_stadium FROM stadium AS c GROUP BY c.name ORDER BY total_stadium DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_stadium, c.name AS country_name FROM stadium JOIN stadium AS c ON s.country = c.city GROUP BY c.name HAVING COUNT(s.id) >= 3
SELECT DISTINCT COALESCE(g.country, s.country) AS country FROM stadium AS g JOIN stadium AS s ON (g.id <> s.id AND g.capacity > 60000 AND s.capacity < 50000)
SELECT COUNT(DISTINCT City) AS number_of_cities FROM stadium WHERE Opening_year < 2006
SELECT c.name AS country_name, COUNT(*) AS total_stadium FROM stadium AS c JOIN stadium ON c.id = f.country GROUP BY c.name
SELECT DISTINCT COUNTRY.country FROM stadium JOIN STADIUM ON COUNTRY.ID <> STADIUM.COUNTRY WHERE STADIUM.OPENING_YEAR <= 2006
SELECT COUNT(*) FROM stadium WHERE country <> 'Russia'
SELECT swimmer.name FROM swimmer ORDER BY swimmer.meter_100 ASC NULLS FIRST
SELECT COUNT(DISTINCT swimmer.nationality) FROM swimmer
SELECT DISTINCT s.nationality FROM swimmer AS s GROUP BY s.nationality HAVING COUNT(s.id) > 1
SELECT swimmer.meter_200, swimmer.meter_300 FROM swimmer WHERE swimmer.nationality ILIKE '%Australia%' ORDER BY swimmer.meter_200, swimmer.meter_300
SELECT s.name FROM Stadium LEFT JOIN stadium AS e ON s.id = e.city WHERE e.city IS NULL
SELECT swimmer.name FROM swimmer WHERE swimmer.id IS NULL
SELECT s.name, CAST(s.meter_100 AS FLOAT) / NULLIF(MAX(s.meter_100), 0) AS ratio FROM swimmer AS s GROUP BY s.name
SELECT AVG(capacity) AS average_capacity FROM stadium WHERE opening_year = 2005

COUNT(railway.railway_id) AS number_of_railways FROM railway;
                        
                        ```SELECT Railway.Builder FROM railway ORDER BY Railway.Builder ASC NULLS FIRST
SELECT railway.wheels, railway.location FROM railway
SELECT MAX(manager.level) AS highest_level FROM manager WHERE manager.country <> 'Australia'
SELECT AVG(manager.age) AS average_age FROM manager
SELECT manager.name FROM manager ORDER BY manager.level ASC NULLS FIRST
SELECT t.name, TO_TIMESTAMP(CAST(t.arrival AS TEXT)) AS arrival_time FROM train AS t
SELECT manager.name FROM manager ORDER BY manager.age ASC NULLS FIRST LIMIT 1
SELECT railway.builder, COUNT(railway.railway_id) AS COUNT FROM railway GROUP BY railway.builder ORDER BY COUNT DESC NULLS LAST
SELECT railway.builder FROM railway GROUP BY railway.builder ORDER BY COUNT(railway.builder) DESC NULLS LAST LIMIT 1
SELECT railway.location, COUNT(railway.railway_id) AS number_of_railways FROM railway GROUP BY railway.location ORDER BY number_of_railways DESC NULLS LAST
SELECT railway.location FROM railway GROUP BY railway.location HAVING COUNT(railway.railway_id) > 1
SELECT COUNT(*) AS total_railways FROM railway WHERE NOT railway_id IN (SELECT railway_id FROM train)
SELECT DISTINCT manager.country FROM manager WHERE (manager.age > 50 AND manager.age < 46)
SELECT DISTINCT manager.country FROM manager
SELECT manager.manager_id, (CAST(manager.level AS FLOAT)) / NULLIF((CAST(manager.age AS FLOAT)), 0) AS level_to_year_ratio FROM manager WHERE country = 'Czechia' ORDER BY level_to_year_ratio DESC NULLS LAST
SELECT manager.country FROM manager WHERE (manager.age > 50 OR manager.age < 46) GROUP BY manager.country
SELECT COUNT(*) AS number_of_addresses FROM Addresses WHERE country = 'USA'
SELECT DISTINCT Addresses.city FROM Addresses
SELECT Addresses.state_province_county, COUNT(Addresses.address_id) AS address_count FROM Addresses GROUP BY Addres.state_province_county
SELECT customers.customer_name, customers.customer_phone FROM Customers WHERE customers.customer_address IS NULL
SELECT DISTINCT Products.product_type_code FROM Products GROUP BY Products.product_type_code HAVING COUNT(Products.product_id) >= 2
SELECT Customers.customer_name, Customers.customer_phone, Customers.payment_method_code FROM Customers ORDER BY Customers.customer_number DESC NULLS LAST
SELECT MIN(product_price) AS min_price, MAX(product_price) AS max_price, AVG(product_price) AS avg_price FROM Products
SELECT COUNT(*) AS number_of_products FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT Products.product_type_code, Products.product_name FROM Products WHERE Products.product_price > 1000 OR Products.product_price < 500
SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender = 'F'
SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender = 'female'
SELECT dorm_name FROM Dorm WHERE student_capacity > '300'
SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.student_capacity > '300'
SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < CAST(25 AS FLOAT)
SELECT COUNT(*) FROM Student WHERE Sex = 'girl' AND Age < CAST(25 AS FLOAT)
SELECT Student.Fname FROM Student WHERE Student.Age < '20'
SELECT Student.Fname FROM Student WHERE Student.Age > '20'
SELECT Student.Fname FROM Student WHERE Student.city_code = 'PHL' AND Student.Age BETWEEN 20 AND 25
SELECT Student.Fname FROM Student WHERE (Student.Age >= 20 AND Student.Age <= 25) AND (Student.city_code = 'PHL')

COUNT(dormid) AS number_of_dorms FROM Dorm;
                        
                        ```
COUNT(Dorm.dormid) AS number_of_dorms FROM Dorm;
                        
                        ```SELECT COUNT(DISTINCT dorm_amenity.amenity_name) AS number_of_amenities FROM Dorm_amenity
SELECT COUNT(DISTINCT Dorm_amenity.amenity_name) AS number_of_dorm_amenities FROM Dorm_amenity
SELECT SUM(student_capacity) AS total_capacity FROM Dorm
SELECT SUM(student_capacity) AS total_student_capacity FROM Dorm
SELECT COUNT(*) AS total_students FROM Student
COUNT(Student.Age) AS total_students
SELECT Student.city_code, AVG(Student.Age) AS average_age FROM Student GROUP BY Student.city_code
SELECT Student.city_code AS City, AVG(Student.Age) AS Average_Age FROM Student GROUP BY Student.city_code ORDER BY Average_Age DESC NULLS LAST
SELECT AVG(student_capacity), SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X'
SELECT AVG(student_capacity), SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X'
SELECT COUNT(DISTINCT dormid) AS num_dorms FROM Has_amenity
SELECT COUNT(DISTINCT dormid) AS number_of_dorms FROM Has_amenity
SELECT Dorm.dorm_name FROM Dorm WHERE NOT Dorm.dorm_name IN (SELECT Amenity.dorm_name FROM Dorm)
SELECT Dorm.dorm_name FROM Dorm WHERE NOT Dorm.dorm_name IN (SELECT Amenity.dorm_name FROM Dorm)
SELECT DISTINCT gender FROM Dorm
SELECT gender FROM Dorm GROUP BY gender
SELECT Dorm.student_capacity, Dorm.gender FROM Dorm WHERE Dorm.dorm_name ILIKE '%Donor%'
SELECT Dorm.student_capacity, Dorm.gender FROM Dorm WHERE "dorm_name" ILIKE '%Donor%in%it%'
SELECT Dorm.dorm_name, Dorm.gender FROM Dorm WHERE (Dorm.student_capacity > 300 OR Dorm.student_capacity < 100)
SELECT Dorm.dorm_name, CASE WHEN Dorm.student_capacity > 300 THEN 'Large' ELSE 'Small' END AS dorm_type FROM Dorm WHERE Dorm.student_capacity > 300 OR Dorm.student_capacity < 100
SELECT Student.Major AS major, Student.city_code AS city FROM Student GROUP BY Student.Major, Student.city_code
SELECT Student.Major AS major, Student.city_code AS city_code, COUNT(*) AS total_students FROM Student GROUP BY major, city_code
SELECT Student.LName FROM Student WHERE (Student.Sex = 'F' AND Student.city_code = 'BAL') OR (Student.Sex = 'M' AND Student.Age < 20)
SELECT Student.LName FROM Student WHERE (Student.Sex = 'Female' OR Student.city_code = 'BAL') AND Student.Age < 20
SELECT Dorm.dorm_name FROM Dorm ORDER BY Dorm.student_capacity DESC NULLS LAST LIMIT 1
SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC NULLS LAST LIMIT 1
SELECT Dorm_amenity.amenity_name FROM Dorm_amenity GROUP BY Dorm_amenity.amenity_name ORDER BY Dorm_amenity.amenity_name ASC NULLS FIRST
SELECT Dorm_amenity.amenity_name FROM Dorm_amenity ORDER BY Dorm_amenity.amenity_name ASC NULLS FIRST
SELECT Student.city_code, COUNT(Student.city_code) AS frequency FROM Student GROUP BY Student.city_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code ORDER BY total_students DESC NULLS LAST LIMIT 1
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age < (SELECT AVG(Student.Age) FROM Student)
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Age < (SELECT AVG(Student.Age) FROM Student)
SELECT Student.Fname, Student.LName FROM Student WHERE Student.city_code <> 'HKG' ORDER BY Student.Age
SELECT Student.Fname, Student.LName FROM Student WHERE Student.city_code <> 'HKG' ORDER BY Student.Age
SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender
SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender
SELECT Sex, AVG(Age) AS average_age, MIN(Age) AS min_age FROM Student GROUP BY Sex
SELECT Student.Sex, AVG(Student.Age) AS average_age, MIN(Student.Age) AS min_age FROM Student GROUP BY Student.Sex
SELECT Major, COUNT(*) AS total_students FROM Student GROUP BY Major
SELECT Major, COUNT(*) AS total_students FROM Student GROUP BY Major
SELECT Student.city_code, COUNT(Student.StuID) AS total_students, AVG(Student.Age) AS average_age FROM Student GROUP BY Student.city_code
SELECT Student.city_code, COUNT(Student.StuID) AS total_students, AVG(Student.Age) AS average_age FROM Student GROUP BY Student.city_code
SELECT Student.city_code, AVG(Student.Age) AS average_age, COUNT(IFF(Student.Sex = 'M', *, NULL)) AS male_students_count FROM Student GROUP BY Student.city_code
SELECT Student.city_code, AVG(Student.Age) AS average_age, COUNT(CASE WHEN Student.Sex = 'Male' THEN 1 END) AS male_students FROM Student GROUP BY Student.city_code
SELECT Student.city_code, COUNT(Student.StuID) AS num_students FROM Student GROUP BY Student.city_code HAVING COUNT(Student.StuID) > 1
SELECT Student.city_code, COUNT(Student.StuID) AS total_students FROM Student GROUP BY Student.city_code HAVING COUNT(Student.StuID) > 1
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Major <> (SELECT MAX(Student.Major) FROM Student)
SELECT Student.Fname, Student.LName FROM Student WHERE Student.Major <> (SELECT MAX(Student.Major) FROM Student)
SELECT Student.Sex, COUNT(*) AS num_students FROM Student GROUP BY Student.Sex HAVING AVG(Student.Age) > Student.Age
SELECT Student.Sex, COUNT(*) AS total_students FROM Student GROUP BY Student.Sex HAVING AVG(Student.Age) > 25
SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender <> 'Male' AND Dorm.gender <> 'Female'
SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender <> 'Male' AND Dorm.gender <> 'Female'
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(*) AS total_customers FROM Customers
SELECT Customers.email_address, Customers.phone_number FROM Customers ORDER BY Customers.email_address ASC NULLS FIRST, Customers.phone_number ASC NULLS FIRST
SELECT Customers.email_address, Customers.phone_number FROM Customers ORDER BY Customers.email_address ASC NULLS FIRST, Customers.phone_number ASC NULLS FIRST
SELECT Customers.town_city FROM Customers WHERE Customers.customer_type_code = 'good credit rating' GROUP BY Customers.town_city ORDER BY COUNT(Customers.customer_id) ASC LIMIT 1
SELECT Customers.town_city FROM Customers WHERE Customers.customer_type_code = 'good credit rating' ORDER BY COUNT(Customers.customer_id) ASC NULLS FIRST LIMIT 1
SELECT Customers.email_address, Customers.phone_number FROM Customers WHERE NOT Customers.customer_id IN (SELECT customer_id FROM Customers)
SELECT Customers.email_address, Customers.phone_number FROM Customers WHERE NOT customer_id IN (SELECT customer_type_code FROM Customers)
SELECT Customers.phone_number FROM Customers
SELECT Customers.phone_number FROM Customers UNION ALL SELECT Staff.phone_number FROM Staff
SELECT Products.product_description FROM Products WHERE Products.product_name ILIKE '%chocolate%'
SELECT Products.product_description FROM Products WHERE Products.product_name ILIKE '%Chocolate%'
SELECT p.product_name, c.product_description FROM Products JOIN Products AS c ON p.product_category_code = c.product_id ORDER BY p.product_price DESC NULLS LAST LIMIT 1
SELECT Products.product_name, Products.product_category_code FROM Products WHERE Products.product_price = (SELECT MAX(Products.product_price) FROM Products)
SELECT Products.product_price FROM Products WHERE NOT Products.product_id IN (SELECT Complaints.product_id FROM Products)
SELECT Products.product_price FROM Products WHERE NOT Products.product_id IN (SELECT Complaints.product_id FROM Products)
SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code
SELECT Products.product_category_code, AVG(Products.product_price) AS average_price FROM Products GROUP BY Products.product_category_code
SELECT complaints.complaint_status_code FROM Complaints WHERE NOT complaints.product_id IS NULL GROUP BY complaints.complaint_status_code HAVING COUNT(complaints.product_id) > 3
SELECT complaints.complaint_status_code FROM Complaints GROUP BY complaints.complaint_status_code HAVING COUNT(complaints.complaint_id) > 3
SELECT Staff.last_name FROM Staff WHERE Staff.email_address ILIKE '%wrau%'
SELECT Staff.last_name FROM Staff WHERE Staff.email_address ILIKE '%wrau%'
SELECT customers.customer_type_code, COUNT(customers.customer_id) AS total_customers FROM Customers GROUP BY customers.customer_type_code ORDER BY total_customers DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_customers FROM Customers GROUP BY customer_type_code ORDER BY total_customers DESC NULLS LAST LIMIT 1
SELECT COUNT(DISTINCT complaints.complaint_type_code) AS number_of_complaint_type_codes FROM Complaints
SELECT COUNT(DISTINCT complaints.complaint_type_code) AS number_of_complaint_type_codes FROM Complaints
SELECT customers.address_line_1, customers.address_line_2 FROM Customers WHERE customers.email_address = 'vbogisich@example.org'
SELECT Customers.address_line_1, Customers.address_line_2 FROM Customers WHERE Customers.email_address ILIKE '%vbogisich@example.org%' LIMIT 1
SELECT complaints.complaint_status_code, COUNT(*) AS total_complaints FROM Complaints WHERE complaints.product_id IS NULL AND complaints.complaint_type_code ILIKE '%Product%Failure%' GROUP BY complaints.complaint_status_code
SELECT complaints.complaint_status_code, COUNT(*) AS complaint_count FROM Complaints WHERE complaints.complaint_type_code ILIKE '%Product%Failure%' GROUP BY complaints.complaint_status_code
SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC NULLS LAST LIMIT 1
SELECT Customers.state, COUNT(Customers.customer_id) AS customer_count FROM Customers GROUP BY Customers.state ORDER BY customer_count DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_submissions FROM submission
SELECT COUNT(*) AS total_submissions FROM submission
SELECT submission.author FROM submission ORDER BY submission.scores ASC NULLS FIRST
SELECT submission.author, submission.scores FROM submission ORDER BY submission.scores ASC NULLS FIRST
SELECT submission.author, submission.college FROM submission ORDER BY submission.author
SELECT sub.author, sub.college FROM submission AS sub
SELECT submission.author FROM submission WHERE submission.college IN ('Florida', 'Temple')
SELECT submission.author FROM submission WHERE (submission.college = 'Florida' OR submission.college = 'Temple') GROUP BY submission.author
SELECT AVG(scores) AS average_score FROM submission
SELECT AVG(scores) AS average_score FROM submission
SELECT submission.author FROM submission ORDER BY submission.scores DESC NULLS LAST LIMIT 1
SELECT submission.author FROM submission WHERE submission.scores = (SELECT MAX(submission.scores) FROM submission)
SELECT college, COUNT(author) AS author_count FROM submission GROUP BY college ORDER BY author_count DESC NULLS LAST
SELECT submission.college, COUNT(DISTINCT submission.author) AS author_count FROM submission GROUP BY submission.college
SELECT submission.college FROM submission GROUP BY submission.college ORDER BY COUNT(submission.college) DESC NULLS LAST LIMIT 1
SELECT submission.college, COUNT(DISTINCT submission.author) AS author_count FROM submission GROUP BY submission.college ORDER BY author_count DESC NULLS LAST LIMIT 1
SELECT DISTINCT college FROM submission WHERE (college, author) IN (SELECT college, author FROM submission WHERE scores > 90) AND (college, author) IN (SELECT college, author FROM submission WHERE scores < 80)
SELECT college FROM submission WHERE (Scores > 90 AND Scores < 80) GROUP BY college HAVING COUNT(*) > 1
SELECT workshop.date, workshop.venue FROM workshop ORDER BY workshop.venue ASC NULLS FIRST
SELECT workshop.date, workshop.venue FROM workshop ORDER BY workshop.venue ASC NULLS FIRST
SELECT author FROM submission WHERE author IS NULL
SELECT author FROM submission WHERE NOT author IN (SELECT submission.author FROM submission)
SELECT COUNT(*) AS total_investors FROM Investors
SELECT Investors.investor_details FROM Investors
SELECT lots.lot_details FROM Lots
SELECT MAX(amount_of_transaction) AS max_transaction_amount FROM Transactions
SELECT date_of_transaction, CAST(share_count AS FLOAT) FROM Transactions
SELECT CAST(SUM(transaction_id) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Transactions), 0) AS fraction_of_transactions_to_investors_ratio FROM transactions
SELECT Transactions.transaction_id FROM Transactions WHERE Transactions.transaction_type_code ILIKE '%PUR%'
 SELECT date_of_transaction FROM Transactions WHERE transaction_type_code = 'Sale'
                        ```SELECT AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions WHERE transaction_type_code ILIKE '%Sale%'
SELECT Ref_Transaction_Types.transaction_type_description FROM Ref_Transaction_Types WHERE Ref_Transaction_Types.transaction_type_code ILIKE '%PUR%'
SELECT MIN(amount_of_transaction) AS min_amount FROM Transactions WHERE transaction_type_code = 'PUR' AND CAST(share_count AS FLOAT) > 50
SELECT MAX(transactions.share_count) AS max_share_count FROM Transactions WHERE transactions.amount_of_transaction < 10000
 SELECT date_of_transaction FROM Transactions WHERE (share_count::float > 100 OR amount_of_transaction > 1000)
                        ```SELECT COUNT(DISTINCT transaction_type_code) AS number_of_transaction_types FROM Transactions
SELECT lots.lot_id, lots.investor_id, lots.lot_details FROM Lots
SELECT transaction_type_code, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY transaction_type_code
SELECT transaction_type_code, MAX(share_count) AS max_share_count, MIN(share_count) AS min_share_count FROM Transactions GROUP BY transaction_type_code
SELECT investor_id, AVG(share_count) AS average_share_count FROM Transactions GROUP BY investor_id
SELECT investor_id, AVG(CAST(share_count AS FLOAT)) AS average_share_count FROM Transactions GROUP BY investor_id ORDER BY average_share_count DESC NULLS LAST
SELECT investor_id, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY investor_id
SELECT investor_id, COUNT(transaction_id) AS number_of_transactions FROM Transactions WHERE transaction_type_code = 'Sale' AND amount_of_transaction > 0 GROUP BY investor_id
SELECT investor_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY investor_id
SELECT transactions.transaction_type_code FROM Transactions GROUP BY transactions.transaction_type_code ORDER BY COUNT(transactions.transaction_type_code) ASC LIMIT 1
SELECT Transactions.transaction_type_code, COUNT(*) AS frequency FROM Transactions GROUP BY Transactions.transaction_type_code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Transactions.date_of_transaction FROM Transactions WHERE (CAST(Transactions.share_count AS FLOAT) >= 100 OR Transactions.amount_of_transaction > 100) AND Transactions.transaction_type_code ILIKE '%buyer%'
 SELECT CAST(sales.sales_transaction_id AS FLOAT) / CAST(purchases.purchase_transaction_id AS FLOAT) AS ratio FROM sales JOIN purchases ON sales.sales_details = purchases.purchase_details;
                        ```SELECT lots.lot_details FROM Lots WHERE NOT lots.lot_id IN (SELECT transaction.lot_id FROM transaction)
SELECT COUNT(*) AS total_hotels FROM Hotels
SELECT COUNT(*) AS total_hotels FROM Hotels
SELECT price_range FROM Hotels ORDER BY price_range
SELECT price_range FROM Hotels
SELECT DISTINCT Locations.Location_Name FROM Locations
SELECT Locations.Location_Name FROM Locations
SELECT s.name, s.other_details FROM Staff AS s
SELECT s.name, sd.other_details FROM Staff AS s JOIN Staff_Detail ON s.staff_id = sd.staff_id
SELECT v.tourist_id, v.tourist_details FROM Visitors AS v
SELECT v.tourist_details AS visitor_detail FROM Visitors AS v
SELECT MIN(price_range) AS lowest_price_range, MAX(price_range) AS highest_price_range FROM Hotels WHERE star_rating_code = '5'
SELECT Hotels.price_range FROM Hotels WHERE Hotels.star_rating_code = '5' ORDER BY Hotels.price_range LIMIT 5
SELECT AVG(price_range) AS average_price FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Y'
SELECT AVG(price_range) AS average_price FROM Hotels WHERE pets_allowed_yn = 'Y' AND star_rating_code = '5'
 SELECT Locations.Address FROM Locations WHERE "Location Name" ILIKE '%Science%Gallery%'
                        ``` SELECT Locations.Address FROM Locations WHERE "Location Name" ILIKE '%"Science%Gallery"%'
                        ```SELECT Locations.Other_Details FROM Locations WHERE Locations.Location_Name ILIKE '%UK%gallery%'
SELECT Locations.Other_Details FROM Locations WHERE Locations.Location_Name ILIKE '%Japanese%Gallery%' AND Locations.Location_Name ILIKE '%Japan%'
SELECT Locations.Location_Name FROM Locations WHERE Locations.Location_Name ILIKE '%film%'
SELECT Locations.Location_Name FROM Locations WHERE Locations.Location_Name ILIKE '%film%'
SELECT COUNT(DISTINCT Photos.Name) AS total_names FROM Photos
SELECT COUNT(DISTINCT Photos.name) AS num_names FROM Photos
SELECT Visit_Date FROM Visits GROUP BY Visit_Date
SELECT DISTINCT Visit_Date FROM Visits
SELECT ta.name FROM Tourist_Attractions AS ta JOIN transport_modes ON ta.attraction_type_code = tm.attraction_type_code WHERE tm.name ILIKE '%bus%'
SELECT ta.name FROM Tourist_Attractions AS ta JOIN transport_modes ON ta.tourist_attraction_id = tm.tourist_attraction_id WHERE tm.attraction_type_code = 'BUS'
SELECT ta.name, ta.opening_hours FROM Tourist_Attractions AS ta WHERE ta.how_to_get_there IN ('bus', 'walk')
SELECT ta.name, ta.opening_hours FROM Tourist_Attractions AS ta WHERE how_to_get_there ILIKE '%bus%' OR how_to_get_there ILIKE '%walk%'
SELECT star_rating_code, AVG(price_range) AS average_price FROM Hotels GROUP BY star_rating_code
SELECT star_rating_code, AVG(price_range) AS average_price_range FROM Hotels GROUP BY star_rating_code
SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn
SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn
SELECT hotels.hotel_id, CAST(hotels.star_rating_code AS FLOAT) AS star_rating FROM Hotels ORDER BY hotels.price_range ASC NULLS FIRST
SELECT hotels.hotel_id, CAST(hotels.star_rating_code AS FLOAT) AS star_rating FROM Hotels ORDER BY hotels.price_range ASC NULLS FIRST
SELECT Hotels.price_range, Hotels.star_rating_code, Hotels.other_hotel_details, Hotels.hotel_id, Hotels.pets_allowed_yn FROM Hotels ORDER BY Hotels.price_range DESC NULLS LAST LIMIT 3
SELECT Hotels.price_range, Hotels.star_rating_code, Hotels.other_hotel_details, Hotels.hotel_id, Hotels.pets_allowed_yn FROM Hotels ORDER BY Hotels.price_range DESC NULLS LAST LIMIT 3
SELECT Hotels.star_rating_code, AVG(Hotels.price_range) AS average_price FROM Hotels GROUP BY Hotels.star_rating_code ORDER BY Hotels.average_price ASC LIMIT 3
SELECT h.hotel_id, h.other_hotel_details, sr.star_rating_code FROM Hotels AS h JOIN Star_Ratings ON h.star_rating_code = sr.star_rating_code ORDER BY h.price_range ASC LIMIT 3
SELECT ta.attraction_type_code, COUNT(*) AS number_of_attractions FROM Tourist_Attractions AS ta GROUP BY ta.attraction_type_code ORDER BY number_of_attractions DESC NULLS LAST LIMIT 1
SELECT ta.attraction_type_code, CAST(COUNT(*) AS FLOAT) / location_id AS fraction FROM Tourist_Attractions AS ta JOIN (SELECT opening_hours, COUNT(*) AS count FROM transport_methods GROUP BY opening_hours) AS ts ON ta.tourist_attraction_id = ts.opening_hours GROUP BY ta.attraction_type_code ORDER BY fraction DESC NULLS LAST LIMIT 1
SELECT ta.attraction_type_code, COUNT(*) AS attraction_count FROM Tourist_Attractions AS ta GROUP BY ta.attraction_type_code
SELECT ta.how_to_get_there, COUNT(ta.attraction_type_code) AS attraction_count FROM Tourist_Attractions AS ta GROUP BY ta.how_to_get_there
SELECT COUNT(DISTINCT Visitors.tourist_id) AS number_of_visitors FROM Visitors
SELECT COUNT(*) AS total_tourists FROM Visitors WHERE NOT Tourist_Details ILIKE '%visited%'

COUNT(Video_Games.GameID) AS total_games FROM Video_Games;
                        
                        ```SELECT COUNT(*) AS game_count FROM Video_Games
SELECT COUNT(DISTINCT Video_Games.GType) AS number_of_game_types FROM Video_Games
SELECT COUNT(DISTINCT Video_Games.GType) AS number_of_game_types FROM Video_Games
SELECT Video_Games.GType FROM Video_Games
SELECT Video_Games.GType FROM Video_Games GROUP BY Video_Games.GType
SELECT vg.gname, vg.gtype FROM Video_Games AS vg ORDER BY vg.gname NULLS FIRST
SELECT vg.gname, vg.gtype FROM Video_Games AS vg ORDER BY vg.gname ASC, vg.gtype ASC
SELECT Video_Games.GName FROM Video_Games WHERE Video_Games.GType ILIKE '%Collectible%card%game%'
SELECT vg.gname FROM Video_Games AS vg WHERE vg.gtype ILIKE '%collectible%card%'
SELECT Video_Games.gtype FROM Video_Games WHERE Video_Games.gname ILIKE '%Destiny%'
SELECT Video_Games.GType FROM Video_Games WHERE "GameID" = 17070 OR "GameID" = 251070
SELECT COUNT(*) FROM Video_Games WHERE GType ILIKE '%Massive%multiplayer%online%game%'

COUNT(*) AS total_games FROM Video_Games WHERE GType ILIKE '%Massively%multiplayer%online%';
                        
                        ```SELECT vg.gtype, COUNT(*) AS game_count FROM Video_Games AS vg GROUP BY vg.gtype
SELECT vg.gtype, COUNT(*) AS game_count FROM Video_Games AS vg GROUP BY vg.gtype
SELECT vg.gtype, COUNT(*) AS game_count FROM Video_Games AS vg GROUP BY vg.gtype ORDER BY game_count DESC NULLS LAST LIMIT 1
SELECT vg.gtype, COUNT(*) AS game_count FROM Video_Games AS vg GROUP BY vg.gtype ORDER BY game_count DESC NULLS LAST LIMIT 1
SELECT vg.gtype, COUNT(*) AS game_count FROM Video_Games AS vg GROUP BY vg.gtype ORDER BY game_count ASC NULLS FIRST LIMIT 1
SELECT Video_Games.GType, COUNT(Video_Games.GameID) AS game_count FROM Video_Games GROUP BY Video_Games.GType ORDER BY game_count ASC NULLS FIRST LIMIT 1
SELECT Student.StuID FROM Student WHERE Student.city_code = 'CHI'
SELECT Student.StuID FROM Student WHERE Student.city_code = 'CHI'
SELECT Student.StuID FROM Student WHERE Student.Advisor = 1121
SELECT Student.StuID FROM Student WHERE Student.Advisor = 1121
SELECT Student.Fname FROM Student WHERE Student.Major = 600
SELECT Student.Fname FROM Student WHERE Student.Major = 600
SELECT Major, AVG(Age) AS average_age, MIN(Age) AS min_age, MAX(Age) AS max_age FROM Student GROUP BY Major
SELECT Major, AVG(Age) AS avg_age, MIN(Age) AS min_age, MAX(Age) AS max_age FROM Student GROUP BY Major
SELECT a.fname, a.lname FROM Student AS a JOIN student ON a.city_code = s.advisor WHERE a.city_code IN (SELECT advisor FROM student GROUP BY advisor HAVING COUNT(age) >= 2)
SELECT Student.LName, Student.Fname FROM Student WHERE NOT Student.Advisor IS NULL
SELECT COUNT(DISTINCT SportName) AS number_of_sports FROM SportsInfo
SELECT COUNT(DISTINCT SportName) AS number_of_sports FROM SportsInfo
SELECT CAST(COUNT(SportsInfo.StuID) AS FLOAT) / CAST(COUNT(Students.StudentNumber) AS FLOAT) AS proportion FROM SportsInfo JOIN students ON SportsInfo.StuID = students.StudentNumber
SELECT COUNT(DISTINCT SportsInfo.StuID) AS number_of_students FROM SportsInfo
SELECT Student.sportname FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.sportname WHERE NOT SportsInfo.OnScholarship IS NULL
SELECT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.OnScholarship ILIKE '%Yes%'
SELECT COUNT(GamesPlayed) AS total_games_play FROM SportsInfo
SELECT SUM(GamesPlayed) AS total_games_played FROM SportsInfo
SELECT COUNT(GamesPlayed) AS total_games_played FROM SportsInfo WHERE OnScholarship = 'Yes' AND SportName ILIKE '%Football%'
SELECT SUM(GamesPlayed) AS total_games_played FROM SportsInfo WHERE OnScholarship = 'Yes'
SELECT SportsInfo.SportName, COUNT(Students.StudentID) AS total_students FROM SportsInfo JOIN students ON SportsInfo.StuID = students.StudentID GROUP BY SportsInfo.SportName
SELECT SportsInfo.SportName, COUNT(SportsInfo.StuID) AS number_of_students FROM SportsInfo GROUP BY SportsInfo.SportName
SELECT s.stuid, COUNT(DISTINCT si.sportname) AS num_sports, SUM(si.gamesplayed) AS total_games_played FROM students JOIN SportsInfo AS si ON s.stuid = si.stuid GROUP BY s.stuid
SELECT s.onscholarship, COUNT(DISTINCT si.sportname) AS num_sports, SUM(si.gamesplayed) AS total_games_played FROM students JOIN SportsInfo AS si ON s.onscholarship = si.stuid GROUP BY s.onscholarship
SELECT DISTINCT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.HoursPerWeek > 10
SELECT DISTINCT SportsInfo.StuID FROM SportsInfo WHERE SportsInfo.HoursPerWeek > 10
SELECT SportsInfo.SportName, COUNT(SportsInfo.OnScholarship) AS total_students_on_scholarship FROM SportsInfo GROUP BY SportsInfo.SportName ORDER BY total_students_on_scholarship DESC NULLS LAST LIMIT 1
SELECT SportsInfo.SportName, COUNT(SportsInfo.OnScholarship) AS total_students FROM SportsInfo GROUP BY SportsInfo.SportName ORDER BY total_students DESC NULLS LAST LIMIT 1
SELECT Student.StuID FROM Student WHERE NOT Student.Fname ILIKE '%sports%' ORDER BY Student.StuID
SELECT Student.StuID FROM Student WHERE Student.Age IS NULL OR Student.Sex IS NULL OR Student.Major IS NULL OR Student.city_code IS NULL OR Student.Advisor IS NULL
SELECT Student.StuID FROM Student WHERE Student.Major = 600 AND Student.StuID IN (SELECT Student_Scholarship.StuID FROM Student_Scholarship)
SELECT Student.StuID FROM Student WHERE Student.Major = 600
SELECT Student.StuID FROM Student WHERE Student.Sex = 'female'
SELECT s.advisor FROM student JOIN Student AS st ON s.advisor = st.advisor WHERE s.sex = 'female' AND s.age IN ('basketball', 'soccer')
SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male' AND NOT EXISTS(SELECT 1 FROM TeamStudent WHERE TeamStudent.advisor = Student.StuID)
SELECT Student.StuID FROM Student WHERE Student.Sex = 'Male' AND NOT EXISTS(SELECT 1 FROM Student_Activities WHERE Student_Activities.Student_Id = Student.StuID)
SELECT CAST(COUNT(DISTINCT Plays_Games.StuID) AS FLOAT) / CAST(COUNT(DISTINCT Students.StuID) AS FLOAT) AS proportion FROM Students LEFT JOIN Plays_Games ON Students.StuID = Plays_Games.StuID
SELECT COUNT(DISTINCT Plays_Games.StuID) AS number_of_students FROM Plays_Games
SELECT Student.StuID FROM Student WHERE Student.Age IS NULL
SELECT Student.StuID FROM Student WHERE Student.Major <> 42
SELECT StudentInfo.StudentID FROM StudentInfo JOIN SportsInfo ON StudentInfo.StudentID = SportsInfo.StuID WHERE NOT SportsInfo.SportName IS NULL AND SportsInfo.GamesPlayed > 0
SELECT s.StudentID FROM SportsInfo AS s JOIN VideoGames ON s.StuID = v.StuID
SELECT p.gameid, CAST(p.hours_played AS FLOAT) AS hours_played FROM Plays_Games AS p
SELECT p.gameid, p.hours_played, CAST(p.hours_played AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Plays_Games), 0) AS fraction_of_total_hours_played FROM Plays_Games AS p
SELECT p.gameid, SUM(p.hours_played) AS total_hours_played FROM Plays_Games AS p GROUP BY p.gameid
SELECT p.gameid, SUM(p.hours_played) AS total_hours_played FROM Plays_Games AS p GROUP BY p.gameid
SELECT s.fname, s.age FROM student JOIN Student AS ft ON s.stuid = ft.stuid JOIN lacrosse_team ON s.stuid = lt.stuid WHERE ft.sex IN ('Football', 'Lacrosse') AND lt.sex IN ('Football', 'Lacrosse')
SELECT s.fname, CAST(s.age AS FLOAT) AS age FROM student_athletes JOIN Student AS s ON sa.advisor = s.stuid WHERE sa.sex IN ('Football', 'Lacrosse')
SELECT Student.LName, Student.Sex FROM Student WHERE (Student.Major = 1 OR Student.Major = 2) AND (Student.Major = 3 OR Student.Major = 4)
SELECT Student.LName, Student.Sex FROM Student WHERE "Major" IN (757071, 491821) AND "Advisor" IN (757071, 491821)
SELECT Customers.customer_name FROM Customers
SELECT customers.customer_name FROM Customers

COUNT(Customers.customer_id) AS total_customers FROM Customers;
                        
                        ```SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Customers
 AVG(order_quantity::FLOAT) AS avg_order_quantity FROM Order_Items;
                        ``` AVG(order_quantity::FLOAT) AS avg_order_quantity FROM Order_Items;
                        ```SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method ILIKE '%cash%'
SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method ILIKE '%cash%'
SELECT Customers.customer_id, Customers.date_became_customer FROM Customers WHERE Customers.customer_id BETWEEN 10 AND 20
SELECT Customers.date_became_customer FROM Customers WHERE Customers.customer_id BETWEEN 10 AND 20
SELECT Customers.payment_method, COUNT(Customers.customer_id) AS number_of_customers FROM Customers GROUP BY Customers.payment_method ORDER BY number_of_customers DESC NULLS LAST LIMIT 1
SELECT Customers.payment_method, COUNT(Customers.payment_method) AS frequency FROM Customers GROUP BY Customers.payment_method ORDER BY frequency DESC NULLS LAST LIMIT 1

                        ```
                        ```SELECT DISTINCT Customers.payment_method FROM Customers
SELECT DISTINCT Customers.payment_method FROM Customers
SELECT p.product_details FROM Products AS p
SELECT p.product_details FROM Products AS p
SELECT Customers.customer_name FROM Customers WHERE Customers.customer_name ILIKE '%Alex%'
SELECT customers.customer_name FROM Customers WHERE customers.customer_name ILIKE '%Alex%'
SELECT Products.product_details FROM Products WHERE (Products.product_details ILIKE '%Leisure%' OR Products.product_details ILIKE '%Americano%')
SELECT Products.product_details FROM Products WHERE Products.product_details ILIKE '%Leute%' OR Products.product_details ILIKE '%Americano%'
SELECT DISTINCT Addresses.city FROM Addresses
SELECT Addresses.city FROM Addresses WHERE NOT Addresses.city IN (SELECT Customer_address.city FROM customers)
SELECT DISTINCT Addresses.city FROM Addresses
SELECT DISTINCT Addresses.city FROM Addresses
SELECT Addresses.city FROM Addresses WHERE Addresses.zip_postcode = '255'
SELECT Addresses.city FROM Addresses WHERE "zip_postcode" ILIKE '%255%'
SELECT Addresses.state_province_county, Addresses.country FROM Addresses WHERE Addresses.zip_postcode LIKE '4%'
SELECT Addresses.city, Addresses.state_province_county, Addresses.country FROM Addresses WHERE Addresses.zip_postcode LIKE '4.%'
SELECT Addresses.country FROM Addresses GROUP BY Addresses.country HAVING COUNT(Addresses.address_id) > 4
SELECT a.country FROM Addresses AS a GROUP BY a.country HAVING COUNT(DISTINCT a.address_id) > 4
SELECT cc.channel_code FROM Customer_Contact_Channels AS cc WHERE cc.customer_id IN (SELECT customer_id FROM Customer_Contact_Channels GROUP BY customer_id HAVING COUNT(customer_id) < 5)
SELECT COUNT(*) AS frequency_of_use, channel_code FROM Customer_Contact_Channels GROUP BY contact_number HAVING COUNT(*) < 5
 AVG(active_to_date - active_from_date) AS average_lifespan
                        ``` AVG(active_to_date - active_from_date) AS average_active_time FROM customer_contact_channels;
                        ```SELECT cc.channel_code, cc.contact_number FROM Customer_Contact_Channels AS cc WHERE (cc.active_to_date IS NULL OR cc.active_to_date > CURRENT_TIMESTAMP()) AND (cc.active_from_date IS NULL OR cc.active_from_date < CURRENT_TIMESTAMP()) ORDER BY (cc.active_to_date - cc.active_from_date) DESC NULLS LAST LIMIT 1
SELECT cc.channel_code, cc.contact_number FROM Customer_Contact_Channels AS cc WHERE (cc.active_to_date - cc.active_from_date) = (SELECT MAX(active_to_date - active_from_date) FROM Customer_Contact_Channels)
SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Customer_Orders WHERE order_status = 'Cancelled'
SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Customer_Orders WHERE order_status = 'Cancelled'
SELECT COUNT(*) FROM Customer_Orders WHERE order_details ILIKE '%Second%time%'
SELECT COUNT(*) FROM Customer_Orders WHERE order_details ILIKE '%Second%time%'
SELECT Addresses.address_content FROM Addresses WHERE (Address = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona')
SELECT Addresses.address_content FROM Addresses WHERE (Addresses.state_province_county = 'East Julianaside, Texas' OR Addresses.state_province_county = 'Gleasonmouth, Arizona')
SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method <> 'Cash'
SELECT Customers.customer_name FROM Customers WHERE Customers.payment_method <> 'Cash'
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_id IN (SELECT order_customers.customer_id FROM orders JOIN order_products ON orders.payment_method = order_products.payment_method WHERE order_products.other_customer_details ILIKE '%Latte%') GROUP BY Customers.customer_name
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_name IN (SELECT Customer_name FROM orders WHERE customer_id = 10)
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_id IN (SELECT OrderItems.customer_id FROM OrderItems)
SELECT Customers.customer_name FROM Customers WHERE NOT Customers.customer_id IN (SELECT Order.customer_id FROM Order)
SELECT COUNT(*) AS total_artists FROM artist
SELECT COUNT(*) FROM artist
SELECT artist.age FROM artist
SELECT CAST(age AS FLOAT) AS age FROM artist
SELECT AVG(age) AS average_age FROM artist
SELECT AVG(age) AS average_age FROM artist
SELECT a.famous_title FROM artist AS a WHERE a.artist = 'Triumfall'
SELECT a.famous_title FROM artist AS a WHERE a.artist ILIKE '%Triumfall%'
SELECT DISTINCT artist.famous_release_date FROM artist
SELECT DISTINCT artist.famous_release_date FROM artist
SELECT date_of_ceremony, result FROM music_festival
SELECT mf.music_festival, TO_DATE(mf.date_of_ceremony, 'YYYY-MM-DD') AS date_of_ceremony, mf.result FROM music_festival AS mf
 SELECT category FROM music_festival WHERE result ILIKE '%Ascended%'
                        ``` SELECT category FROM music_festival WHERE result ilike '%Ascended%'
                        ```SELECT MIN(Weeks_on_Top) AS min_weeks_on_top, MAX(Weeks_on_Top) AS max_weeks_on_top FROM volume
SELECT MIN(Weeks_on_Top) AS min_weeks_on_top, MAX(Weeks_on_Top) AS max_weeks_on_top FROM volume
SELECT volume.song FROM volume WHERE volume.weeks_on_top > 1
SELECT volume.song FROM volume WHERE volume.weeks_on_top > 1
SELECT volume.song FROM volume ORDER BY volume.volume_id ASC NULLS FIRST
SELECT volume.song, volume.volume_id FROM volume ORDER BY volume.volume_id ASC NULLS FIRST
SELECT COUNT(DISTINCT volume.artist_id) AS number_of_artists FROM volume
SELECT COUNT(DISTINCT volume.artist_id) AS num_artists_with_volumes FROM volume
SELECT artist.age, artist.famous_title FROM artist ORDER BY artist.age DESC NULLS LAST
SELECT artist.age, CAST(artist.famous_title AS FLOAT) AS famous_title FROM artist ORDER BY artist.age DESC NULLS LAST
SELECT artist.famous_release_date FROM artist ORDER BY artist.age ASC NULLS FIRST LIMIT 1
SELECT MAX(artist.famous_release_date) AS earliest_release_date FROM artist
SELECT category, COUNT(*) AS frequency FROM music_festival GROUP BY category ORDER BY frequency DESC NULLS LAST
SELECT category, COUNT(*) AS total_festivals FROM music_festival GROUP BY category
SELECT music_festival.result FROM music_festival GROUP BY music_festival.result ORDER BY COUNT(music_festival.result) DESC NULLS LAST LIMIT 1
SELECT mf.result, COUNT(*) AS frequency FROM music_festival AS mf GROUP BY mf.result ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT category FROM music_festival GROUP BY category HAVING COUNT(id) > 1
SELECT DISTINCT music_festival.category FROM music_festival GROUP BY music_festival.category HAVING COUNT(music_festival.id) > 1
SELECT volume.song FROM volume ORDER BY volume.weeks_on_top DESC NULLS LAST LIMIT 1
SELECT volume.song, MAX(volume.weeks_on_top) AS max_weeks_on_top FROM volume JOIN volume_issue ON volume.volume_id = volume_issue.volume_id GROUP BY volume.song ORDER BY max_weeks_on_top DESC NULLS LAST LIMIT 1
SELECT a.famous_title FROM artist AS a WHERE a.artist IS NULL
SELECT a.famous_title FROM artist AS a LEFT JOIN volume ON a.artist_id = v.artist_id WHERE v.artist IS NULL
SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Ascared'
SELECT date_of_ceremony FROM music_festival WHERE category ILIKE '%Best%Song%' AND result ILIKE '%Ascended%'
SELECT MIN(Volume_Issue) AS earliest_volume_issue FROM volume
SELECT volume.issue_date FROM volume ORDER BY volume.weeks_on_top ASC NULLS FIRST LIMIT 1
SELECT COUNT(DISTINCT volume.artist_id) AS number_of_artists FROM volume
SELECT COUNT(DISTINCT volume.artist_id) AS num_artists FROM volume
SELECT category, COUNT(*) AS total_festivals, SUM(result) AS total_results FROM music_festival GROUP BY category ORDER BY total_festivals DESC NULLS LAST, total_results DESC NULLS LAST
SELECT category, result, COUNT(*) AS frequency FROM music_festival GROUP BY category, result ORDER BY frequency DESC NULLS LAST
SELECT COUNT(*) AS number_of_roller_coasters FROM roller_coaster
SELECT roller_coaster.name FROM roller_coaster ORDER BY roller_coaster.length ASC NULLS FIRST
SELECT roller_coaster.length, roller_coaster.height FROM roller_coaster WHERE status ILIKE '%open%' AND name ILIKE '%roller%coaster%'
SELECT country.name FROM country WHERE NOT country.languages ILIKE '%German%'
SELECT roller_coaster.status FROM roller_coaster WHERE roller_coaster.length > 3300 OR roller_coaster.speed > 100
SELECT roller_coaster.speed FROM roller_coaster ORDER BY roller_coaster.length DESC NULLS LAST LIMIT 1
SELECT AVG(CAST(Speed AS FLOAT)) AS average_speed FROM roller_coaster
SELECT Status, COUNT(Roller_Coaster_ID) AS number_of_roller_coasters FROM roller_coaster GROUP BY Status
SELECT roller_coaster.status, COUNT(*) AS frequency FROM roller_coaster GROUP BY roller_coaster.status ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT roller_coaster.status FROM roller_coaster GROUP BY roller_coaster.status HAVING COUNT(roller_coaster.roller_coaster_id) > 2
SELECT roller_coaster.park FROM roller_coaster ORDER BY roller_coaster.speed DESC NULLS LAST LIMIT 1
SELECT COUNT(DISTINCT country.country_id) AS number_of_countries FROM country WHERE population > 3000
SELECT COUNT(DISTINCT rank) AS number_of_ranks FROM captain
SELECT COUNT(DISTINCT rank) AS number_of_ranks FROM captain
SELECT captain.rank, COUNT(*) AS total_captains FROM captain GROUP BY captain.rank
SELECT captain.rank, COUNT(*) AS total_captains FROM captain GROUP BY captain.rank
SELECT captain.rank, COUNT(*) AS number_of_captains FROM captain WHERE age < '50' GROUP BY captain.rank
SELECT captain.rank, COUNT(*) AS total_captains FROM captain WHERE age < '50' GROUP BY captain.rank
SELECT c.name, CAST(c.age AS FLOAT) AS age_cast FROM captain AS c ORDER BY age_cast ASC NULLS FIRST
SELECT captain.name FROM captain ORDER BY captain.age DESC NULLS LAST
SELECT captain.name, captain.class, captain.rank FROM captain
SELECT captain.name, captain.class, captain.rank FROM captain
SELECT captain.rank FROM captain GROUP BY captain.rank ORDER BY COUNT(captain.rank) DESC NULLS LAST LIMIT 1

                        ```SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(captain.class) > 2
SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(captain.class) > 2
SELECT captain.name FROM captain WHERE captain.rank IN ('Midshipman', 'Lieutenant')
SELECT captain.name FROM captain WHERE captain.rank IN ('Midshipman', 'Lieutenant')
SELECT captain.class, AVG(CAST(captain.age AS FLOAT)), MIN(CAST(captain.age AS FLOAT)) FROM captain GROUP BY captain.class
SELECT captain.class, AVG(CAST(captain.age AS FLOAT)) AS average_age, MIN(CAST(captain.age AS FLOAT)) AS min_age FROM captain GROUP BY captain.class
SELECT c.rank FROM captain AS c WHERE c.class IN ('Cutter', 'Armed schooner') GROUP BY c.rank HAVING COUNT(DISTINCT c.class) = 2
SELECT captain.rank FROM captain WHERE captain.class ILIKE '%cutter%' AND captain.class ILIKE '%armed%schooner%'
SELECT c.rank FROM captain AS c WHERE NOT EXISTS(SELECT 1 FROM captain AS ca WHERE ca.ship_id = c.ship_id AND ca.class = 'Third' AND ca.rank = 'Third') AND c.class = 'Period'
SELECT c.name, c.rank FROM captain AS c WHERE NOT EXISTS(SELECT 1 FROM captain AS cc WHERE cc.ship_id = c.ship_id AND cc.class <> c.class AND cc.rank > 'Third')
SELECT c.name FROM captain AS c WHERE c.age = (SELECT MIN(age) FROM captain)
SELECT c.name FROM captain AS c WHERE c.age = (SELECT MIN(age) FROM captain)
SELECT COUNT(*) AS total_ships FROM Ship
SELECT COUNT(*) FROM Ship
SELECT s.name, s.type, s.flag FROM Ship AS s WHERE s.built_year = (SELECT MAX(built_year) FROM Ship)
SELECT s.name, s.type, s.flag FROM Ship AS s WHERE s.built_year = (SELECT MAX(built_year) FROM Ship)
SELECT s.flag, COUNT(*) AS ship_count FROM Ship AS s GROUP BY s.flag ORDER BY ship_count DESC NULLS LAST
SELECT flag.flag, COUNT(*) AS number_of_ships FROM Ship AS flags GROUP BY flags.flag
SELECT s.flag FROM Ship AS s GROUP BY s.flag ORDER BY COUNT(s.flag) DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_ships_with_given_flag, s.name FROM Ship AS s GROUP BY s.flag ORDER BY total_ships_with_given_flag DESC NULLS LAST LIMIT 1
SELECT s.name FROM Ship AS s ORDER BY s.built_year ASC NULLS FIRST, s.class ASC NULLS FIRST
SELECT s.name, CAST(s.built_year AS TEXT) AS built_year, s.class FROM Ship AS s ORDER BY built_year, s.class NULLS FIRST
SELECT DISTINCT s.type FROM Ship AS s WHERE s.flag ILIKE '%Panama%' AND s.flag ILIKE '%Malta%' ORDER BY s.type
SELECT DISTINCT s.type FROM Ship AS s WHERE s.flag ILIKE '%Panama%' AND s.flag ILIKE '%Malta%' ORDER BY s.type
SELECT DATE_PART(YEAR, Built_Year) AS YEAR, COUNT(*) AS number_of_ships FROM Ship GROUP BY YEAR ORDER BY number_of_ships DESC NULLS LAST LIMIT 1
SELECT MAX(Built_Year) AS max_built_year FROM Ship
SELECT s.name, c.class FROM ship LEFT JOIN Ship AS c ON s.ship_id = c.ship_id WHERE c.ship_id IS NULL
SELECT s.name, s.class FROM ship WHERE NOT EXISTS(SELECT 1 FROM Ship AS c WHERE c.ship_id = s.ship_id)
SELECT s.name, s.flag FROM ship WHERE NOT EXISTS(SELECT 1 FROM Ship AS c WHERE c.class = 'Midshipman' AND s.ship_id = c.ship_id)
SELECT s.name, s.flag FROM ship LEFT JOIN Ship AS c ON s.ship_id = c.ship_id WHERE c.class <> 'Midshipman' AND c.ship_id IS NULL
SELECT MAX(year) AS latest_year, host_city FROM hosting_city GROUP BY host_city ORDER BY latest_year DESC NULLS LAST LIMIT 1
SELECT MAX(a.year) AS max_year, a.host_city FROM hosting_city AS a GROUP BY a.host_city
 SELECT match.match_id FROM match WHERE "Competition" ILIKE '%"1994%FIFA%World%Cup%'%';
                        ``` SELECT match.match_id FROM match WHERE "Competition" ILIKE '%"1994%FIFA%World%Cup%"'
                        ```SELECT city.city, city.regional_population FROM city ORDER BY city.regional_population DESC NULLS LAST LIMIT 3
SELECT city.city, city.regional_population FROM city ORDER BY city.regional_population DESC NULLS LAST LIMIT 3
SELECT city.city, MIN(city.gdp) AS min_gpl FROM city GROUP BY city.city
SELECT city.city, MIN(city.gdp) AS min_gdp FROM city GROUP BY city.city
SELECT city.city FROM city WHERE city.regional_population > 10000000
SELECT city.city FROM city WHERE city.regional_population > 10000000
SELECT city.city FROM city WHERE city.regional_population > 8000000 OR city.regional_population < 5000000
SELECT city.city FROM city WHERE city.regional_population > 8000000 OR city.regional_population < 5000000
SELECT competition FROM match GROUP BY competition
SELECT match.competition, COUNT(*) AS total_matches FROM match GROUP BY match.competition
SELECT venue FROM match ORDER BY date DESC NULLS LAST
SELECT venue FROM match ORDER BY date DESC NULLS LAST
SELECT MAX(city.gdp) AS max_gdp FROM city
SELECT MAX(city.gdp) AS max_gdp FROM city
SELECT individuals.individual_first_name, individuals.individual_middle_name, individuals.individual_last_name FROM Individuals ORDER BY individuals.individual_last_name ASC NULLS FIRST
SELECT Individuals.individual_first_name, Individuals.individual_middle_name, Individuals.individual_last_name FROM Individuals ORDER BY Individuals.individual_last_name
SELECT DISTINCT Forms.form_type_code FROM Forms
SELECT Forms.form_type_code FROM Forms GROUP BY Forms.form_type_code
SELECT Parties.payment_method_code, Parties.party_phone FROM Parties WHERE Parties.party_email = 'enrico09@example.com'
SELECT Parties.payment_method_code, Parties.party_phone FROM Parties WHERE Parties.party_email = 'enrico09@example.com'
SELECT Organizations.organization_name FROM Organizations ORDER BY Organizations.date_formed
SELECT Organizations.organization_name FROM Organizations ORDER BY Organizations.date_formed ASC NULLS FIRST
SELECT organizations.organization_name FROM Organizations ORDER BY organizations.date_formed ASC NULLS FIRST LIMIT 1
SELECT organizations.organization_name FROM Organizations ORDER BY organizations.date_formed DESC NULLS LAST LIMIT 1

COUNT(Services.service_id) AS total_services FROM Services;
                        
                        ```SELECT COUNT(service_id) AS total_services FROM Services
SELECT Services.service_name FROM Services WHERE Services.service_id IS NULL
SELECT Services.service_name FROM Services WHERE Services.service_id IS NULL
SELECT a.town_city, a.state_province_county FROM Addresses AS a
SELECT Addresses.town_city, Addresses.state_province_county FROM Addresses
SELECT COUNT(town_city) FROM Addresses WHERE state_province_county = 'Colorado'
 SELECT COUNT(town_city) AS number_of_cities FROM Addresses WHERE "state_province_county" ILIKE '%Colorado%'
                        ```SELECT DISTINCT Parties.payment_method_code FROM Parties GROUP BY Parties.payment_method_code HAVING COUNT(Parties.party_id) > 3
SELECT DISTINCT Parties.payment_method_code FROM Parties GROUP BY Parties.payment_method_code HAVING COUNT(Parties.party_id) > 3
SELECT Organizations.organization_name FROM Organizations WHERE Organizations.organization_name ILIKE '%Party%'
SELECT Organizations.organization_name FROM Organizations WHERE Organizations.organization_name ILIKE '%Party%' ORDER BY Organizations.organization_name
SELECT COUNT(DISTINCT Parties.payment_method_code) AS number_of_payment_methods FROM Parties
SELECT COUNT(DISTINCT Parties.payment_method_code) AS num_payment_method_codes FROM Parties
SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.zip_postcode = '6862 Kaitlyn Knolls'
SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.line_1_number_building ILIKE '%6862%Kaitlyn%Knolls%'
SELECT COUNT(*) AS total_drivers FROM driver
SELECT d.name, b.home_city, CAST(d.age AS FLOAT) AS age FROM drivers JOIN driver AS b ON d.driver_id = b.driver_id
SELECT party, COUNT(driver_id) AS driver_count FROM driver GROUP BY party
SELECT d.name FROM driver AS d ORDER BY d.age DESC NULLS LAST
SELECT DISTINCT home_city FROM driver
SELECT d.home_city, COUNT(*) AS driver_count FROM driver AS d GROUP BY d.home_city ORDER BY age DESC NULLS LAST LIMIT 1
SELECT party FROM driver WHERE age > 40 AND home_city = 'Hartford'
SELECT d.home_city FROM driver AS d WHERE age > 40 GROUP BY d.home_city HAVING COUNT(d.driver_id) >= 2
SELECT DISTINCT home_city FROM driver WHERE age <= 40
SELECT d.name FROM driver AS d WHERE d.age IS NULL
SELECT school.type FROM school GROUP BY school.type HAVING COUNT(school.school_id) > 1
SELECT MAX(Years_Working) AS max_years, MIN(Years_Working) AS min_years, AVG(Years_Working) AS avg_years FROM school_bus
SELECT s.school AS SCHOOL_NAME, t.type AS TYPE FROM school AS s LEFT JOIN transport ON s.school_id = t.school_id WHERE t.location IS NULL
 SELECT COUNT(*) FROM drivers WHERE age < 40 OR home_city = 'Hartford'
                        ```SELECT d.name FROM driver AS d WHERE d.home_city = 'Hartford' AND d.age < 40
SELECT COUNT(*) FROM flight WHERE velocity > 200
SELECT flight.vehicle_flight_number, flight.date, flight.pilot FROM flight ORDER BY flight.altitude NULLS FIRST
SELECT a.id, a.name, a.country, a.city FROM airport AS a ORDER BY a.name ASC NULLS FIRST
SELECT MAX(group_equity_shareholding) AS max_shareholding FROM operate_company
SELECT flight.velocity FROM flight WHERE flight.pilot ILIKE '%Thompson%'
SELECT a.name FROM airport AS a WHERE a.country <> 'Iceland'
SELECT Type, COUNT(*) AS frequency FROM operate_company GROUP BY Type ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT COUNT(DISTINCT a.id) AS number_of_airports FROM airport AS a JOIN flight ON a.icao = f.icao WHERE NOT a.name ILIKE '%Thompson%'
SELECT name FROM airport WHERE name ILIKE '%international%'
SELECT a.country, COUNT(*) AS number_of_airports FROM airport AS a GROUP BY a.country
SELECT DISTINCT a.country FROM airport AS a GROUP BY a.country HAVING COUNT(a.icao) > 2
SELECT p.date AS pilot_name, COUNT(f.id) AS flight_count FROM pilot JOIN flight AS f ON p.id = f.pilot GROUP BY p.date ORDER BY flight_count DESC NULLS LAST LIMIT 1

COUNT(Accounts.Account_ID) AS total_accounts FROM Accounts;
                        
                        ```
COUNT(Accounts.Account_ID) AS total_accounts FROM Accounts;
                        ```SELECT a.account_id, a.account_details FROM Accounts AS a
SELECT a.account_id, a.account_details FROM Accounts AS a
SELECT COUNT(*) AS total_statements FROM Statements

COUNT(Stat Statements.Statement_ID) AS total_statements;
                        ```SELECT Statements.Statement_ID, Statements.Statement_Details FROM Statements
SELECT s.statement_id, s.statement_details FROM Statements AS s
SELECT a.statement_id, COUNT(a.account_id) AS account_count FROM Accounts AS a GROUP BY a.statement_id
SELECT Accounts.statement_id, COUNT(Accounts.account_id) AS account_count FROM Accounts GROUP BY Accounts.statement_id
SELECT COUNT(Document_ID) AS total_documents FROM Documents
SELECT COUNT(*) AS total_documents FROM Documents
SELECT Documents.Document_Type_Code, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE (Documents.Document_Name ILIKE '%Noel%CV%' OR Documents.Document_Name ILIKE '%King%Book%') AND Documents.Other_Details IS NULL
SELECT Documents.Document_Type_Code, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Name ILIKE '%Noel%CV%' OR Documents.Document_Name ILIKE '%King%Book%'
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents
SELECT d.document_id, d.document_name FROM Documents AS d
SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'BK'
SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code ILIKE '%BK%'
SELECT Documents.Project_ID, COUNT(Documents.Document_Type_Code) AS total_documents FROM Documents WHERE Documents.Document_Type_Code = 'BK' GROUP BY Documents.Project_ID
SELECT Documents.Project_ID, COUNT(Documents.Document_Type_Code) AS document_count FROM Documents WHERE Documents.Document_Type_Code = 'BK' GROUP BY Documents.Project_ID
SELECT p.project_id, COUNT(d.document_id) AS document_count FROM projects JOIN Documents AS d ON p.project_id = d.project_id GROUP BY p.project_id
SELECT Documents.Project_ID, COUNT(Documents.Document_ID) AS document_count FROM Documents GROUP BY Documents.Project_ID
SELECT MIN(Project_ID) AS min_project_id FROM Documents
SELECT MIN(Project_ID) AS min_project_id FROM Documents
SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2
SELECT DISTINCT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2
SELECT Documents.Document_Type_Code, COUNT(*) AS Document_Count FROM Documents GROUP BY Documents.Document_Type_Code
SELECT Documents.Document_Type_Code, COUNT(*) AS total_documents FROM Documents GROUP BY Documents.Document_Type_Code
SELECT Documents.Document_Type_Code, COUNT(Documents.Document_ID) AS total_documents FROM Documents GROUP BY Documents.Document_Type_Code ORDER BY total_documents DESC NULLS LAST LIMIT 1
SELECT Documents.Document_Type_Code FROM Documents GROUP BY Documents.Document_Type_Code ORDER BY COUNT(Documents.Document_Type_Code) DESC NULLS LAST LIMIT 1
SELECT Documents.Document_Type_Code FROM Documents GROUP BY Documents.Document_Type_Code HAVING COUNT(Documents.Document_ID) < 3
SELECT Documents.Document_Type_Code FROM Documents GROUP BY Documents.Document_Type_Code HAVING COUNT(Documents.Document_ID) < 3
SELECT Ref_Document_Types.document_type_code, Ref_Document_Types.document_type_name, Ref_Document_Types.document_type_description FROM Ref_Document_Types
SELECT Ref_Document_Types.Document_Type_Code, Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types
SELECT Ref_Document_Types.document_type_description FROM Ref_Document_Types WHERE Ref_Document_Types.document_type_name ILIKE '%Film%'
SELECT Ref_Document_Types.Document_Type_Description FROM Ref_Document_Types WHERE Ref_Document_Types.Document_Type_Name ILIKE '%Film%'
SELECT COUNT(Projects.Project_ID) AS total_projects FROM Projects

COUNT(Projects.Project_ID) AS total_projects FROM Projects;
                        
                        ```SELECT p.project_id, p.project_details FROM Projects AS p
SELECT p.project_id, p.project_details FROM Projects AS p
SELECT COUNT(DISTINCT Ref_Budget_Codes.Budget_Type_Code) AS number_of_budget_types FROM Ref_Budget_Codes
SELECT COUNT(Budget_Type_Code) AS total_budget_codes FROM Ref_Budget_Codes
SELECT Ref_Budget_Codes.Budget_Type_Code, Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes
SELECT Ref_Budget_Codes.Budget_Type_Code, Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes
SELECT Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes WHERE Ref_Budget_Codes.Budget_Type_Code = 'ORc'
SELECT Ref_Budget_Codes.Budget_Type_Description FROM Ref_Budget_Codes WHERE Ref_Budget_Codes.Budget_Type_Code = 'ORc'

COUNT(Documents_with_Expenses.Document_ID) AS number_of_documents_with_expenses
                        ```SELECT COUNT(*) FROM Documents_with_Expenses
SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses WHERE Documents_with_Expenses.Budget_Type_Code = 'SF'
SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses WHERE Documents_with_Expenses.Budget_Type_Code = 'SF'
SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code
SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code
SELECT Budget_Type_Code, COUNT(Document_ID) AS document_count FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY document_count DESC NULLS LAST LIMIT 1
SELECT Budget_Type_Code, COUNT(*) AS frequency FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY frequency DESC NULLS LAST LIMIT 1
SELECT Documents.Document_ID FROM Documents WHERE NOT Documents.Other_Details ILIKE '%expense%budget%'
SELECT Documents.Document_ID FROM Documents WHERE NOT Documents.Other_Details ILIKE '%expenses%'
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'CV' AND Documents.Other_Details IS NULL
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code = 'CV' AND Documents.Other_Details IS NULL
SELECT COUNT(*) AS total_documents FROM Documents WHERE NOT Document_ID IN (SELECT Expense_Document_Id FROM Expenses)
SELECT COUNT(*) FROM Documents WHERE NOT Document_ID IN (SELECT Expense_Document_ID FROM Expenses)

                        SELECT Account_Details FROM Accounts WHERE CAST(Account_Details AS FLOAT) = (SELECT MAX(CAST(Account_Details AS FLOAT)) FROM Accounts) OR CAST(Account_Details AS TEXT) ILIKE '%5%'
                        ```SELECT Account_Details FROM Accounts WHERE Account_Details ILIKE '%5%' ORDER BY CAST(Account_Details AS FLOAT) DESC NULLS LAST LIMIT 1
SELECT COUNT(*) AS total_scientists FROM Scientists
SELECT COUNT(*) AS number_of_scientists FROM Scientists
SELECT SUM(Projects.Hours) AS total_hours FROM Projects
SELECT SUM(Projects.Hours) AS total_hours FROM Projects
SELECT COUNT(DISTINCT Scientist) AS number_of_scientists FROM AssignedTo
SELECT COUNT(DISTINCT Scientist) AS num_scientists FROM AssignedTo
SELECT COUNT(DISTINCT Projects.Name) AS num_projects FROM Projects

COUNT(DISTINCT Projects.Code) AS number_of_projects
FROM Projects;
                        
                        ```SELECT AVG(Projects.Hours) AS average_hours FROM Projects
SELECT AVG(Projects.Hours) AS average_hours FROM Projects
SELECT Projects.Name FROM Projects ORDER BY Projects.Hours DESC NULLS LAST LIMIT 1
SELECT Projects.Name FROM Projects ORDER BY Projects.Hours DESC NULLS LAST LIMIT 1
SELECT Projects.Name FROM Projects WHERE Projects.Hours > (SELECT AVG(Projects.Hours) FROM Projects)
SELECT Projects.Name FROM Projects WHERE Projects.Hours > (SELECT AVG(Projects.Hours) FROM Projects)
SELECT Projects.Name FROM Projects WHERE (Projects.Hours >= 100 AND Projects.hours <= 300)
SELECT Projects.Name FROM Projects WHERE (Projects.Hours >= 100 AND Projects.hours <= 300)
SELECT Scientists.Name FROM Scientists ORDER BY Scientists.Name ASC NULLS FIRST
SELECT Scientists.Name FROM Scientists ORDER BY Scientists.Name ASC NULLS FIRST
SELECT Projects.Name FROM Projects WHERE Projects.Code IS NULL
SELECT Projects.Name FROM Projects WHERE Projects.Hours IS NULL
SELECT Scientists.Name FROM Scientists WHERE NOT Scientists.SSN IN (SELECT ProjectScientists.SSN FROM Scientists)
SELECT Scientists.Name FROM Scientists WHERE NOT Scientists.SSN IN (SELECT ProjectScientists.SSN FROM Scientists)
SELECT COUNT(*) AS num_scientists FROM Scientists WHERE NOT SSN IN (SELECT DISTINCT name FROM Scientists)
SELECT COUNT(DISTINCT Scientists.SSN) AS number_of_scientists FROM Scientists LEFT JOIN Scientists ON Scientists.SSN = Projects.Scientist_SSN WHERE Projects.Scientist_SSN IS NULL
SELECT Scientists.Name FROM Scientists WHERE NOT Scientists.SSN IN (SELECT ProjectScientists.SSN FROM Scientists)

                        ```SELECT wine.name FROM wine ORDER BY wine.score DESC NULLS LAST LIMIT 1
SELECT wine.name FROM wine ORDER BY wine.score DESC NULLS LAST LIMIT 1
SELECT MAX(wine.score) AS max_score, wine.winery FROM wine GROUP BY wine.winery ORDER BY max_score DESC NULLS LAST LIMIT 1
SELECT wine.winery FROM wine ORDER BY wine.score DESC NULLS LAST LIMIT 1
SELECT wine.name FROM wine WHERE wine.year = 2008
SELECT wine.name FROM wine WHERE wine.year = '2008'
SELECT wine.grape, COUNT(*) AS number_of_wines FROM wine GROUP BY wine.grape
SELECT wine.grape, COUNT(*) AS number_of_wines FROM wine GROUP BY wine.grape
SELECT wine.name, wine.score FROM wine
SELECT wine.name, wine.score FROM wine
SELECT appellations.area, appellations.county FROM appellations
SELECT appellations.area, COUNT(*) AS COUNT FROM appellations GROUP BY appellations.area
SELECT wine.price FROM wine WHERE wine.year < 2010
SELECT wine.price FROM wine WHERE wine.year < 2010
SELECT wine.name FROM wine WHERE wine.score > 90
SELECT wine.name FROM wine WHERE wine.score > 90
SELECT COUNT(*) AS total_wines FROM wine WHERE name ILIKE '%Robert%Biale%winery%'
SELECT COUNT(*) AS total_wines FROM wine WHERE name ILIKE '%Robert%Biale%winery%'
 SELECT COUNT(*) FROM appellations WHERE area = 'napa'
                        ``` SELECT COUNT(*) FROM appellations WHERE County ilike '%napa%'
                        ```SELECT wine.grape, COUNT(*) AS number_of_wines FROM wine GROUP BY wine.grape ORDER BY number_of_wines DESC NULLS LAST
SELECT wine.grape, COUNT(wine.name) AS number_of_wines FROM wine GROUP BY wine.grape ORDER BY number_of_wines DESC NULLS LAST
SELECT wine.year, AVG(wine.price) AS average_price FROM wine GROUP BY wine.year ORDER BY wine.year
SELECT wine.year, AVG(wine.price) AS average_price FROM wine GROUP BY wine.year ORDER BY wine.year
SELECT wine.name FROM wine WHERE wine.price > (SELECT AVG(wine.price) FROM wine WHERE wine.winery = 'John Anthony Winery')
SELECT wine.name FROM wine WHERE wine.price > (SELECT MAX(winey_john_anthony.price) FROM wine AS winery_john_anthony)
SELECT DISTINCT wine.name FROM wine ORDER BY wine.name ASC NULLS FIRST
SELECT wine.name FROM wine ORDER BY wine.name ASC NULLS FIRST
SELECT wine.name FROM wine ORDER BY wine.price
SELECT wine.name FROM wine ORDER BY wine.price ASC NULLS FIRST
SELECT DISTINCT wine.name FROM wine WHERE (wine.year < 2000 OR wine.year > 2010)
SELECT wine.name FROM wine WHERE (wine.year < 2000 OR wine.year > 2010) GROUP BY wine.name
SELECT DISTINCT wine.winery FROM wine WHERE wine.price BETWEEN 50 AND 100
SELECT DISTINCT wine.winery FROM wine WHERE wine.price BETWEEN 50 AND 100
SELECT AVG(Price.price) AS average_price, SUM(wine.cases) AS total_cases FROM wine WHERE year = 2009 AND grape = 'Zinfandel'
SELECT AVG(Price) AS average_price, SUM(Cases) AS total_cases FROM wine WHERE Year = 2009 AND Grape = 'Zinfandel' AND State = 'California'
SELECT MAX(Price), MAX(Score) FROM wine WHERE "State" ILIKE '%St%Helena%'
 SELECT MAX(Price), MAX(Score) FROM wine WHERE State = 'St. Helena.'
                        ```SELECT wine.year, MAX(wine.price) AS max_price, MAX(wine.score) AS max_score FROM wine GROUP BY wine.year ORDER BY wine.year
SELECT wine.year, MAX(wine.price) AS max_price, MAX(wine.score) AS max_score FROM wine GROUP BY wine.year ORDER BY wine.year
SELECT wine.appelation, AVG(wine.price) AS average_price, AVG(wine.score) AS average_score FROM wine GROUP BY wine.appelation
SELECT wine.appelation, AVG(wine.price) AS average_price, AVG(wine.score) AS average_score FROM wine GROUP BY wine.appelation
SELECT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(wine.no) >= 4
SELECT DISTINCT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(wine.name) >= 4
SELECT wine.name FROM wine WHERE wine.year < (SELECT MIN(winey.year) FROM wine AS winery)
SELECT wine.name FROM wine WHERE wine.year < (SELECT MIN(wine.year) FROM wine WHERE winery ILIKE '%Branner%') ORDER BY wine.year
SELECT wine.name FROM wine WHERE wine.price > (SELECT AVG(wine.price) FROM wine WHERE wine.year = 2006)
SELECT wine.name FROM wine WHERE wine.price > (SELECT MAX(wine.price) FROM wine WHERE year = 2006)
SELECT wine.grape, wine.winery, wine.year FROM wine WHERE wine.price > 100 ORDER BY wine.year
SELECT wine.grape, wine.winery, wine.year FROM wine WHERE wine.price > 100 ORDER BY wine.year
SELECT wine.grape, wine.name, wine.score FROM wine WHERE wine.score > 93 ORDER BY wine.name
SELECT wine.grape, wine.appelation, wine.winery FROM wine WHERE wine.score > 93 ORDER BY wine.name
SELECT wine.name FROM wine WHERE wine.year > 2008 AND wine.state <> 'Central' ORDER BY wine.name
SELECT wine.name FROM wine WHERE wine.year > 2008 AND wine.state <> 'Central' ORDER BY wine.name
SELECT AVG(Price.price) AS average_price FROM wine WHERE state <> 'Sonoma'
SELECT AVG(Price) AS average_price FROM wine WHERE "State" <> 'Sonoma'
SELECT COUNT(Station_ID) AS number_of_stations FROM station
SELECT station.name, station.location, CAST(station.number_of_platforms AS FLOAT) AS number_of_platforms FROM station
SELECT station.location FROM station
SELECT station.name, SUM(total_passengers) AS total_passengers FROM station WHERE "location" <> 'London' GROUP BY station.name
SELECT station.name, MAX(station.main_services) AS max_services FROM station JOIN station ON station.station_id = station.station_id GROUP BY station.name ORDER BY total_passengers DESC NULLS LAST LIMIT 3
SELECT AVG(total_passengers) AS average_total_passengers, MAX(total_passengers) AS max_total_passengers FROM station WHERE "location" ILIKE '%london%or%glasgow%'
SELECT station.location, SUM(station.number_of_platforms) AS total_platforms, SUM(station.total_passengers) AS total_passengers FROM station JOIN station ON station.station_id = station.station_id GROUP BY station.location
SELECT station.location FROM station WHERE (CAST(station.number_of_platforms AS FLOAT) >= 15 AND CAST(station.total_passengers AS FLOAT) > 25) GROUP BY station.location
SELECT DISTINCT main_services.location FROM station WHERE number_of_platforms < '15'
SELECT station.location, COUNT(*) AS total_platforms FROM station GROUP BY station.location ORDER BY total_platforms DESC NULLS LAST LIMIT 1
SELECT t.name, t.time, s.service FROM train JOIN train AS s ON t.service = s.service

COUNT(train.train_id) AS total_trains FROM train;
                        
                        ```SELECT train.name, train.service FROM train ORDER BY train.time
SELECT DISTINCT h.location FROM station AS hs JOIN station ON hs.station_id = h.station_id
SELECT station.name FROM station WHERE CAST(station.number_of_platforms AS FLOAT) = 0
SELECT station.name, station.location, (station.annual_entry_exit - LAG(station.annual_entry_exit) OVER (PARTITION BY station.station_id ORDER BY station.annual_entry_exit NULLS FIRST)) AS yearly_change FROM station ORDER BY yearly_change
SELECT Vehicles.vehicle_id FROM Vehicles
SELECT Vehicles.vehicle_id FROM Vehicles
SELECT COUNT(*) AS total_vehicles FROM Vehicles
SELECT COUNT(vehicle_id) AS total_vehicles FROM Vehicles
SELECT Vehicles.vehicle_details FROM Vehicles WHERE Vehicles.vehicle_id = 1
SELECT vehicles.vehicle_details FROM Vehicles WHERE vehicles.vehicle_id = 1
SELECT s.first_name, s.middle_name, s.last_name FROM Staff AS s
SELECT s.first_name, s.middle_name, s.last_name FROM Staff AS s
SELECT Staff.date_of_birth FROM Staff WHERE Staff.first_name ILIKE '%Janesa%' AND Staff.last_name ILIKE '%Sawayn%'
SELECT Staff.date_of_birth FROM Staff WHERE Staff.first_name ILIKE '%Janesa%' AND Staff.last_name ILIKE '%Sawan%'
SELECT Staff.date_joined_staff FROM Staff WHERE Staff.first_name ILIKE '%Janessa%' AND Staff.last_name ILIKE '%Sawayn%'
SELECT Staff.date_joined_staff FROM Staff WHERE Staff.first_name ILIKE '%Janesa%' AND Staff.last_name ILIKE '%Sawan%'
SELECT Staff.date_left_staff FROM Staff WHERE Staff.first_name ILIKE '%Janessa%' AND Staff.last_name ILIKE '%Sawayn%'
SELECT Staff.date_left_staff FROM Staff WHERE Staff.first_name = 'Janeesa' AND Staff.last_name = 'Sawan' ORDER BY Staff.date_left_staff
SELECT COUNT(*) FROM Staff WHERE first_name ILIKE '%Ludie%'
SELECT COUNT(*) FROM Staff WHERE first_name ILIKE '%Ludie%'
SELECT Staff.nickname FROM Staff WHERE Staff.first_name ILIKE '%Janesa%' AND Staff.last_name ILIKE '%Sawayn%'
SELECT Staff.nickname FROM Staff WHERE Staff.first_name ILIKE '%Janesa%' AND Staff.last_name ILIKE '%Sawan%'
SELECT COUNT(*) AS total_staff FROM Staff
SELECT COUNT(*) AS total_staff FROM Staff
SELECT COUNT(*) FROM Addresses WHERE state_province_county = 'Georgia'
SELECT COUNT(*) AS total_employees FROM Addresses WHERE state_province_county = 'Georgia'
SELECT c.first_name, c.last_name FROM Customers AS c
SELECT customers.first_name, customers.last_name FROM Customers
SELECT customers.email_address, customers.date_of_birth FROM Customers WHERE customers.first_name ILIKE '%Carole%'
SELECT Customers.email_address, Customers.date_of_birth FROM Customers WHERE Customers.first_name ILIKE '%Carole%'
SELECT customers.phone_number, customers.email_address FROM Customers WHERE customers.amount_outstanding > 2000
SELECT Customers.phone_number, Customers.email_address FROM Customers WHERE Customers.amount_outstanding > 2000
SELECT Customers.customer_status_code, Customers.phone_number, Customers.email_address FROM Customers WHERE (Customers.last_name ILIKE '%Kohler%' OR customers.first_name ILIKE '%Marina%')
SELECT customers.customer_status_code, customers.phone_number, customers.email_address FROM Customers WHERE customers.last_name ILIKE '%Kohler%' OR customers.first_name ILIKE '%Marina%'
SELECT Customers.date_of_birth FROM Customers WHERE Customers.customer_status_code ILIKE '%good%customer%'
SELECT Customers.date_of_birth FROM Customers WHERE Customers.customer_status_code ILIKE '%good%customer%'
SELECT Customers.date_became_customer FROM Customers WHERE Customers.first_name ILIKE '%Carole%' AND Customers.last_name ILIKE '%Bernhard%' ORDER BY Customers.date_became_customer
SELECT MIN(Customers.date_became_customer) AS earliest_date FROM Customers WHERE Customers.first_name ILIKE '%Carole%' AND Customers.last_name ILIKE '%Bernhard%'
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(*) AS total_customers FROM Customers
SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM Customers GROUP BY customers.customer_status_code
SELECT customers.customer_status_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY customers.customer_status_code
SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM Customers GROUP BY customers.customer_status_code ORDER BY customer_count ASC LIMIT 1
SELECT customers.customer_status_code, COUNT(customers.customer_id) AS customer_count FROM Customers GROUP BY customers.customer_status_code ORDER BY customer_count ASC LIMIT 1
SELECT MAX(amount_outstanding) AS max_outstanding, MIN(date_became_customer) AS min_outstand, AVG(date_became_customer) AS avg_outstand FROM Customers
SELECT MAX(amount_outstanding) AS max_amount_outstanding, MIN(date_became_customer) AS min_amount_outstand, AVG(date_became_customer) AS avg_amount_outstand FROM Customers
SELECT Customers.first_name, Customers.last_name FROM Customers WHERE (Customers.amount_outstanding >= 1000 AND Customers.date_became_customer <= 3000)
SELECT Customers.first_name, Customers.last_name FROM Customers WHERE (Customers.amount_outstanding >= 1000 AND Customers.date_became_customer <= 3000)
SELECT COUNT(*) AS total_customers FROM Customers
SELECT COUNT(DISTINCT customers.customer_id) AS number_of_customers FROM Customers LEFT JOIN payments ON customers.customer_id = payments.customer_id WHERE payments.customer_id IS NULL
SELECT p.payment_method_code, COUNT(*) AS total_payments FROM Customer_Payments AS p GROUP BY p.payment_method_code
SELECT payment_method_code, COUNT(*) AS number_of_payments FROM Customer_Payments GROUP BY payment_method_code
SELECT COUNT(*) AS total_cancelled_lessons FROM Lessons WHERE lesson_status_code = 'CANCELLED'
SELECT COUNT(*) AS total_cancelled_lessons FROM Lessons WHERE lesson_status_code = 'CANCELLED'
SELECT c.last_name FROM Customers AS c JOIN Staff ON c.last_name = s.last_name
SELECT customers.last_name FROM Customers UNION SELECT employees.last_name FROM employees
SELECT s.first_name FROM Staff LEFT JOIN Staff AS l ON s.staff_id = l.staff_id WHERE l.staff_id IS NULL
SELECT Staff.first_name FROM Staff WHERE NOT Staff.staff_id IN (SELECT Employee.staff_id FROM Staff)

COUNT(faculty.fid) AS total_faculty FROM faculty;
                        
                        ```SELECT COUNT(*) AS total_faculty FROM Faculty
SELECT rank FROM Faculty GROUP BY rank ORDER BY rank
SELECT DISTINCT Rank FROM Faculty
SELECT DISTINCT Building FROM Faculty
SELECT DISTINCT faculty.building FROM Faculty
SELECT faculty.rank, faculty.fname, faculty.lname FROM Faculty ORDER BY faculty.rank
SELECT faculty.rank, faculty.fname, faculty.lname FROM Faculty ORDER BY faculty.rank
SELECT f.fname, l.lname, p.phone FROM Faculty AS f JOIN phone ON f.phone = p.phone AND sex = 'female' WHERE rank IN ('assistant professor', 'associate professor')
SELECT f.fname, l.lname, p.phone FROM Faculty AS f JOIN gender ON f.room = g.facid AND g.sex = 'female' JOIN phone ON f.phone = p.rank
SELECT f.facID FROM Faculty AS f WHERE sex = 'M'
SELECT f.facid FROM Faculty AS f WHERE sex = 'M'
SELECT COUNT(*) FROM Faculty WHERE sex = 'female'
SELECT COUNT(*) FROM Faculty WHERE sex = 'female'
SELECT faculty.phone, faculty.room, faculty.building FROM Faculty WHERE faculty.fname ILIKE '%Jerry%' AND faculty.lname ILIKE '%Prince%'
SELECT faculty.phone, faculty.room, faculty.building FROM Faculty WHERE faculty.fname ILIKE '%Jerry%' AND faculty.lname ILIKE '%Prince%'
 SELECT COUNT(*) AS number_of_professors FROM faculty WHERE building ilike '%NEB%'
                        ```SELECT COUNT(*) FROM Faculty WHERE building ILIKE '%NEB%'
SELECT faculty.fname, faculty.lname FROM Faculty
SELECT faculty.fname, faculty.lname FROM Faculty
SELECT building, COUNT(rank) AS num_faculty FROM Faculty GROUP BY building
SELECT Building, COUNT(*) AS number_of_faculty FROM Faculty GROUP BY Building ORDER BY number_of_faculty DESC NULLS LAST
SELECT faculty.building, COUNT(*) AS number_of_faculty FROM Faculty GROUP BY faculty.building ORDER BY number_of_faculty DESC NULLS LAST LIMIT 1
SELECT MAX(Building) AS Building FROM Faculty
SELECT DISTINCT faculty.building FROM Faculty GROUP BY faculty.building HAVING COUNT(faculty.building) >= 10
SELECT DISTINCT faculty.building FROM Faculty GROUP BY faculty.building HAVING COUNT(faculty.building) >= 10
SELECT Rank, COUNT(*) AS total_faculty FROM Faculty GROUP BY Rank
SELECT Rank, COUNT(*) AS number_of_faculty FROM Faculty GROUP BY Rank
SELECT Rank, Sex, COUNT(*) AS total_faculty FROM Faculty GROUP BY Rank, Sex
SELECT Rank, Sex, COUNT(*) AS total_faculty FROM Faculty GROUP BY Rank, Sex
SELECT rank FROM Faculty GROUP BY rank ORDER BY COUNT(rank) ASC NULLS FIRST LIMIT 1
SELECT faculty.rank FROM Faculty GROUP BY faculty.rank ORDER BY COUNT(faculty.fname) ASC NULLS FIRST LIMIT 1
SELECT Sex, COUNT(*) AS total_count FROM Faculty WHERE rank = 'Assistant Professor' GROUP BY Sex
SELECT COUNT(*) FROM Faculty WHERE rank = 'assistant professor' AND sex IN ('male', 'female')
SELECT f.facID FROM faculty LEFT JOIN Faculty AS ag ON f.facID = ag.lname WHERE ag.fname IS NULL
SELECT f.facID FROM faculty LEFT JOIN Faculty AS ag ON f.facID = ag.facID WHERE ag.facID IS NULL
SELECT a.activity_name FROM Activity AS a
SELECT Activity.activity_name FROM Activity

COUNT(Activity.actid) AS total_activities
                        ```SELECT COUNT(*) AS total_activities FROM Activity
SELECT COUNT(DISTINCT faculty_participates_in.facid) AS number_of_faculty FROM Faculty_Participates_in
SELECT COUNT(DISTINCT faculty_participates_in.facid) AS num_faculty_members FROM Faculty_Participates_in
SELECT f.facid FROM faculty LEFT JOIN Faculty AS af ON f.facid = af.facid WHERE af.facid IS NULL
SELECT f.facid FROM faculty LEFT JOIN Faculty AS afc ON f.facid = afc.facid WHERE afc.facid IS NULL
SELECT f.actid FROM faculty_participates_in JOIN Faculty_Participates_in AS f ON fp.facID = f.actid
SELECT f.facID FROM faculty_participates_in JOIN faculty ON fp.facID = f.facID WHERE NOT fp.actid IS NULL AND EXISTS(SELECT 1 FROM Faculty_Participates_in AS a WHERE a.facID = f.facID)
SELECT Student.StuID FROM Student WHERE NOT Student.StuID IN (SELECT Activity_Student.StuID FROM Student)
SELECT s.stuid FROM student LEFT JOIN Student AS a ON s.stuid = a.stuid WHERE a.stuid IS NULL
 SELECT p.actid, s.stuid FROM Participates_in AS p JOIN Students AS s ON p.stuid = s.stuid WHERE age(s.dob) < 20;
                        ``` SELECT p.actid, s.stuid FROM Participates_in p JOIN Students s ON p.stuid = s.stuid WHERE age(s.dob) < 20;
                        ```SELECT faculty.fname FROM Faculty WHERE NOT faculty.rank ILIKE '%Canadian%' AND NOT faculty.rank ILIKE '%Korean%'
SELECT faculty.fname FROM Faculty WHERE NOT faculty.rank ILIKE '%Canoeing%' AND NOT faculty.rank ILIKE '%Kayaking%'
SELECT airports.name FROM airports WHERE airports.city ILIKE '%Goroka%'
SELECT a.name FROM airports AS a WHERE a.city = 'Goroka'
SELECT a.name, a.city, a.country, a.elevation FROM airports AS a WHERE a.city ILIKE '%New%York%'
SELECT a.name, a.city, a.country, a.elevation FROM airports AS a WHERE a.city ILIKE '%New%York%'

COUNT(*) AS number_of_airlines FROM airlines;
                        
                        ```SELECT COUNT(*) AS total_airlines FROM airlines
SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia'
SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia'
 SELECT MAX(elevation) FROM airports WHERE "country" ILIKE '%Iceland%'
                        ```SELECT MAX(airports.elevation) AS max_elevation FROM airports WHERE airports.country = 'Iceland'
SELECT a.name FROM airports AS a WHERE a.country IN ('Cuba', 'Argentina') ORDER BY a.name
SELECT airports.name FROM airports WHERE (airports.country = 'Cuba' OR airports.country = 'Argentina') GROUP BY airports.name
SELECT airlines.country FROM airlines WHERE airlines.name ILIKE 'Orbit%'
SELECT DISTINCT airlines.country FROM airlines WHERE airlines.name ILIKE 'Orbit%' ORDER BY airlines.country
SELECT a.name FROM airports AS a WHERE a.x BETWEEN -50 AND 50
SELECT airports.name FROM airports WHERE airports.elevation BETWEEN -50 AND 50
SELECT airports.country FROM airports ORDER BY airports.elevation DESC NULLS LAST LIMIT 1
SELECT airports.country FROM airports ORDER BY airports.elevation DESC NULLS LAST LIMIT 1
SELECT COUNT(*) FROM airports WHERE name ILIKE '%international%'
SELECT COUNT(*) FROM airports WHERE name ILIKE '%otheranation%'
SELECT DISTINCT airports.city FROM airports WHERE airports.country = 'Greenland'
SELECT COUNT(DISTINCT city) FROM airports WHERE country ILIKE '%Greenland%'
SELECT a.name, a.city, a.country FROM airports AS a ORDER BY a.elevation ASC LIMIT 1
SELECT airports.name, airports.city, airports.country FROM airports ORDER BY airports.elevation ASC NULLS FIRST LIMIT 1
SELECT a.name, a.city, a.country FROM airports AS a WHERE a.elevation = (SELECT MAX(elevation) FROM airports)
SELECT airlines.name, airports.city, airports.country FROM airports JOIN flights ON airlines.x = flights.x JOIN airports ON flights.apid = airports.apid GROUP BY airlines.name, airports.city, airports.country ORDER BY airports.elevation DESC NULLS LAST LIMIT 1
SELECT airlines.country, COUNT(*) AS total_airlines FROM airlines GROUP BY airlines.country ORDER BY total_airlines DESC NULLS LAST LIMIT 1
SELECT airlines.country, COUNT(*) AS total_airlines FROM airlines GROUP BY airlines.country ORDER BY total_airlines DESC NULLS LAST LIMIT 1
SELECT airlines.country, COUNT(*) AS total_active_airlines FROM airlines WHERE airlines.active = 'Y' GROUP BY airlines.country ORDER BY total_active_airlines DESC NULLS LAST LIMIT 1
SELECT airlines.country FROM airlines WHERE airlines.active = 'Y' GROUP BY airlines.country ORDER BY COUNT(airlines.alid) DESC NULLS LAST
SELECT airlines.country, COUNT(airlines.icao) AS num_airlines FROM airlines GROUP BY airlines.country ORDER BY num_airlines DESC NULLS LAST
SELECT airlines.country, COUNT(airlines.icao) AS number_of_airlines FROM airlines GROUP BY airlines.country ORDER BY number_of_airlines DESC NULLS LAST
SELECT c.name AS country_name, COUNT(*) AS num_airports FROM cities JOIN airports AS a ON c.x = a.city GROUP BY c.name ORDER BY num_airports DESC NULLS LAST
SELECT airports.country, COUNT(airports.icao) AS number_of_airports FROM airports GROUP BY airports.country ORDER BY number_of_airports DESC NULLS LAST
SELECT a.city, COUNT(*) AS num_airports FROM airports AS a WHERE country = 'United States' GROUP BY a.city ORDER BY num_airports DESC NULLS LAST
SELECT airports.city, COUNT(airports.icao) AS number_of_airports FROM airports WHERE airports.country = 'US' GROUP BY airports.city ORDER BY number_of_airports DESC NULLS LAST
SELECT DISTINCT airports.city FROM airports WHERE airports.country = 'United States' GROUP BY airports.city HAVING COUNT(airports.apid) > 3
SELECT COUNT(DISTINCT a.city) AS number_of_cities FROM airports AS a JOIN (SELECT city FROM airports GROUP BY city HAVING COUNT(apid) > 3) AS b ON a.city = b.city
failure
failure
SELECT DISTINCT a.city FROM airports AS a GROUP BY a.city HAVING COUNT(a.icao) > 1
SELECT a.city, COUNT(DISTINCT c.icao) AS num_airports FROM airports AS a GROUP BY a.city HAVING COUNT(DISTINCT c.icao) > 1
SELECT airports.city, COUNT(airports.name) AS num_airports FROM airports GROUP BY airports.city HAVING COUNT(airports.name) > 2 ORDER BY num_airports DESC NULLS LAST
SELECT airports.city, COUNT(airports.icao) AS num_airports FROM airports GROUP BY airports.city HAVING COUNT(airports.icao) > 2 ORDER BY num_airports DESC NULLS LAST
SELECT airports.country, AVG(airports.elevation) AS average_elevation FROM airports GROUP BY airports.country
SELECT a.country, AVG(a.elevation) AS average_elevation FROM airports AS a GROUP BY a.country
SELECT DISTINCT (airports.city) FROM airports GROUP BY airports.city HAVING COUNT(airports.city) = 2
SELECT DISTINCT a.city FROM airports AS a JOIN (SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2) AS b ON a.city = b.city
SELECT COUNT(*) AS route_count FROM routes WHERE src_ap = 'United States' AND dst_ap = 'Canada'
SELECT COUNT(*) AS number_of_routes FROM routes WHERE src_ap = 'United States' AND dst_ap = 'Canada'
SELECT rid FROM routes WHERE src_ap IN ('United States', 'USA') AND dst_ap IN ('United States', 'USA')
SELECT rid FROM routes WHERE src_apid IN (SELECT alid FROM routes WHERE airline = 'United States') AND dst_apid IN (SELECT alid FROM routes WHERE airline = 'United States')
SELECT MAX(order_id) AS latest_order_id FROM Orders
SELECT MAX(order_id) AS latest_order_id FROM Orders
SELECT orders.order_id, customers.customer_id FROM orders JOIN Orders ON orders.customer_id = customers.customer_id ORDER BY date_order_placed ASC NULLS FIRST LIMIT 1
SELECT orders.order_id, customers.customer_id FROM orders JOIN Orders ON orders.customer_id = customers.customer_id ORDER BY orders.date_order_placed ASC NULLS FIRST LIMIT 1
SELECT Shipments.order_id FROM Shipments WHERE Shipments.shipment_tracking_number = '3452'
SELECT Shipments.order_id FROM Shipments WHERE Shipments.shipment_tracking_number = '3452'
SELECT Order_Items.order_item_id FROM Order_Items WHERE Order_Items.product_id = 11
SELECT Order_Items.order_item_id FROM Order_Items WHERE Order_Items.product_id = 11
SELECT o.order_id FROM Shipments AS o JOIN Shipments ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01'
SELECT o.order_id FROM Shipments AS o JOIN Shipments ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01'
SELECT MAX(shipments.order_id) AS latest_shipped_order_id FROM Shipments
SELECT MAX(shipments.order_id) AS latest_shipped_order FROM Shipments
SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC NULLS FIRST
SELECT Products.product_name FROM Products ORDER BY Products.product_name ASC NULLS FIRST
SELECT orders.order_id FROM Orders ORDER BY orders.date_order_placed
SELECT orders.order_id FROM Orders ORDER BY orders.date_order_placed
SELECT Invoices.invoice_number FROM Invoices WHERE Invoices.invoice_date < '1989-09-03' OR Invoices.invoice_date > '2007-12-25'
 SELECT Invoices.invoice_number FROM Invoices WHERE (Invoices.invoice_date < '1989-09-03'::TIMESTAMP OR Invoices.invoice_date > '2007-12-25'::TIMESTAMP)
                        ```SELECT DISTINCT Invoices.invoice_details FROM Invoices WHERE Invoices.invoice_date BETWEEN '1989-09-03' AND '2007-12-25'
SELECT Invoices.invoice_details FROM Invoices WHERE Invoices.invoice_date BETWEEN '1989-09-03' AND '2007-12-25'
SELECT COUNT(*) FROM architect WHERE gender = 'female'
SELECT a.name, a.nationality, a.id FROM architect AS a WHERE gender = 'male'
SELECT AVG(CAST(length_feet AS FLOAT) / 3.28084) AS average_length_in_feet FROM bridge
SELECT m.name, CAST(m.built_year AS TEXT) AS built_year FROM mill AS m WHERE m.type = 'Grondzoiler'
SELECT m.name FROM mill AS m WHERE m.location <> 'Donceel'
SELECT bridge.location FROM bridge WHERE bridge.name IN ('Kolob Arch', 'Rainbow Bridge')
SELECT mill.name FROM mill WHERE mill.name ILIKE '%Moulin%'
SELECT mill.type, COUNT(*) AS total_count FROM mill GROUP BY mill.type ORDER BY total_count DESC NULLS LAST LIMIT 1
SELECT COUNT(*) FROM architect WHERE nationality <> 'mill' AND CAST(gender AS FLOAT) < 1850
SELECT COUNT(*) FROM book_club
SELECT COUNT(*) AS total_book_club FROM book_club
SELECT book_title, author_or_editor FROM book_club WHERE year > '1989' ORDER BY book_title
SELECT book_country.publisher, book_country.author_or_editor FROM book_club WHERE book_country.year > '1989' ORDER BY book_country.publisher, book_country.author_or_editor
SELECT DISTINCT book_publisher.publisher FROM book_club
SELECT DISTINCT book_publisher.publisher FROM book_club
SELECT book_country.year, book_country.category, book_country.publisher FROM book_club ORDER BY book_country.year DESC NULLS LAST
SELECT book_country.year, book_country.category, book_country.publisher FROM book_club ORDER BY book_country.year DESC NULLS LAST
SELECT book_country.publisher, COUNT(book_title) AS book_count FROM book_club GROUP BY book_country.publisher
SELECT book_publisher.publisher, COUNT(book_title) AS total_books FROM book_club GROUP BY book_publisher.publisher
SELECT book_country.publisher, COUNT(book_country.book_title) AS total_books FROM book_club GROUP BY book_country.publisher ORDER BY total_books DESC NULLS LAST LIMIT 1
SELECT book_country.publisher FROM book_club GROUP BY book_country.publisher ORDER BY COUNT(book_country.publisher) DESC NULLS LAST LIMIT 1
SELECT book_category.category, COUNT(book_category.book_club_id) AS total_books FROM book_club GROUP BY book_category.category
SELECT book_category.category, COUNT(book_title) AS number_of_books FROM book_country JOIN book_club ON book_country.category = book_category.category GROUP BY book_category.category
SELECT DISTINCT category FROM book_club WHERE year > '1989' ORDER BY category
SELECT category FROM book_club WHERE year > '1989' GROUP BY category HAVING COUNT(book_title) >= 2
SELECT DISTINCT book_publisher.publisher FROM book_club WHERE (book_publisher.year = '1989' OR book_publisher.year = '1990') GROUP BY book_publisher.publisher HAVING COUNT(CASE WHEN book_publisher.year = '1989' THEN 1 END) >= 1 AND COUNT(CASE WHEN book_publisher.year = '1990' THEN 1 END) >= 1
SELECT DISTINCT publisher FROM book_club WHERE year = '1989' AND year = '1990'
SELECT DISTINCT publisher FROM book_club WHERE year <> 1989
SELECT DISTINCT book_publisher.publisher FROM book_club WHERE YEAR(book_publisher.year) <> 1989
SELECT movie.budget_million, movie.year, movie.director FROM movie ORDER BY movie.budget_million DESC NULLS LAST
SELECT movie.title, CAST(movie.year AS VARCHAR) AS year_string, movie.director FROM movie ORDER BY movie.budget_million DESC NULLS LAST
SELECT COUNT(DISTINCT director) AS number_of_directors FROM movie
SELECT COUNT(DISTINCT director) AS num_directors FROM movie
SELECT movie.title, movie.director FROM movie WHERE movie.year <= 2000 ORDER BY movie.gross_worldwide DESC NULLS LAST LIMIT 1
SELECT movie.title, movie.director FROM movie WHERE movie.year <= 2000 ORDER BY movie.gross_worldwide DESC NULLS LAST LIMIT 1
SELECT DISTINCT movie.director FROM movie WHERE (movie.year = '1999' OR movie.year = '2000') GROUP BY movie.director HAVING COUNT(DISTINCT CASE WHEN movie.year = '1999' THEN 1 END) >= 1 AND COUNT(DISTINCT CASE WHEN movie.year = '2000' THEN 1 END) >= 1
SELECT DISTINCT movie.director FROM movie WHERE movie.year = 1999 AND movie.year = 2000
SELECT DISTINCT movie.director FROM movie WHERE (movie.year = '1999' OR movie.year = '2000')
SELECT DISTINCT director FROM movie WHERE year IN (1999, 2000) ORDER BY director
SELECT AVG(budget_million), MAX(budget_million), MIN(budget_million) FROM movie WHERE year < 2000
SELECT AVG(budget_million), MAX(budget_million), MIN(budget_million) FROM movie WHERE year < 2000
